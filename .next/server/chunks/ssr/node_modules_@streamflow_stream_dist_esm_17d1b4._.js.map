{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/common/types.js"],"sourcesContent":["export { ContractError, IChain, ICluster } from \"@streamflow/common\";\nexport var StreamDirection;\n(function (StreamDirection) {\n    StreamDirection[\"Outgoing\"] = \"outgoing\";\n    StreamDirection[\"Incoming\"] = \"incoming\";\n    StreamDirection[\"All\"] = \"all\";\n})(StreamDirection || (StreamDirection = {}));\nexport var StreamType;\n(function (StreamType) {\n    StreamType[\"All\"] = \"all\";\n    StreamType[\"Payment\"] = \"payment\";\n    StreamType[\"Vesting\"] = \"vesting\";\n    StreamType[\"Lock\"] = \"lock\";\n})(StreamType || (StreamType = {}));\n/**\n * Error codes raised by all protocols except for Solana\n */\nexport var ContractErrorCode;\n(function (ContractErrorCode) {\n    /** Contract does not exist */\n    ContractErrorCode[\"ECONTRACT_NOT_INIT\"] = \"ECONTRACT_NOT_INIT\";\n    /** Invalid total amount */\n    ContractErrorCode[\"EBAD_AMOUNT\"] = \"EBAD_AMOUNT\";\n    /** No permissions to perform an operation */\n    ContractErrorCode[\"ENO_PERMISSIONS\"] = \"ENO_PERMISSIONS\";\n    /** Invalid input parameters on create/update */\n    ContractErrorCode[\"EBADINPUT\"] = \"EBADINPUT\";\n    /** Contract is already ended */\n    ContractErrorCode[\"ECLOSED\"] = \"ECLOSED\";\n    /** Invalid amount per period input */\n    ContractErrorCode[\"EBAD_INPUT_AMOUNT_PER_PERIOD\"] = \"EBAD_INPUT_AMOUNT_PER_PERIOD\";\n    /** Pause feature is not supported */\n    ContractErrorCode[\"EBAD_INPUT_PAUSABLE\"] = \"EBAD_INPUT_PAUSABLE\";\n    /** Not used currently  */\n    ContractErrorCode[\"EBAD_INPUT_UPDATE_RATE\"] = \"EBAD_INPUT_UPDATE_RATE\";\n    /** Invalid cliff amount input */\n    ContractErrorCode[\"EBAD_INPUT_CLIFF_AMOUNT\"] = \"EBAD_INPUT_CLIFF_AMOUNT\";\n    /** Invalid period input */\n    ContractErrorCode[\"EBAD_INPUT_PERIOD\"] = \"EBAD_INPUT_PERIOD\";\n    /** Invalid start time of the contract */\n    ContractErrorCode[\"EBAD_INPUT_START\"] = \"EBAD_INPUT_START\";\n    /** EVM: token allowance is not enough to create a Contract */\n    ContractErrorCode[\"EBAD_INSUFFICIENT_TOKEN_ALLOWANCE\"] = \"EBAD_INSUFFICIENT_TOKEN_ALLOWANCE\";\n    /** EVM: not enough coins were passed for withdrawal fees */\n    ContractErrorCode[\"EBAD_INSUFFICIENT_WITHDRAWAL_FEES\"] = \"EBAD_INSUFFICIENT_WITHDRAWAL_FEES\";\n    /** Sui: Insufficient amount of tokens passed */\n    ContractErrorCode[\"EBAD_INSUFFICIENT_AMOUNT\"] = \"EBAD_INSUFFICIENT_AMOUNT\";\n    /** Contract is already paused */\n    ContractErrorCode[\"EPAUSED\"] = \"EPAUSED\";\n    /** Contract is not paused */\n    ContractErrorCode[\"ENOTPAUSED\"] = \"ENOTPAUSED\";\n    /** Aptos: user opt out from direct coin transfers feature and has not coin wallet registered */\n    ContractErrorCode[\"ENO_RECIPIENT_COIN_ADDRESS\"] = \"ENO_RECIPIENT_COIN_ADDRESS\";\n})(ContractErrorCode || (ContractErrorCode = {}));\n/**\n * Error codes raised by Solana protocol specifically\n */\nexport var SolanaContractErrorCode;\n(function (SolanaContractErrorCode) {\n    /** Accounts not writable */\n    SolanaContractErrorCode[\"AccountsNotWritable\"] = \"AccountsNotWritable\";\n    /** Invalid Metadata */\n    SolanaContractErrorCode[\"InvalidMetadata\"] = \"InvalidMetadata\";\n    /** Invalid metadata account */\n    SolanaContractErrorCode[\"InvalidMetadataAccount\"] = \"InvalidMetadataAccount\";\n    /** Provided accounts don't match the ones in contract */\n    SolanaContractErrorCode[\"MetadataAccountMismatch\"] = \"MetadataAccountMismatch\";\n    /** Invalid escrow account */\n    SolanaContractErrorCode[\"InvalidEscrowAccount\"] = \"InvalidEscrowAccount\";\n    /** Provided account(s) is/are not valid associated token accounts */\n    SolanaContractErrorCode[\"NotAssociated\"] = \"NotAssociated\";\n    /** Sender mint does not match accounts mint */\n    SolanaContractErrorCode[\"MintMismatch\"] = \"MintMismatch\";\n    /** Recipient not transferable for account */\n    SolanaContractErrorCode[\"TransferNotAllowed\"] = \"TransferNotAllowed\";\n    /** Contract closed */\n    SolanaContractErrorCode[\"ContractClosed\"] = \"ContractClosed\";\n    /** Invalid Streamflow Treasury accounts supplied */\n    SolanaContractErrorCode[\"InvalidTreasury\"] = \"InvalidTreasury\";\n    /** Given timestamps are invalid */\n    SolanaContractErrorCode[\"InvalidTimestamps\"] = \"InvalidTimestamps\";\n    /** Invalid deposit configuration */\n    SolanaContractErrorCode[\"InvalidDepositConfiguration\"] = \"InvalidDepositConfiguration\";\n    /** Amount cannot be zero */\n    SolanaContractErrorCode[\"AmountIsZero\"] = \"AmountIsZero\";\n    /** Amount requested is larger than available */\n    SolanaContractErrorCode[\"AmountMoreThanAvailable\"] = \"AmountMoreThanAvailable\";\n    /** Amount currently available is zero */\n    SolanaContractErrorCode[\"AmountAvailableIsZero\"] = \"AmountAvailableIsZero\";\n    /** Arithmetic error */\n    SolanaContractErrorCode[\"ArithmeticError\"] = \"ArithmeticError\";\n    /** Metadata account data must be 1104 bytes long */\n    SolanaContractErrorCode[\"InvalidMetadataSize\"] = \"InvalidMetadataSize\";\n    /** Metadata state account must be initialized */\n    SolanaContractErrorCode[\"UninitializedMetadata\"] = \"UninitializedMetadata\";\n    /** Authority does not have permission for this action */\n    SolanaContractErrorCode[\"Unauthorized\"] = \"Unauthorized\";\n    /** Contract is not transferable to the original recipient */\n    SolanaContractErrorCode[\"SelfTransfer\"] = \"SelfTransfer\";\n    /** Contract is already paused */\n    SolanaContractErrorCode[\"AlreadyPaused\"] = \"AlreadyPaused\";\n    /** Contract is not paused */\n    SolanaContractErrorCode[\"NotPaused\"] = \"NotPaused\";\n    /** Meta account is not rent exempt */\n    SolanaContractErrorCode[\"MetadataNotRentExempt\"] = \"MetadataNotRentExempt\";\n})(SolanaContractErrorCode || (SolanaContractErrorCode = {}));\nexport var SolanaAlignedProxyErrorCode;\n(function (SolanaAlignedProxyErrorCode) {\n    /** Authority does not have permission for this action */\n    SolanaAlignedProxyErrorCode[\"Unauthorized\"] = \"Unauthorized\";\n    /** Arithmetic error */\n    SolanaAlignedProxyErrorCode[\"ArithmeticError\"] = \"ArithmeticError\";\n    /** Mint has unsupported Token Extensions */\n    SolanaAlignedProxyErrorCode[\"UnsupportedTokenExtensions\"] = \"UnsupportedTokenExtensions\";\n    /** Provided period is too short, should be equal or more than 30 seconds */\n    SolanaAlignedProxyErrorCode[\"PeriodTooShort\"] = \"PeriodTooShort\";\n    /** Provided percentage tick size is invalid */\n    SolanaAlignedProxyErrorCode[\"InvalidTickSize\"] = \"InvalidTickSize\";\n    /** Provided percentage bounds are invalid */\n    SolanaAlignedProxyErrorCode[\"InvalidPercentageBoundaries\"] = \"InvalidPercentageBoundaries\";\n    /** Provided price bounds are invalid */\n    SolanaAlignedProxyErrorCode[\"InvalidPriceBoundaries\"] = \"InvalidPriceBoundaries\";\n    /** Unsupported price oracle */\n    SolanaAlignedProxyErrorCode[\"UnsupportedOracle\"] = \"UnsupportedOracle\";\n    /** Invalid oracle account */\n    SolanaAlignedProxyErrorCode[\"InvalidOracleAccount\"] = \"InvalidOracleAccount\";\n    /** Invalid oracle price */\n    SolanaAlignedProxyErrorCode[\"InvalidOraclePrice\"] = \"InvalidOraclePrice\";\n    /** Invalid Stream Metadata */\n    SolanaAlignedProxyErrorCode[\"InvalidStreamMetadata\"] = \"InvalidStreamMetadata\";\n    /** Release amount has already been updated in this period */\n    SolanaAlignedProxyErrorCode[\"AmountAlreadyUpdated\"] = \"AmountAlreadyUpdated\";\n    /** All funds are already unlocked */\n    SolanaAlignedProxyErrorCode[\"AllFundsUnlocked\"] = \"AllFundsUnlocked\";\n})(SolanaAlignedProxyErrorCode || (SolanaAlignedProxyErrorCode = {}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/common/constants.js"],"sourcesContent":["import BN from \"bn.js\";\nexport const MAX_SAFE_UNIX_TIME_VALUE = 8640000000000;\nexport const BASE_FEE = 1009900; // Buffer to include usual fees when calculating stream amount\nexport const WITHDRAW_AVAILABLE_AMOUNT = new BN(\"18446744073709551615\"); // Magical number to withdraw all available amount from a Contract\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,2BAA2B;AACjC,MAAM,WAAW,SAAS,8DAA8D;AACxF,MAAM,4BAA4B,IAAI,qIAAA,CAAA,UAAE,CAAC,yBAAyB,kEAAkE","ignoreList":[0]}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/common/contractUtils.js"],"sourcesContent":["import BN from \"bn.js\";\nimport { StreamType } from \"./types.js\";\nimport { MAX_SAFE_UNIX_TIME_VALUE } from \"./constants.js\";\nexport const calculateUnlockedAmount = ({ depositedAmount, cliff, cliffAmount, end, currentTimestamp, lastRateChangeTime, period, amountPerPeriod, fundsUnlockedAtLastRateChange, }) => {\n    const deposited = depositedAmount;\n    if (currentTimestamp < cliff)\n        return new BN(0);\n    if (currentTimestamp > end)\n        return deposited;\n    const savedUnlockedFunds = lastRateChangeTime === 0 ? cliffAmount : fundsUnlockedAtLastRateChange;\n    const savedUnlockedFundsTime = lastRateChangeTime === 0 ? cliff : lastRateChangeTime;\n    const streamed = new BN(Math.floor((currentTimestamp - savedUnlockedFundsTime) / period))\n        .mul(amountPerPeriod)\n        .add(savedUnlockedFunds);\n    return streamed.lt(deposited) ? streamed : deposited;\n};\nexport const isCliffCloseToDepositedAmount = (streamData) => {\n    return streamData.cliffAmount.gte(streamData.depositedAmount.sub(new BN(1)));\n};\nexport const isPayment = (streamData) => {\n    return streamData.canTopup;\n};\nexport const isVesting = (streamData) => {\n    return (!streamData.canTopup &&\n        !isCliffCloseToDepositedAmount(streamData) &&\n        !isDynamicLock(streamData.minPrice, streamData.maxPrice, streamData.minPercentage, streamData.maxPercentage));\n};\nexport const isAligned = (stream) => {\n    return \"minPrice\" in stream && \"maxPrice\" in stream && \"minPercentage\" in stream && \"maxPercentage\" in stream;\n};\nexport const isCreateAlignedStreamData = (obj) => {\n    return \"minPrice\" in obj && \"maxPrice\" in obj && \"minPercentage\" in obj && \"maxPercentage\" in obj;\n};\nexport const isDynamicLock = (minPrice, maxPrice, minPercentage, maxPercentage) => {\n    return (!!minPrice && !!maxPrice && minPrice > 0 && maxPrice - minPrice <= 1 && minPercentage === 0 && maxPercentage === 100);\n};\nexport const isTokenLock = (streamData) => {\n    return (!streamData.canTopup &&\n        !streamData.automaticWithdrawal &&\n        !streamData.cancelableBySender &&\n        !streamData.cancelableByRecipient &&\n        !streamData.transferableBySender &&\n        !streamData.transferableByRecipient &&\n        (isCliffCloseToDepositedAmount(streamData) ||\n            isDynamicLock(streamData.minPrice, streamData.maxPrice, streamData.minPercentage, streamData.maxPercentage)));\n};\nexport const buildStreamType = (streamData) => {\n    if (isVesting(streamData)) {\n        return StreamType.Vesting;\n    }\n    if (isTokenLock(streamData)) {\n        return StreamType.Lock;\n    }\n    return StreamType.Payment;\n};\nexport const decodeEndTime = (endTime) => {\n    if (endTime.gt(new BN(MAX_SAFE_UNIX_TIME_VALUE))) {\n        return MAX_SAFE_UNIX_TIME_VALUE;\n    }\n    return endTime.toNumber();\n};\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AADA;;;;AAEO,MAAM,0BAA0B,CAAC,EAAE,eAAe,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,MAAM,EAAE,eAAe,EAAE,6BAA6B,EAAG;IAC/K,MAAM,YAAY;IAClB,IAAI,mBAAmB,OACnB,OAAO,IAAI,qIAAA,CAAA,UAAE,CAAC;IAClB,IAAI,mBAAmB,KACnB,OAAO;IACX,MAAM,qBAAqB,uBAAuB,IAAI,cAAc;IACpE,MAAM,yBAAyB,uBAAuB,IAAI,QAAQ;IAClE,MAAM,WAAW,IAAI,qIAAA,CAAA,UAAE,CAAC,KAAK,KAAK,CAAC,CAAC,mBAAmB,sBAAsB,IAAI,SAC5E,GAAG,CAAC,iBACJ,GAAG,CAAC;IACT,OAAO,SAAS,EAAE,CAAC,aAAa,WAAW;AAC/C;AACO,MAAM,gCAAgC,CAAC;IAC1C,OAAO,WAAW,WAAW,CAAC,GAAG,CAAC,WAAW,eAAe,CAAC,GAAG,CAAC,IAAI,qIAAA,CAAA,UAAE,CAAC;AAC5E;AACO,MAAM,YAAY,CAAC;IACtB,OAAO,WAAW,QAAQ;AAC9B;AACO,MAAM,YAAY,CAAC;IACtB,OAAQ,CAAC,WAAW,QAAQ,IACxB,CAAC,8BAA8B,eAC/B,CAAC,cAAc,WAAW,QAAQ,EAAE,WAAW,QAAQ,EAAE,WAAW,aAAa,EAAE,WAAW,aAAa;AACnH;AACO,MAAM,YAAY,CAAC;IACtB,OAAO,cAAc,UAAU,cAAc,UAAU,mBAAmB,UAAU,mBAAmB;AAC3G;AACO,MAAM,4BAA4B,CAAC;IACtC,OAAO,cAAc,OAAO,cAAc,OAAO,mBAAmB,OAAO,mBAAmB;AAClG;AACO,MAAM,gBAAgB,CAAC,UAAU,UAAU,eAAe;IAC7D,OAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,YAAY,WAAW,KAAK,WAAW,YAAY,KAAK,kBAAkB,KAAK,kBAAkB;AAC7H;AACO,MAAM,cAAc,CAAC;IACxB,OAAQ,CAAC,WAAW,QAAQ,IACxB,CAAC,WAAW,mBAAmB,IAC/B,CAAC,WAAW,kBAAkB,IAC9B,CAAC,WAAW,qBAAqB,IACjC,CAAC,WAAW,oBAAoB,IAChC,CAAC,WAAW,uBAAuB,IACnC,CAAC,8BAA8B,eAC3B,cAAc,WAAW,QAAQ,EAAE,WAAW,QAAQ,EAAE,WAAW,aAAa,EAAE,WAAW,aAAa,CAAC;AACvH;AACO,MAAM,kBAAkB,CAAC;IAC5B,IAAI,UAAU,aAAa;QACvB,OAAO,wLAAA,CAAA,aAAU,CAAC,OAAO;IAC7B;IACA,IAAI,YAAY,aAAa;QACzB,OAAO,wLAAA,CAAA,aAAU,CAAC,IAAI;IAC1B;IACA,OAAO,wLAAA,CAAA,aAAU,CAAC,OAAO;AAC7B;AACO,MAAM,gBAAgB,CAAC;IAC1B,IAAI,QAAQ,EAAE,CAAC,IAAI,qIAAA,CAAA,UAAE,CAAC,4KAAA,CAAA,2BAAwB,IAAI;QAC9C,OAAO,4KAAA,CAAA,2BAAwB;IACnC;IACA,OAAO,QAAQ,QAAQ;AAC3B","ignoreList":[0]}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/common/utils.js"],"sourcesContent":["import BN from \"bn.js\";\nimport { ContractError } from \"./types.js\";\nconst FEE_PRECISION = 4;\nconst FEE_NORMALIZER = 10 ** FEE_PRECISION;\nconst FEE_MULTIPLIER = new BN(10 ** 6);\n/**\n * Used for conversion of token amounts to their Big Number representation.\n * Get Big Number representation in the smallest units from the same value in the highest units.\n * @param {number} value - Number of tokens you want to convert to its BN representation.\n * @param {number} decimals - Number of decimals the token has.\n */\nexport const getBN = (value, decimals) => {\n    const decimalPart = value - Math.trunc(value);\n    const integerPart = new BN(Math.trunc(value));\n    const decimalE = new BN(decimalPart * 1e9);\n    const sum = integerPart.mul(new BN(1e9)).add(decimalE);\n    const resultE = sum.mul(new BN(10).pow(new BN(decimals)));\n    return resultE.div(new BN(1e9));\n};\n/**\n * Used for token amounts conversion from their Big Number representation to number.\n * Get value in the highest units from BN representation of the same value in the smallest units.\n * @param {BN} value - Big Number representation of value in the smallest units.\n * @param {number} decimals - Number of decimals the token has.\n */\nexport const getNumberFromBN = (value, decimals) => value.gt(new BN(2 ** 53 - 1)) ? value.div(new BN(10 ** decimals)).toNumber() : value.toNumber() / 10 ** decimals;\n/**\n * Calculate total amount of a Contract including all fees.\n * - first we convert fee floating to a BN with up to 4 decimals precision\n * - then we reverse the fee with `FEE_MULTIPLIER` to safely multiply it by depositedAmount\n *   to receive a total number and not percentage of depositedAmount\n * @param depositedAmount deposited raw tokens\n * @param totalFee sum of all fees in percentage as floating number, e.g. 0.99% should be supplied as 0.99\n * @returns total tokens amount that Contract will retrieve from the Sender\n */\nexport const calculateTotalAmountToDeposit = (depositedAmount, totalFee) => {\n    const totalFeeNormalized = new BN(totalFee * FEE_NORMALIZER);\n    return depositedAmount.mul(totalFeeNormalized.add(FEE_MULTIPLIER)).div(FEE_MULTIPLIER);\n};\n/**\n * Used to make on chain calls to the contract and wrap raised errors if any\n * @param func function that interacts with the contract\n * @param callback callback that may be used to extract error code\n * @returns {T}\n */\nexport async function handleContractError(func, callback) {\n    try {\n        return await func();\n    }\n    catch (err) {\n        if (err instanceof Error) {\n            if (callback) {\n                throw new ContractError(err, callback(err));\n            }\n            throw new ContractError(err);\n        }\n        throw err;\n    }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAAA;;;AACA,MAAM,gBAAgB;AACtB,MAAM,iBAAiB,MAAM;AAC7B,MAAM,iBAAiB,IAAI,qIAAA,CAAA,UAAE,CAAC,MAAM;AAO7B,MAAM,QAAQ,CAAC,OAAO;IACzB,MAAM,cAAc,QAAQ,KAAK,KAAK,CAAC;IACvC,MAAM,cAAc,IAAI,qIAAA,CAAA,UAAE,CAAC,KAAK,KAAK,CAAC;IACtC,MAAM,WAAW,IAAI,qIAAA,CAAA,UAAE,CAAC,cAAc;IACtC,MAAM,MAAM,YAAY,GAAG,CAAC,IAAI,qIAAA,CAAA,UAAE,CAAC,MAAM,GAAG,CAAC;IAC7C,MAAM,UAAU,IAAI,GAAG,CAAC,IAAI,qIAAA,CAAA,UAAE,CAAC,IAAI,GAAG,CAAC,IAAI,qIAAA,CAAA,UAAE,CAAC;IAC9C,OAAO,QAAQ,GAAG,CAAC,IAAI,qIAAA,CAAA,UAAE,CAAC;AAC9B;AAOO,MAAM,kBAAkB,CAAC,OAAO,WAAa,MAAM,EAAE,CAAC,IAAI,qIAAA,CAAA,UAAE,CAAC,KAAK,KAAK,MAAM,MAAM,GAAG,CAAC,IAAI,qIAAA,CAAA,UAAE,CAAC,MAAM,WAAW,QAAQ,KAAK,MAAM,QAAQ,KAAK,MAAM;AAUrJ,MAAM,gCAAgC,CAAC,iBAAiB;IAC3D,MAAM,qBAAqB,IAAI,qIAAA,CAAA,UAAE,CAAC,WAAW;IAC7C,OAAO,gBAAgB,GAAG,CAAC,mBAAmB,GAAG,CAAC,iBAAiB,GAAG,CAAC;AAC3E;AAOO,eAAe,oBAAoB,IAAI,EAAE,QAAQ;IACpD,IAAI;QACA,OAAO,MAAM;IACjB,EACA,OAAO,KAAK;QACR,IAAI,eAAe,OAAO;YACtB,IAAI,UAAU;gBACV,MAAM,IAAI,8JAAA,CAAA,gBAAa,CAAC,KAAK,SAAS;YAC1C;YACA,MAAM,IAAI,8JAAA,CAAA,gBAAa,CAAC;QAC5B;QACA,MAAM;IACV;AACJ","ignoreList":[0]}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/solana/constants.js"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { Buffer } from \"buffer\";\nimport { ICluster, SolanaContractErrorCode, SolanaAlignedProxyErrorCode } from \"../common/types.js\";\nexport const TX_FINALITY_CONFIRMED = \"confirmed\";\nexport const ORIGINAL_CONTRACT_SENDER_OFFSET = 9;\nexport const STREAM_STRUCT_OFFSET_SENDER = 49;\nexport const STREAM_STRUCT_OFFSET_RECIPIENT = 113;\nexport const STREAM_STRUCT_OFFSET_MINT = 177;\nexport const STREAM_STRUCT_OFFSET_CLOSED = 671;\nexport const ALIGNED_PRECISION_FACTOR_POW = 9;\nexport const STREAM_STRUCT_OFFSETS = {\n    mint: STREAM_STRUCT_OFFSET_MINT,\n    recipient: STREAM_STRUCT_OFFSET_RECIPIENT,\n    sender: STREAM_STRUCT_OFFSET_SENDER,\n    closed: STREAM_STRUCT_OFFSET_CLOSED,\n};\n// Defined: https://github.com/streamflow-finance/protocol/blob/main/programs/protocol/src/state.rs#L25\nexport const CREATE_PARAMS_PADDING = 126;\nexport const PROGRAM_ID = {\n    [ICluster.Devnet]: \"HqDGZjaVRXJ9MGRQEw7qDc2rAr6iH1n1kAQdCZaCMfMZ\",\n    [ICluster.Mainnet]: \"strmRqUCoQUgGUan5YhzUZa6KqdzwX5L6FpUxfmKg5m\",\n    [ICluster.Testnet]: \"HqDGZjaVRXJ9MGRQEw7qDc2rAr6iH1n1kAQdCZaCMfMZ\",\n    [ICluster.Local]: \"HqDGZjaVRXJ9MGRQEw7qDc2rAr6iH1n1kAQdCZaCMfMZ\",\n};\nexport const ALIGNED_UNLOCKS_PROGRAM_ID = {\n    [ICluster.Devnet]: \"aSTRM2NKoKxNnkmLWk9sz3k74gKBk9t7bpPrTGxMszH\",\n    [ICluster.Mainnet]: \"aSTRM2NKoKxNnkmLWk9sz3k74gKBk9t7bpPrTGxMszH\",\n    [ICluster.Testnet]: \"aSTRM2NKoKxNnkmLWk9sz3k74gKBk9t7bpPrTGxMszH\",\n    [ICluster.Local]: \"aSTRM2NKoKxNnkmLWk9sz3k74gKBk9t7bpPrTGxMszH\",\n};\n// Aligned Unlocks Program transactions require a higher comput limit\nexport const ALIGNED_COMPUTE_LIMIT = 300000;\nexport const CONTRACT_DISCRIMINATOR = [172, 138, 115, 242, 121, 67, 183, 26];\nexport const TEST_ORACLE_DISCRIMINATOR = [198, 49, 63, 134, 232, 251, 168, 28];\nexport const CONTRACT_SEED = Buffer.from(\"contract\", \"utf-8\");\nexport const ESCROW_SEED = Buffer.from(\"strm\", \"utf-8\");\nexport const TEST_ORACLE_SEED = Buffer.from(\"test-oracle\", \"utf-8\");\nexport const PARTNER_ORACLE_PROGRAM_ID = \"pardpVtPjC8nLj1Dwncew62mUzfChdCX1EaoZe8oCAa\";\nexport const STREAMFLOW_TREASURY_PUBLIC_KEY = new PublicKey(\"5SEpbdjFK5FxwTvfsGMXVQTD2v4M2c5tyRTxhdsPkgDw\");\nexport const WITHDRAWOR_PUBLIC_KEY = new PublicKey(\"wdrwhnCv4pzW8beKsbPa4S2UDZrXenjg16KJdKSpb5u\");\nexport const FEE_ORACLE_PUBLIC_KEY = new PublicKey(\"B743wFVk2pCYhV91cn287e1xY7f1vt4gdY48hhNiuQmT\");\nexport const AIRDROP_TEST_TOKEN = \"Gssm3vfi8s65R31SBdmQRq6cKeYojGgup7whkw4VCiQj\";\nexport const FEES_METADATA_SEED = Buffer.from(\"strm_fees\");\nexport const DEFAULT_STREAMFLOW_FEE = 0.99;\nexport const AIRDROP_AMOUNT = 1; // 1 SOL is the cap on the testnet\nexport const PARTNER_SCHEMA = {\n    struct: {\n        pubkey: { array: { type: \"u8\", len: 32 } },\n        partner_fee: \"f32\",\n        strm_fee: \"f32\",\n    },\n};\nexport const PARTNERS_SCHEMA = { array: { type: PARTNER_SCHEMA } };\nexport const SOLANA_ERROR_MATCH_REGEX = /custom program error: (0x\\d{2})/;\nexport const SOLANA_ERROR_MAP = {\n    0x60: SolanaContractErrorCode.AccountsNotWritable,\n    0x61: SolanaContractErrorCode.InvalidMetadata,\n    0x62: SolanaContractErrorCode.InvalidMetadataAccount,\n    0x63: SolanaContractErrorCode.MetadataAccountMismatch,\n    0x64: SolanaContractErrorCode.InvalidEscrowAccount,\n    0x65: SolanaContractErrorCode.NotAssociated,\n    0x66: SolanaContractErrorCode.MintMismatch,\n    0x67: SolanaContractErrorCode.TransferNotAllowed,\n    0x68: SolanaContractErrorCode.ContractClosed,\n    0x69: SolanaContractErrorCode.InvalidTreasury,\n    0x70: SolanaContractErrorCode.InvalidTimestamps,\n    0x71: SolanaContractErrorCode.InvalidDepositConfiguration,\n    0x72: SolanaContractErrorCode.AmountIsZero,\n    0x73: SolanaContractErrorCode.AmountMoreThanAvailable,\n    0x74: SolanaContractErrorCode.AmountAvailableIsZero,\n    0x80: SolanaContractErrorCode.ArithmeticError,\n    0x81: SolanaContractErrorCode.InvalidMetadataSize,\n    0x82: SolanaContractErrorCode.UninitializedMetadata,\n    0x83: SolanaContractErrorCode.Unauthorized,\n    0x84: SolanaContractErrorCode.SelfTransfer,\n    0x85: SolanaContractErrorCode.AlreadyPaused,\n    0x86: SolanaContractErrorCode.NotPaused,\n    0x87: SolanaContractErrorCode.MetadataNotRentExempt,\n    0x1770: SolanaAlignedProxyErrorCode.Unauthorized,\n    0x1771: SolanaAlignedProxyErrorCode.ArithmeticError,\n    0x1772: SolanaAlignedProxyErrorCode.UnsupportedTokenExtensions,\n    0x1773: SolanaAlignedProxyErrorCode.PeriodTooShort,\n    0x1774: SolanaAlignedProxyErrorCode.InvalidTickSize,\n    0x1775: SolanaAlignedProxyErrorCode.InvalidPercentageBoundaries,\n    0x1776: SolanaAlignedProxyErrorCode.InvalidPriceBoundaries,\n    0x1777: SolanaAlignedProxyErrorCode.UnsupportedOracle,\n    0x1778: SolanaAlignedProxyErrorCode.InvalidOracleAccount,\n    0x1779: SolanaAlignedProxyErrorCode.InvalidOraclePrice,\n    0x177a: SolanaAlignedProxyErrorCode.InvalidStreamMetadata,\n    0x177b: SolanaAlignedProxyErrorCode.AmountAlreadyUpdated,\n    0x177c: SolanaAlignedProxyErrorCode.AllFundsUnlocked,\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/solana/types.js"],"sourcesContent":["import { buildStreamType, calculateUnlockedAmount, decodeEndTime } from \"../common/contractUtils.js\";\nimport { getNumberFromBN } from \"../common/utils.js\";\nimport { ALIGNED_PRECISION_FACTOR_POW } from \"./constants.js\";\nexport { IChain, ICluster, ContractError } from \"@streamflow/common\";\nexport class Contract {\n    magic;\n    version;\n    createdAt;\n    withdrawnAmount;\n    canceledAt;\n    end;\n    lastWithdrawnAt;\n    sender;\n    senderTokens;\n    recipient;\n    recipientTokens;\n    mint;\n    escrowTokens;\n    streamflowTreasury;\n    streamflowTreasuryTokens;\n    streamflowFeeTotal;\n    streamflowFeeWithdrawn;\n    streamflowFeePercent;\n    partnerFeeTotal;\n    partnerFeeWithdrawn;\n    partnerFeePercent;\n    partner;\n    partnerTokens;\n    start;\n    depositedAmount;\n    period;\n    amountPerPeriod;\n    cliff;\n    cliffAmount;\n    cancelableBySender;\n    cancelableByRecipient;\n    automaticWithdrawal;\n    transferableBySender;\n    transferableByRecipient;\n    canTopup;\n    name;\n    withdrawalFrequency;\n    closed;\n    currentPauseStart;\n    pauseCumulative;\n    lastRateChangeTime;\n    fundsUnlockedAtLastRateChange;\n    type;\n    isAligned;\n    constructor(stream) {\n        this.magic = stream.magic.toNumber();\n        this.version = stream.version.toNumber();\n        this.createdAt = stream.createdAt.toNumber();\n        this.withdrawnAmount = stream.withdrawnAmount;\n        this.canceledAt = stream.canceledAt.toNumber();\n        // for aligned contracts end time can be an invalid timeValue\n        this.end = decodeEndTime(stream.end);\n        this.lastWithdrawnAt = stream.lastWithdrawnAt.toNumber();\n        this.sender = stream.sender.toBase58();\n        this.senderTokens = stream.senderTokens.toBase58();\n        this.recipient = stream.recipient.toBase58();\n        this.recipientTokens = stream.recipientTokens.toBase58();\n        this.mint = stream.mint.toBase58();\n        this.escrowTokens = stream.escrowTokens.toBase58();\n        this.streamflowTreasury = stream.streamflowTreasury.toBase58();\n        this.streamflowTreasuryTokens = stream.streamflowTreasuryTokens.toBase58();\n        this.streamflowFeeTotal = stream.streamflowFeeTotal;\n        this.streamflowFeeWithdrawn = stream.streamflowFeeWithdrawn;\n        this.streamflowFeePercent = stream.streamflowFeePercent.toNumber();\n        this.partnerFeeTotal = stream.partnerFeeTotal;\n        this.partnerFeeWithdrawn = stream.partnerFeeWithdrawn;\n        this.partnerFeePercent = stream.partnerFeePercent.toNumber();\n        this.partner = stream.partner.toBase58();\n        this.partnerTokens = stream.partnerTokens?.toBase58();\n        this.start = stream.start.toNumber();\n        this.depositedAmount = stream.depositedAmount;\n        this.period = stream.period.toNumber();\n        this.amountPerPeriod = stream.amountPerPeriod;\n        this.cliff = stream.cliff.toNumber();\n        this.cliffAmount = stream.cliffAmount;\n        this.cancelableBySender = stream.cancelableBySender;\n        this.cancelableByRecipient = stream.cancelableByRecipient;\n        this.automaticWithdrawal = stream.automaticWithdrawal;\n        this.transferableBySender = stream.transferableBySender;\n        this.transferableByRecipient = stream.transferableByRecipient;\n        this.canTopup = stream.canTopup;\n        this.name = stream.name;\n        this.withdrawalFrequency = stream.withdrawFrequency.toNumber();\n        this.closed = stream.closed;\n        this.currentPauseStart = stream.currentPauseStart.toNumber();\n        this.pauseCumulative = stream.pauseCumulative;\n        this.lastRateChangeTime = stream.lastRateChangeTime.toNumber();\n        this.fundsUnlockedAtLastRateChange = stream.fundsUnlockedAtLastRateChange;\n        this.type = buildStreamType(this);\n        this.isAligned = false;\n    }\n    unlocked(currentTimestamp) {\n        return calculateUnlockedAmount({\n            ...this,\n            currentTimestamp,\n        });\n    }\n    remaining(decimals) {\n        return getNumberFromBN(this.depositedAmount.sub(this.withdrawnAmount), decimals);\n    }\n}\nexport class AlignedContract extends Contract {\n    minPrice;\n    maxPrice;\n    minPercentage;\n    maxPercentage;\n    tickSize;\n    proxyAddress;\n    priceOracle;\n    oracleType;\n    initialAmountPerPeriod;\n    initialPrice;\n    lastPrice;\n    lastAmountUpdateTime;\n    initialNetAmount;\n    constructor(stream, alignedProxy) {\n        super(stream);\n        this.minPrice = getNumberFromBN(alignedProxy.minPrice, ALIGNED_PRECISION_FACTOR_POW);\n        this.maxPrice = getNumberFromBN(alignedProxy.maxPrice, ALIGNED_PRECISION_FACTOR_POW);\n        this.minPercentage = getNumberFromBN(alignedProxy.minPercentage, ALIGNED_PRECISION_FACTOR_POW);\n        this.maxPercentage = getNumberFromBN(alignedProxy.maxPercentage, ALIGNED_PRECISION_FACTOR_POW);\n        this.oracleType = (Object.keys(alignedProxy.priceOracleType).find((key) => !!key) || \"none\");\n        this.tickSize = alignedProxy.tickSize.toNumber();\n        this.priceOracle = this.oracleType === \"none\" ? undefined : alignedProxy.priceOracle.toBase58();\n        this.sender = alignedProxy.sender.toBase58();\n        this.canceledAt = alignedProxy.streamCanceledTime.toNumber();\n        this.proxyAddress = stream.sender.toBase58();\n        this.initialAmountPerPeriod = alignedProxy.initialAmountPerPeriod;\n        this.initialPrice = getNumberFromBN(alignedProxy.initialPrice, ALIGNED_PRECISION_FACTOR_POW);\n        this.lastPrice = getNumberFromBN(alignedProxy.lastPrice, ALIGNED_PRECISION_FACTOR_POW);\n        this.lastAmountUpdateTime = alignedProxy.lastAmountUpdateTime.toNumber();\n        this.initialNetAmount = alignedProxy.initialNetAmount;\n        // need to call this again since minPrice and maxPrice are used in determining the type\n        this.type = buildStreamType(this);\n        this.isAligned = true;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 563, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/solana/layout.js"],"sourcesContent":["import * as BufferLayout from \"@solana/buffer-layout\";\nimport { CREATE_PARAMS_PADDING } from \"./constants.js\";\n/**\n * Stream layout\n */\nexport const streamLayout = BufferLayout.struct([\n    BufferLayout.blob(8, \"magic\"),\n    BufferLayout.blob(1, \"version\"),\n    BufferLayout.blob(8, \"created_at\"),\n    BufferLayout.blob(8, \"withdrawn_amount\"),\n    BufferLayout.blob(8, \"canceled_at\"),\n    BufferLayout.blob(8, \"end_time\"),\n    BufferLayout.blob(8, \"last_withdrawn_at\"),\n    BufferLayout.blob(32, \"sender\"),\n    BufferLayout.blob(32, \"sender_tokens\"),\n    BufferLayout.blob(32, \"recipient\"),\n    BufferLayout.blob(32, \"recipient_tokens\"),\n    BufferLayout.blob(32, \"mint\"),\n    BufferLayout.blob(32, \"escrow_tokens\"),\n    BufferLayout.blob(32, \"streamflow_treasury\"),\n    BufferLayout.blob(32, \"streamflow_treasury_tokens\"),\n    BufferLayout.blob(8, \"streamflow_fee_total\"),\n    BufferLayout.blob(8, \"streamflow_fee_withdrawn\"),\n    BufferLayout.f32(\"streamflow_fee_percent\"),\n    BufferLayout.blob(32, \"partner\"),\n    BufferLayout.blob(32, \"partner_tokens\"),\n    BufferLayout.blob(8, \"partner_fee_total\"),\n    BufferLayout.blob(8, \"partner_fee_withdrawn\"),\n    BufferLayout.f32(\"partner_fee_percent\"),\n    BufferLayout.blob(8, \"start_time\"),\n    BufferLayout.blob(8, \"net_amount_deposited\"),\n    BufferLayout.blob(8, \"period\"),\n    BufferLayout.blob(8, \"amount_per_period\"),\n    BufferLayout.blob(8, \"cliff\"),\n    BufferLayout.blob(8, \"cliff_amount\"),\n    BufferLayout.u8(\"cancelable_by_sender\"),\n    BufferLayout.u8(\"cancelable_by_recipient\"),\n    BufferLayout.u8(\"automatic_withdrawal\"),\n    BufferLayout.u8(\"transferable_by_sender\"),\n    BufferLayout.u8(\"transferable_by_recipient\"),\n    BufferLayout.u8(\"can_topup\"),\n    BufferLayout.blob(64, \"stream_name\"),\n    BufferLayout.blob(8, \"withdraw_frequency\"),\n    // Unused, kept for backward compatibility™\n    BufferLayout.blob(4, \"ghost\"),\n    BufferLayout.u8(\"pausable\"),\n    BufferLayout.u8(\"can_update_rate\"),\n    BufferLayout.blob(4, \"create_stream_params_padding_length\"),\n    BufferLayout.seq(BufferLayout.u8(), CREATE_PARAMS_PADDING, \"create_params_padding\"),\n    BufferLayout.u8(\"closed\"),\n    BufferLayout.blob(8, \"current_pause_start\"),\n    BufferLayout.blob(8, \"pause_cumulative\"),\n    BufferLayout.blob(8, \"last_rate_change_time\"),\n    BufferLayout.blob(8, \"funds_unlocked_at_last_rate_change\"),\n]);\nexport const partnerLayout = BufferLayout.struct([\n    BufferLayout.blob(32, \"pubkey\"),\n    BufferLayout.f32(\"partner_fee\"),\n    BufferLayout.f32(\"strm_fee\"),\n]);\n/**\n * Create stream instruction layout\n */\nexport const createStreamLayout = BufferLayout.struct([\n    BufferLayout.blob(8, \"start_time\"),\n    BufferLayout.blob(8, \"net_amount_deposited\"),\n    BufferLayout.blob(8, \"period\"),\n    BufferLayout.blob(8, \"amount_per_period\"),\n    BufferLayout.blob(8, \"cliff\"),\n    BufferLayout.blob(8, \"cliff_amount\"),\n    BufferLayout.u8(\"cancelable_by_sender\"),\n    BufferLayout.u8(\"cancelable_by_recipient\"),\n    BufferLayout.u8(\"automatic_withdrawal\"),\n    BufferLayout.u8(\"transferable_by_sender\"),\n    BufferLayout.u8(\"transferable_by_recipient\"),\n    BufferLayout.u8(\"can_topup\"),\n    BufferLayout.blob(64, \"stream_name\"),\n    BufferLayout.blob(8, \"withdraw_frequency\"),\n    // discriminator for optional field\n    BufferLayout.u8(\"_pausable_discriminator\"),\n    BufferLayout.u8(\"pausable\"),\n    // discriminator for optional field\n    BufferLayout.u8(\"_can_update_rate_discriminator\"),\n    BufferLayout.u8(\"can_update_rate\"),\n]);\n/**\n * Create unchecked stream instruction layout\n */\nexport const createUncheckedStreamLayout = BufferLayout.struct([\n    BufferLayout.blob(8, \"start_time\"),\n    BufferLayout.blob(8, \"net_amount_deposited\"),\n    BufferLayout.blob(8, \"period\"),\n    BufferLayout.blob(8, \"amount_per_period\"),\n    BufferLayout.blob(8, \"cliff\"),\n    BufferLayout.blob(8, \"cliff_amount\"),\n    BufferLayout.u8(\"cancelable_by_sender\"),\n    BufferLayout.u8(\"cancelable_by_recipient\"),\n    BufferLayout.u8(\"automatic_withdrawal\"),\n    BufferLayout.u8(\"transferable_by_sender\"),\n    BufferLayout.u8(\"transferable_by_recipient\"),\n    BufferLayout.u8(\"can_topup\"),\n    BufferLayout.blob(64, \"stream_name\"),\n    BufferLayout.blob(8, \"withdraw_frequency\"),\n    BufferLayout.blob(32, \"recipient\"),\n    BufferLayout.blob(32, \"partner\"),\n    BufferLayout.u8(\"pausable\"),\n    BufferLayout.u8(\"can_update_rate\"),\n]);\n/**\n * Withdraw stream instruction layout\n */\nexport const withdrawStreamLayout = BufferLayout.struct([\n    BufferLayout.blob(8, \"amount\"),\n]);\n/**\n * Encode stream instruction layout\n */\nexport const encodeUpdateStream = (values, data) => {\n    const structs = [];\n    if (values.enable_automatic_withdrawal) {\n        structs.push(BufferLayout.u8(\"enable_automatic_withdrawal_exists\"));\n        structs.push(BufferLayout.u8(\"enable_automatic_withdrawal\"));\n    }\n    else {\n        structs.push(BufferLayout.u8(\"enable_automatic_withdrawal_exists\"));\n    }\n    if (values.withdraw_frequency) {\n        structs.push(BufferLayout.u8(\"withdraw_frequency_exists\"));\n        structs.push(BufferLayout.blob(8, \"withdraw_frequency\"));\n    }\n    else {\n        structs.push(BufferLayout.u8(\"withdraw_frequency_exists\"));\n    }\n    if (values.amount_per_period) {\n        structs.push(BufferLayout.u8(\"amount_per_period_exists\"));\n        structs.push(BufferLayout.blob(8, \"amount_per_period\"));\n    }\n    else {\n        structs.push(BufferLayout.u8(\"amount_per_period_exists\"));\n    }\n    return BufferLayout.struct(structs).encode({\n        enable_automatic_withdrawal_exists: values.enable_automatic_withdrawal ? 1 : 0,\n        enable_automatic_withdrawal: values.enable_automatic_withdrawal ?? 0,\n        withdraw_frequency_exists: values.withdraw_frequency ? 1 : 0,\n        withdraw_frequency: values.withdraw_frequency ?? 0,\n        amount_per_period_exists: values.amount_per_period ? 1 : 0,\n        amount_per_period: values.amount_per_period ?? 0,\n    }, data);\n};\n/**\n * Topup stream instruction layout\n */\nexport const topupStreamLayout = BufferLayout.struct([\n    BufferLayout.blob(8, \"amount\"),\n]);\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 708, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 714, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/solana/lib/utils.js"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { executeTransaction, isSignerKeypair, isSignerWallet, } from \"@streamflow/common/solana\";\nimport BN from \"bn.js\";\nimport { streamLayout } from \"../layout.js\";\nimport { SOLANA_ERROR_MAP, SOLANA_ERROR_MATCH_REGEX } from \"../constants.js\";\nconst decoder = new TextDecoder(\"utf-8\");\nconst LE = \"le\"; //little endian\nexport const decodeStream = (buf) => {\n    const raw = streamLayout.decode(buf);\n    return {\n        magic: new BN(raw.magic, LE),\n        version: new BN(raw.version, LE),\n        createdAt: new BN(raw.created_at, LE),\n        withdrawnAmount: new BN(raw.withdrawn_amount, LE),\n        canceledAt: new BN(raw.canceled_at, LE),\n        end: new BN(raw.end_time, LE),\n        lastWithdrawnAt: new BN(raw.last_withdrawn_at, LE),\n        sender: new PublicKey(raw.sender),\n        senderTokens: new PublicKey(raw.sender_tokens),\n        recipient: new PublicKey(raw.recipient),\n        recipientTokens: new PublicKey(raw.recipient_tokens),\n        mint: new PublicKey(raw.mint),\n        escrowTokens: new PublicKey(raw.escrow_tokens),\n        streamflowTreasury: new PublicKey(raw.streamflow_treasury),\n        streamflowTreasuryTokens: new PublicKey(raw.streamflow_treasury_tokens),\n        streamflowFeeTotal: new BN(raw.streamflow_fee_total, LE),\n        streamflowFeeWithdrawn: new BN(raw.streamflow_fee_withdrawn, LE),\n        streamflowFeePercent: new BN(raw.streamflow_fee_percent, LE),\n        partnerFeeTotal: new BN(raw.partner_fee_total, LE),\n        partnerFeeWithdrawn: new BN(raw.partner_fee_withdrawn, LE),\n        partnerFeePercent: new BN(raw.partner_fee_percent, LE),\n        partner: new PublicKey(raw.partner),\n        partnerTokens: new PublicKey(raw.partner_tokens),\n        start: new BN(raw.start_time, LE),\n        depositedAmount: new BN(raw.net_amount_deposited, LE),\n        period: new BN(raw.period, LE),\n        amountPerPeriod: new BN(raw.amount_per_period, LE),\n        cliff: new BN(raw.cliff, LE),\n        cliffAmount: new BN(raw.cliff_amount, LE),\n        cancelableBySender: Boolean(raw.cancelable_by_sender),\n        cancelableByRecipient: Boolean(raw.cancelable_by_recipient),\n        automaticWithdrawal: Boolean(raw.automatic_withdrawal),\n        transferableBySender: Boolean(raw.transferable_by_sender),\n        transferableByRecipient: Boolean(raw.transferable_by_recipient),\n        canTopup: Boolean(raw.can_topup),\n        name: decoder.decode(raw.stream_name),\n        withdrawFrequency: new BN(raw.withdraw_frequency, LE),\n        closed: Boolean(raw.closed),\n        currentPauseStart: new BN(raw.current_pause_start, LE),\n        pauseCumulative: new BN(raw.pause_cumulative, LE),\n        lastRateChangeTime: new BN(raw.last_rate_change_time, LE),\n        fundsUnlockedAtLastRateChange: new BN(raw.funds_unlocked_at_last_rate_change, LE),\n    };\n};\n/**\n * Sign passed BatchItems with wallet request or KeyPair\n * @param {Keypair | SignerWalletAdapter} sender - Wallet or Keypair of sendin account\n * @param {BatchItem[]} items - Multiple recipient contracts split into separate items\n * @return {BatchItem[]} - Returns items with signatures.\n */\nexport async function signAllTransactionWithRecipients(sender, items) {\n    const isKeypair = isSignerKeypair(sender);\n    const isWallet = isSignerWallet(sender);\n    if (isKeypair) {\n        return items.map((t) => {\n            t.tx.sign([sender]);\n            return { tx: t.tx, recipient: t.recipient };\n        });\n    }\n    else if (isWallet) {\n        const signedTxs = await sender.signAllTransactions(items.map((t) => t.tx));\n        return items.map((item, index) => ({\n            ...item,\n            tx: signedTxs[index],\n        }));\n    }\n    else {\n        // If signer is not passed\n        return [];\n    }\n}\n/**\n * Sign passed BatchItems with wallet request or KeyPair\n * @param {Connection} connection - Solana web3 connection object.\n * @param {BatchItem} batchItem - Signed transaction ready to be send.\n * @param confirmationParams - Confirmation Params that will be used for execution\n * @param throttleParams - rate or throttler instance to throttle TX sending - to not spam the blockchain too much\n * @return {Promise<BatchItemResult>} - Returns settled transaction item\n */\nexport async function sendAndConfirmStreamRawTransaction(connection, batchItem, confirmationParams, throttleParams) {\n    try {\n        const completedTxSignature = await executeTransaction(connection, batchItem.tx, confirmationParams, throttleParams);\n        return { ...batchItem, signature: completedTxSignature };\n    }\n    catch (error) {\n        throw {\n            recipient: batchItem.recipient,\n            error,\n        };\n    }\n}\nexport function extractSolanaErrorCode(errorText, logs) {\n    let match = SOLANA_ERROR_MATCH_REGEX.exec(errorText);\n    if (!match && logs) {\n        for (const logLine of logs) {\n            match = SOLANA_ERROR_MATCH_REGEX.exec(logLine);\n            if (match !== null) {\n                break;\n            }\n        }\n    }\n    if (!match) {\n        return null;\n    }\n    const errorCode = Number(match[1]);\n    return SOLANA_ERROR_MAP[errorCode] || null;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 834, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 840, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/solana/instructions.js"],"sourcesContent":["import { Buffer } from \"buffer\";\nimport { TransactionInstruction } from \"@solana/web3.js\";\nimport * as Layout from \"./layout.js\";\nconst sha256 = {\n    digest: async (data) => {\n        const dataBuffer = new TextEncoder().encode(data);\n        const hashBuffer = await globalThis.crypto.subtle.digest(\"SHA-256\", dataBuffer);\n        return new Uint8Array(hashBuffer);\n    },\n};\nexport const createStreamInstruction = async (data, programId, accounts) => {\n    const keys = [\n        { pubkey: accounts.sender, isSigner: true, isWritable: true },\n        { pubkey: accounts.senderTokens, isSigner: false, isWritable: true },\n        { pubkey: accounts.recipient, isSigner: false, isWritable: true },\n        { pubkey: accounts.metadata, isSigner: true, isWritable: true },\n        { pubkey: accounts.escrowTokens, isSigner: false, isWritable: true },\n        { pubkey: accounts.recipientTokens, isSigner: false, isWritable: true },\n        {\n            pubkey: accounts.streamflowTreasury,\n            isSigner: false,\n            isWritable: true,\n        },\n        {\n            pubkey: accounts.streamflowTreasuryTokens,\n            isSigner: false,\n            isWritable: true,\n        },\n        { pubkey: accounts.withdrawor, isSigner: false, isWritable: true },\n        { pubkey: accounts.partner, isSigner: false, isWritable: true },\n        { pubkey: accounts.partnerTokens, isSigner: false, isWritable: true },\n        { pubkey: accounts.mint, isSigner: false, isWritable: false },\n        { pubkey: accounts.feeOracle, isSigner: false, isWritable: false },\n        { pubkey: accounts.rent, isSigner: false, isWritable: false },\n        { pubkey: accounts.timelockProgram, isSigner: false, isWritable: false },\n        { pubkey: accounts.tokenProgram, isSigner: false, isWritable: false },\n        {\n            pubkey: accounts.associatedTokenProgram,\n            isSigner: false,\n            isWritable: false,\n        },\n        { pubkey: accounts.systemProgram, isSigner: false, isWritable: false },\n    ];\n    let bufferData = Buffer.alloc(Layout.createStreamLayout.span);\n    const encodedUIntArray = new TextEncoder().encode(data.name);\n    const streamNameBuffer = Buffer.alloc(64).fill(encodedUIntArray, 0, encodedUIntArray.byteLength);\n    const decodedData = {\n        start_time: data.start.toArrayLike(Buffer, \"le\", 8),\n        net_amount_deposited: data.depositedAmount.toArrayLike(Buffer, \"le\", 8),\n        period: data.period.toArrayLike(Buffer, \"le\", 8),\n        amount_per_period: data.amountPerPeriod.toArrayLike(Buffer, \"le\", 8),\n        cliff: data.cliff.toArrayLike(Buffer, \"le\", 8),\n        cliff_amount: data.cliffAmount.toArrayLike(Buffer, \"le\", 8),\n        cancelable_by_sender: Number(data.cancelableBySender),\n        cancelable_by_recipient: Number(data.cancelableByRecipient),\n        automatic_withdrawal: Number(data.automaticWithdrawal),\n        transferable_by_sender: Number(data.transferableBySender),\n        transferable_by_recipient: Number(data.transferableByRecipient),\n        can_topup: Number(data.canTopup),\n        _pausable_discriminator: 1,\n        can_update_rate: Number(data.canUpdateRate),\n        _can_update_rate_discriminator: 1,\n        pausable: Number(data.canPause),\n        stream_name: streamNameBuffer,\n        withdraw_frequency: data.withdrawFrequency.toArrayLike(Buffer, \"le\", 8),\n    };\n    const encodeLength = Layout.createStreamLayout.encode(decodedData, bufferData);\n    bufferData = bufferData.slice(0, encodeLength);\n    bufferData = Buffer.concat([\n        Buffer.from(await sha256.digest(\"global:create\")).slice(0, 8),\n        bufferData,\n        Buffer.alloc(10),\n    ]);\n    return new TransactionInstruction({\n        keys,\n        programId,\n        data: bufferData,\n    });\n};\nexport const createUncheckedStreamInstruction = async (data, programId, accounts) => {\n    const keys = [\n        { pubkey: accounts.sender, isSigner: true, isWritable: true },\n        { pubkey: accounts.senderTokens, isSigner: false, isWritable: true },\n        { pubkey: accounts.metadata, isSigner: false, isWritable: true },\n        { pubkey: accounts.escrowTokens, isSigner: false, isWritable: true },\n        { pubkey: accounts.withdrawor, isSigner: false, isWritable: true },\n        { pubkey: accounts.mint, isSigner: false, isWritable: false },\n        { pubkey: accounts.feeOracle, isSigner: false, isWritable: false },\n        { pubkey: accounts.rent, isSigner: false, isWritable: false },\n        { pubkey: accounts.timelockProgram, isSigner: false, isWritable: false },\n        { pubkey: accounts.tokenProgram, isSigner: false, isWritable: false },\n        { pubkey: accounts.systemProgram, isSigner: false, isWritable: false },\n    ];\n    if (accounts.payer) {\n        keys.unshift({\n            pubkey: accounts.payer,\n            isSigner: true,\n            isWritable: true,\n        });\n    }\n    let bufferData = Buffer.alloc(Layout.createUncheckedStreamLayout.span);\n    const encodedUIntArray = new TextEncoder().encode(data.name);\n    const streamNameBuffer = Buffer.alloc(64).fill(encodedUIntArray, 0, encodedUIntArray.byteLength);\n    const decodedData = {\n        start_time: data.start.toArrayLike(Buffer, \"le\", 8),\n        net_amount_deposited: data.depositedAmount.toArrayLike(Buffer, \"le\", 8),\n        period: data.period.toArrayLike(Buffer, \"le\", 8),\n        amount_per_period: data.amountPerPeriod.toArrayLike(Buffer, \"le\", 8),\n        cliff: data.cliff.toArrayLike(Buffer, \"le\", 8),\n        cliff_amount: data.cliffAmount.toArrayLike(Buffer, \"le\", 8),\n        cancelable_by_sender: Number(data.cancelableBySender),\n        cancelable_by_recipient: Number(data.cancelableByRecipient),\n        automatic_withdrawal: Number(data.automaticWithdrawal),\n        transferable_by_sender: Number(data.transferableBySender),\n        transferable_by_recipient: Number(data.transferableByRecipient),\n        can_topup: Number(data.canTopup),\n        stream_name: streamNameBuffer,\n        withdraw_frequency: data.withdrawFrequency.toArrayLike(Buffer, \"le\", 8),\n        recipient: data.recipient.toBuffer(),\n        partner: data.partner.toBuffer(),\n        pausable: Number(data.canPause),\n        can_update_rate: Number(data.canUpdateRate),\n    };\n    const encodeLength = Layout.createUncheckedStreamLayout.encode(decodedData, bufferData);\n    bufferData = bufferData.slice(0, encodeLength);\n    const digest = accounts.payer\n        ? await sha256.digest(\"global:create_unchecked_with_payer\")\n        : await sha256.digest(\"global:create_unchecked\");\n    bufferData = Buffer.concat([Buffer.from(digest).slice(0, 8), bufferData, Buffer.alloc(10)]);\n    return new TransactionInstruction({\n        keys,\n        programId,\n        data: bufferData,\n    });\n};\nexport const withdrawStreamInstruction = async (amount, programId, { authority, recipient, recipientTokens, metadata, escrowTokens, streamflowTreasury, streamflowTreasuryTokens, partner, partnerTokens, mint, tokenProgram, }) => {\n    const keys = [\n        { pubkey: authority, isSigner: true, isWritable: true },\n        { pubkey: recipient, isSigner: false, isWritable: true },\n        { pubkey: recipientTokens, isSigner: false, isWritable: true },\n        { pubkey: metadata, isSigner: false, isWritable: true },\n        { pubkey: escrowTokens, isSigner: false, isWritable: true },\n        {\n            pubkey: streamflowTreasury,\n            isSigner: false,\n            isWritable: true,\n        },\n        { pubkey: streamflowTreasuryTokens, isSigner: false, isWritable: true },\n        { pubkey: partner, isSigner: false, isWritable: true },\n        { pubkey: partnerTokens, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: tokenProgram, isSigner: false, isWritable: false },\n    ];\n    let data = Buffer.alloc(Layout.withdrawStreamLayout.span);\n    const decodedData = { amount: amount.toArrayLike(Buffer, \"le\", 8) };\n    const encodeLength = Layout.withdrawStreamLayout.encode(decodedData, data);\n    data = data.slice(0, encodeLength);\n    data = Buffer.concat([Buffer.from(await sha256.digest(\"global:withdraw\")).slice(0, 8), data, Buffer.alloc(10)]);\n    return new TransactionInstruction({\n        keys,\n        programId,\n        data,\n    });\n};\nexport const updateStreamInstruction = async (params, programId, { authority, metadata, withdrawor, systemProgram }) => {\n    const keys = [\n        { pubkey: authority, isSigner: true, isWritable: true },\n        { pubkey: metadata, isSigner: false, isWritable: true },\n        { pubkey: withdrawor, isSigner: false, isWritable: true },\n        { pubkey: systemProgram, isSigner: false, isWritable: false },\n    ];\n    let data = Buffer.alloc(100);\n    const decodedData = {\n        enable_automatic_withdrawal: Number(params.enableAutomaticWithdrawal),\n        withdraw_frequency: params.withdrawFrequency ? params.withdrawFrequency.toArrayLike(Buffer, \"le\", 8) : undefined,\n        amount_per_period: params.amountPerPeriod ? params.amountPerPeriod.toArrayLike(Buffer, \"le\", 8) : undefined,\n    };\n    const encodeLength = Layout.encodeUpdateStream(decodedData, data);\n    data = data.slice(0, encodeLength);\n    data = Buffer.concat([Buffer.from(await sha256.digest(\"global:update\")).slice(0, 8), data, Buffer.alloc(20)]);\n    return new TransactionInstruction({\n        keys: keys,\n        programId: programId,\n        data: data,\n    });\n};\nexport const cancelStreamInstruction = async (programId, { authority, sender, senderTokens, recipient, recipientTokens, metadata, escrowTokens, streamflowTreasury, streamflowTreasuryTokens, partner, partnerTokens, mint, tokenProgram, }) => {\n    const keys = [\n        { pubkey: authority, isSigner: true, isWritable: false },\n        { pubkey: sender, isSigner: false, isWritable: true },\n        { pubkey: senderTokens, isSigner: false, isWritable: true },\n        { pubkey: recipient, isSigner: false, isWritable: true },\n        { pubkey: recipientTokens, isSigner: false, isWritable: true },\n        { pubkey: metadata, isSigner: false, isWritable: true },\n        { pubkey: escrowTokens, isSigner: false, isWritable: true },\n        {\n            pubkey: streamflowTreasury,\n            isSigner: false,\n            isWritable: true,\n        },\n        { pubkey: streamflowTreasuryTokens, isSigner: false, isWritable: true },\n        { pubkey: partner, isSigner: false, isWritable: true },\n        { pubkey: partnerTokens, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: tokenProgram, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.concat([Buffer.from(await sha256.digest(\"global:cancel\")).slice(0, 8), Buffer.alloc(10)]);\n    return new TransactionInstruction({\n        keys,\n        programId,\n        data,\n    });\n};\nexport const transferStreamInstruction = async (programId, { authority, newRecipient, newRecipientTokens, metadata, mint, rent, tokenProgram, associatedTokenProgram, systemProgram, }) => {\n    const keys = [\n        { pubkey: authority, isSigner: true, isWritable: true },\n        { pubkey: newRecipient, isSigner: false, isWritable: true },\n        { pubkey: newRecipientTokens, isSigner: false, isWritable: true },\n        { pubkey: metadata, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: rent, isSigner: false, isWritable: false },\n        { pubkey: tokenProgram, isSigner: false, isWritable: false },\n        { pubkey: associatedTokenProgram, isSigner: false, isWritable: false },\n        { pubkey: systemProgram, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.concat([\n        Buffer.from(await sha256.digest(\"global:transfer_recipient\")).slice(0, 8),\n        Buffer.alloc(10),\n    ]);\n    return new TransactionInstruction({\n        keys,\n        programId,\n        data,\n    });\n};\nexport const topupStreamInstruction = async (amount, programId, { sender, senderTokens, metadata, escrowTokens, streamflowTreasury, streamflowTreasuryTokens, partner, partnerTokens, mint, tokenProgram, withdrawor, systemProgram, }) => {\n    const keys = [\n        { pubkey: sender, isSigner: true, isWritable: true },\n        { pubkey: senderTokens, isSigner: false, isWritable: true },\n        { pubkey: metadata, isSigner: false, isWritable: true },\n        { pubkey: escrowTokens, isSigner: false, isWritable: true },\n        {\n            pubkey: streamflowTreasury,\n            isSigner: false,\n            isWritable: true,\n        },\n        { pubkey: streamflowTreasuryTokens, isSigner: false, isWritable: true },\n        { pubkey: withdrawor, isSigner: false, isWritable: true },\n        { pubkey: partner, isSigner: false, isWritable: true },\n        { pubkey: partnerTokens, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: tokenProgram, isSigner: false, isWritable: false },\n        { pubkey: systemProgram, isSigner: false, isWritable: false },\n    ];\n    let data = Buffer.alloc(Layout.topupStreamLayout.span);\n    const decodedData = { amount: amount.toArrayLike(Buffer, \"le\", 8) };\n    const encodeLength = Layout.topupStreamLayout.encode(decodedData, data);\n    data = data.slice(0, encodeLength);\n    data = Buffer.concat([Buffer.from(await sha256.digest(\"global:topup\")).slice(0, 8), data, Buffer.alloc(10)]);\n    return new TransactionInstruction({\n        keys,\n        programId,\n        data,\n    });\n};\n"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;;;;AACA,MAAM,SAAS;IACX,QAAQ,OAAO;QACX,MAAM,aAAa,IAAI,cAAc,MAAM,CAAC;QAC5C,MAAM,aAAa,MAAM,WAAW,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW;QACpE,OAAO,IAAI,WAAW;IAC1B;AACJ;AACO,MAAM,0BAA0B,OAAO,MAAM,WAAW;IAC3D,MAAM,OAAO;QACT;YAAE,QAAQ,SAAS,MAAM;YAAE,UAAU;YAAM,YAAY;QAAK;QAC5D;YAAE,QAAQ,SAAS,YAAY;YAAE,UAAU;YAAO,YAAY;QAAK;QACnE;YAAE,QAAQ,SAAS,SAAS;YAAE,UAAU;YAAO,YAAY;QAAK;QAChE;YAAE,QAAQ,SAAS,QAAQ;YAAE,UAAU;YAAM,YAAY;QAAK;QAC9D;YAAE,QAAQ,SAAS,YAAY;YAAE,UAAU;YAAO,YAAY;QAAK;QACnE;YAAE,QAAQ,SAAS,eAAe;YAAE,UAAU;YAAO,YAAY;QAAK;QACtE;YACI,QAAQ,SAAS,kBAAkB;YACnC,UAAU;YACV,YAAY;QAChB;QACA;YACI,QAAQ,SAAS,wBAAwB;YACzC,UAAU;YACV,YAAY;QAChB;QACA;YAAE,QAAQ,SAAS,UAAU;YAAE,UAAU;YAAO,YAAY;QAAK;QACjE;YAAE,QAAQ,SAAS,OAAO;YAAE,UAAU;YAAO,YAAY;QAAK;QAC9D;YAAE,QAAQ,SAAS,aAAa;YAAE,UAAU;YAAO,YAAY;QAAK;QACpE;YAAE,QAAQ,SAAS,IAAI;YAAE,UAAU;YAAO,YAAY;QAAM;QAC5D;YAAE,QAAQ,SAAS,SAAS;YAAE,UAAU;YAAO,YAAY;QAAM;QACjE;YAAE,QAAQ,SAAS,IAAI;YAAE,UAAU;YAAO,YAAY;QAAM;QAC5D;YAAE,QAAQ,SAAS,eAAe;YAAE,UAAU;YAAO,YAAY;QAAM;QACvE;YAAE,QAAQ,SAAS,YAAY;YAAE,UAAU;YAAO,YAAY;QAAM;QACpE;YACI,QAAQ,SAAS,sBAAsB;YACvC,UAAU;YACV,YAAY;QAChB;QACA;YAAE,QAAQ,SAAS,aAAa;YAAE,UAAU;YAAO,YAAY;QAAM;KACxE;IACD,IAAI,aAAa,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,0KAAO,kBAAkB,CAAC,IAAI;IAC5D,MAAM,mBAAmB,IAAI,cAAc,MAAM,CAAC,KAAK,IAAI;IAC3D,MAAM,mBAAmB,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,UAAU;IAC/F,MAAM,cAAc;QAChB,YAAY,KAAK,KAAK,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QACjD,sBAAsB,KAAK,eAAe,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QACrE,QAAQ,KAAK,MAAM,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QAC9C,mBAAmB,KAAK,eAAe,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QAClE,OAAO,KAAK,KAAK,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QAC5C,cAAc,KAAK,WAAW,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QACzD,sBAAsB,OAAO,KAAK,kBAAkB;QACpD,yBAAyB,OAAO,KAAK,qBAAqB;QAC1D,sBAAsB,OAAO,KAAK,mBAAmB;QACrD,wBAAwB,OAAO,KAAK,oBAAoB;QACxD,2BAA2B,OAAO,KAAK,uBAAuB;QAC9D,WAAW,OAAO,KAAK,QAAQ;QAC/B,yBAAyB;QACzB,iBAAiB,OAAO,KAAK,aAAa;QAC1C,gCAAgC;QAChC,UAAU,OAAO,KAAK,QAAQ;QAC9B,aAAa;QACb,oBAAoB,KAAK,iBAAiB,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;IACzE;IACA,MAAM,eAAe,0KAAO,kBAAkB,CAAC,MAAM,CAAC,aAAa;IACnE,aAAa,WAAW,KAAK,CAAC,GAAG;IACjC,aAAa,qGAAA,CAAA,SAAM,CAAC,MAAM,CAAC;QACvB,qGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,OAAO,MAAM,CAAC,kBAAkB,KAAK,CAAC,GAAG;QAC3D;QACA,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC;KAChB;IACD,OAAO,IAAI,uMAAA,CAAA,yBAAsB,CAAC;QAC9B;QACA;QACA,MAAM;IACV;AACJ;AACO,MAAM,mCAAmC,OAAO,MAAM,WAAW;IACpE,MAAM,OAAO;QACT;YAAE,QAAQ,SAAS,MAAM;YAAE,UAAU;YAAM,YAAY;QAAK;QAC5D;YAAE,QAAQ,SAAS,YAAY;YAAE,UAAU;YAAO,YAAY;QAAK;QACnE;YAAE,QAAQ,SAAS,QAAQ;YAAE,UAAU;YAAO,YAAY;QAAK;QAC/D;YAAE,QAAQ,SAAS,YAAY;YAAE,UAAU;YAAO,YAAY;QAAK;QACnE;YAAE,QAAQ,SAAS,UAAU;YAAE,UAAU;YAAO,YAAY;QAAK;QACjE;YAAE,QAAQ,SAAS,IAAI;YAAE,UAAU;YAAO,YAAY;QAAM;QAC5D;YAAE,QAAQ,SAAS,SAAS;YAAE,UAAU;YAAO,YAAY;QAAM;QACjE;YAAE,QAAQ,SAAS,IAAI;YAAE,UAAU;YAAO,YAAY;QAAM;QAC5D;YAAE,QAAQ,SAAS,eAAe;YAAE,UAAU;YAAO,YAAY;QAAM;QACvE;YAAE,QAAQ,SAAS,YAAY;YAAE,UAAU;YAAO,YAAY;QAAM;QACpE;YAAE,QAAQ,SAAS,aAAa;YAAE,UAAU;YAAO,YAAY;QAAM;KACxE;IACD,IAAI,SAAS,KAAK,EAAE;QAChB,KAAK,OAAO,CAAC;YACT,QAAQ,SAAS,KAAK;YACtB,UAAU;YACV,YAAY;QAChB;IACJ;IACA,IAAI,aAAa,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,0KAAO,2BAA2B,CAAC,IAAI;IACrE,MAAM,mBAAmB,IAAI,cAAc,MAAM,CAAC,KAAK,IAAI;IAC3D,MAAM,mBAAmB,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,UAAU;IAC/F,MAAM,cAAc;QAChB,YAAY,KAAK,KAAK,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QACjD,sBAAsB,KAAK,eAAe,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QACrE,QAAQ,KAAK,MAAM,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QAC9C,mBAAmB,KAAK,eAAe,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QAClE,OAAO,KAAK,KAAK,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QAC5C,cAAc,KAAK,WAAW,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QACzD,sBAAsB,OAAO,KAAK,kBAAkB;QACpD,yBAAyB,OAAO,KAAK,qBAAqB;QAC1D,sBAAsB,OAAO,KAAK,mBAAmB;QACrD,wBAAwB,OAAO,KAAK,oBAAoB;QACxD,2BAA2B,OAAO,KAAK,uBAAuB;QAC9D,WAAW,OAAO,KAAK,QAAQ;QAC/B,aAAa;QACb,oBAAoB,KAAK,iBAAiB,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;QACrE,WAAW,KAAK,SAAS,CAAC,QAAQ;QAClC,SAAS,KAAK,OAAO,CAAC,QAAQ;QAC9B,UAAU,OAAO,KAAK,QAAQ;QAC9B,iBAAiB,OAAO,KAAK,aAAa;IAC9C;IACA,MAAM,eAAe,0KAAO,2BAA2B,CAAC,MAAM,CAAC,aAAa;IAC5E,aAAa,WAAW,KAAK,CAAC,GAAG;IACjC,MAAM,SAAS,SAAS,KAAK,GACvB,MAAM,OAAO,MAAM,CAAC,wCACpB,MAAM,OAAO,MAAM,CAAC;IAC1B,aAAa,qGAAA,CAAA,SAAM,CAAC,MAAM,CAAC;QAAC,qGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ,KAAK,CAAC,GAAG;QAAI;QAAY,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC;KAAI;IAC1F,OAAO,IAAI,uMAAA,CAAA,yBAAsB,CAAC;QAC9B;QACA;QACA,MAAM;IACV;AACJ;AACO,MAAM,4BAA4B,OAAO,QAAQ,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,EAAE,QAAQ,EAAE,YAAY,EAAE,kBAAkB,EAAE,wBAAwB,EAAE,OAAO,EAAE,aAAa,EAAE,IAAI,EAAE,YAAY,EAAG;IAC3N,MAAM,OAAO;QACT;YAAE,QAAQ;YAAW,UAAU;YAAM,YAAY;QAAK;QACtD;YAAE,QAAQ;YAAW,UAAU;YAAO,YAAY;QAAK;QACvD;YAAE,QAAQ;YAAiB,UAAU;YAAO,YAAY;QAAK;QAC7D;YAAE,QAAQ;YAAU,UAAU;YAAO,YAAY;QAAK;QACtD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAK;QAC1D;YACI,QAAQ;YACR,UAAU;YACV,YAAY;QAChB;QACA;YAAE,QAAQ;YAA0B,UAAU;YAAO,YAAY;QAAK;QACtE;YAAE,QAAQ;YAAS,UAAU;YAAO,YAAY;QAAK;QACrD;YAAE,QAAQ;YAAe,UAAU;YAAO,YAAY;QAAK;QAC3D;YAAE,QAAQ;YAAM,UAAU;YAAO,YAAY;QAAK;QAClD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAM;KAC9D;IACD,IAAI,OAAO,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,0KAAO,oBAAoB,CAAC,IAAI;IACxD,MAAM,cAAc;QAAE,QAAQ,OAAO,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;IAAG;IAClE,MAAM,eAAe,0KAAO,oBAAoB,CAAC,MAAM,CAAC,aAAa;IACrE,OAAO,KAAK,KAAK,CAAC,GAAG;IACrB,OAAO,qGAAA,CAAA,SAAM,CAAC,MAAM,CAAC;QAAC,qGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,OAAO,MAAM,CAAC,oBAAoB,KAAK,CAAC,GAAG;QAAI;QAAM,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC;KAAI;IAC9G,OAAO,IAAI,uMAAA,CAAA,yBAAsB,CAAC;QAC9B;QACA;QACA;IACJ;AACJ;AACO,MAAM,0BAA0B,OAAO,QAAQ,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,EAAE;IAC/G,MAAM,OAAO;QACT;YAAE,QAAQ;YAAW,UAAU;YAAM,YAAY;QAAK;QACtD;YAAE,QAAQ;YAAU,UAAU;YAAO,YAAY;QAAK;QACtD;YAAE,QAAQ;YAAY,UAAU;YAAO,YAAY;QAAK;QACxD;YAAE,QAAQ;YAAe,UAAU;YAAO,YAAY;QAAM;KAC/D;IACD,IAAI,OAAO,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC;IACxB,MAAM,cAAc;QAChB,6BAA6B,OAAO,OAAO,yBAAyB;QACpE,oBAAoB,OAAO,iBAAiB,GAAG,OAAO,iBAAiB,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM,KAAK;QACvG,mBAAmB,OAAO,eAAe,GAAG,OAAO,eAAe,CAAC,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM,KAAK;IACtG;IACA,MAAM,eAAe,0KAAO,kBAAkB,CAAC,aAAa;IAC5D,OAAO,KAAK,KAAK,CAAC,GAAG;IACrB,OAAO,qGAAA,CAAA,SAAM,CAAC,MAAM,CAAC;QAAC,qGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,OAAO,MAAM,CAAC,kBAAkB,KAAK,CAAC,GAAG;QAAI;QAAM,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC;KAAI;IAC5G,OAAO,IAAI,uMAAA,CAAA,yBAAsB,CAAC;QAC9B,MAAM;QACN,WAAW;QACX,MAAM;IACV;AACJ;AACO,MAAM,0BAA0B,OAAO,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,eAAe,EAAE,QAAQ,EAAE,YAAY,EAAE,kBAAkB,EAAE,wBAAwB,EAAE,OAAO,EAAE,aAAa,EAAE,IAAI,EAAE,YAAY,EAAG;IACvO,MAAM,OAAO;QACT;YAAE,QAAQ;YAAW,UAAU;YAAM,YAAY;QAAM;QACvD;YAAE,QAAQ;YAAQ,UAAU;YAAO,YAAY;QAAK;QACpD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAK;QAC1D;YAAE,QAAQ;YAAW,UAAU;YAAO,YAAY;QAAK;QACvD;YAAE,QAAQ;YAAiB,UAAU;YAAO,YAAY;QAAK;QAC7D;YAAE,QAAQ;YAAU,UAAU;YAAO,YAAY;QAAK;QACtD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAK;QAC1D;YACI,QAAQ;YACR,UAAU;YACV,YAAY;QAChB;QACA;YAAE,QAAQ;YAA0B,UAAU;YAAO,YAAY;QAAK;QACtE;YAAE,QAAQ;YAAS,UAAU;YAAO,YAAY;QAAK;QACrD;YAAE,QAAQ;YAAe,UAAU;YAAO,YAAY;QAAK;QAC3D;YAAE,QAAQ;YAAM,UAAU;YAAO,YAAY;QAAK;QAClD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAM;KAC9D;IACD,MAAM,OAAO,qGAAA,CAAA,SAAM,CAAC,MAAM,CAAC;QAAC,qGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,OAAO,MAAM,CAAC,kBAAkB,KAAK,CAAC,GAAG;QAAI,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC;KAAI;IAC5G,OAAO,IAAI,uMAAA,CAAA,yBAAsB,CAAC;QAC9B;QACA;QACA;IACJ;AACJ;AACO,MAAM,4BAA4B,OAAO,WAAW,EAAE,SAAS,EAAE,YAAY,EAAE,kBAAkB,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,sBAAsB,EAAE,aAAa,EAAG;IAClL,MAAM,OAAO;QACT;YAAE,QAAQ;YAAW,UAAU;YAAM,YAAY;QAAK;QACtD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAK;QAC1D;YAAE,QAAQ;YAAoB,UAAU;YAAO,YAAY;QAAK;QAChE;YAAE,QAAQ;YAAU,UAAU;YAAO,YAAY;QAAK;QACtD;YAAE,QAAQ;YAAM,UAAU;YAAO,YAAY;QAAM;QACnD;YAAE,QAAQ;YAAM,UAAU;YAAO,YAAY;QAAM;QACnD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAM;QAC3D;YAAE,QAAQ;YAAwB,UAAU;YAAO,YAAY;QAAM;QACrE;YAAE,QAAQ;YAAe,UAAU;YAAO,YAAY;QAAM;KAC/D;IACD,MAAM,OAAO,qGAAA,CAAA,SAAM,CAAC,MAAM,CAAC;QACvB,qGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,OAAO,MAAM,CAAC,8BAA8B,KAAK,CAAC,GAAG;QACvE,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC;KAChB;IACD,OAAO,IAAI,uMAAA,CAAA,yBAAsB,CAAC;QAC9B;QACA;QACA;IACJ;AACJ;AACO,MAAM,yBAAyB,OAAO,QAAQ,WAAW,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,kBAAkB,EAAE,wBAAwB,EAAE,OAAO,EAAE,aAAa,EAAE,IAAI,EAAE,YAAY,EAAE,UAAU,EAAE,aAAa,EAAG;IAClO,MAAM,OAAO;QACT;YAAE,QAAQ;YAAQ,UAAU;YAAM,YAAY;QAAK;QACnD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAK;QAC1D;YAAE,QAAQ;YAAU,UAAU;YAAO,YAAY;QAAK;QACtD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAK;QAC1D;YACI,QAAQ;YACR,UAAU;YACV,YAAY;QAChB;QACA;YAAE,QAAQ;YAA0B,UAAU;YAAO,YAAY;QAAK;QACtE;YAAE,QAAQ;YAAY,UAAU;YAAO,YAAY;QAAK;QACxD;YAAE,QAAQ;YAAS,UAAU;YAAO,YAAY;QAAK;QACrD;YAAE,QAAQ;YAAe,UAAU;YAAO,YAAY;QAAK;QAC3D;YAAE,QAAQ;YAAM,UAAU;YAAO,YAAY;QAAM;QACnD;YAAE,QAAQ;YAAc,UAAU;YAAO,YAAY;QAAM;QAC3D;YAAE,QAAQ;YAAe,UAAU;YAAO,YAAY;QAAM;KAC/D;IACD,IAAI,OAAO,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,0KAAO,iBAAiB,CAAC,IAAI;IACrD,MAAM,cAAc;QAAE,QAAQ,OAAO,WAAW,CAAC,qGAAA,CAAA,SAAM,EAAE,MAAM;IAAG;IAClE,MAAM,eAAe,0KAAO,iBAAiB,CAAC,MAAM,CAAC,aAAa;IAClE,OAAO,KAAK,KAAK,CAAC,GAAG;IACrB,OAAO,qGAAA,CAAA,SAAM,CAAC,MAAM,CAAC;QAAC,qGAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,OAAO,MAAM,CAAC,iBAAiB,KAAK,CAAC,GAAG;QAAI;QAAM,qGAAA,CAAA,SAAM,CAAC,KAAK,CAAC;KAAI;IAC3G,OAAO,IAAI,uMAAA,CAAA,yBAAsB,CAAC;QAC9B;QACA;QACA;IACJ;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1426, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1432, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/common/BaseStreamClient.js"],"sourcesContent":["export class BaseStreamClient {\n    /**\n     * Returns total fee percent, streamflow fees + partner fees\n     * @param getFeesData structure with address for which we need to derive fee, either sender or partner usually\n     * @param chainSpecificParams additional parameters required by chain client\n     * @returns fee as floating number, so if fee is 0.99%, it will return 0.99\n     */\n    async getTotalFee(getFeesData, chainSpecificParams) {\n        const fees = await this.getFees(getFeesData, chainSpecificParams);\n        if (fees) {\n            return fees.partnerFee + fees.streamflowFee;\n        }\n        return this.getDefaultStreamflowFee(chainSpecificParams);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    extractErrorCode(err) {\n        return null;\n    }\n}\n"],"names":[],"mappings":";;;AAAO,MAAM;IACT;;;;;KAKC,GACD,MAAM,YAAY,WAAW,EAAE,mBAAmB,EAAE;QAChD,MAAM,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa;QAC7C,IAAI,MAAM;YACN,OAAO,KAAK,UAAU,GAAG,KAAK,aAAa;QAC/C;QACA,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACxC;IACA,6DAA6D;IAC7D,iBAAiB,GAAG,EAAE;QAClB,OAAO;IACX;AACJ","ignoreList":[0]}},
    {"offset": {"line": 1453, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1464, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/solana/lib/derive-accounts.js"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { CONTRACT_SEED, ESCROW_SEED, TEST_ORACLE_SEED } from \"../constants.js\";\nexport const deriveContractPDA = (programId, streamMetadata) => {\n    return PublicKey.findProgramAddressSync([CONTRACT_SEED, streamMetadata.toBuffer()], programId)[0];\n};\nexport const deriveEscrowPDA = (programId, streamMetadata) => {\n    return PublicKey.findProgramAddressSync([ESCROW_SEED, streamMetadata.toBuffer()], programId)[0];\n};\nexport const deriveTestOraclePDA = (programId, mint, creator) => {\n    return PublicKey.findProgramAddressSync([TEST_ORACLE_SEED, mint.toBuffer(), creator.toBuffer()], programId)[0];\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AACO,MAAM,oBAAoB,CAAC,WAAW;IACzC,OAAO,uMAAA,CAAA,YAAS,CAAC,sBAAsB,CAAC;QAAC,4KAAA,CAAA,gBAAa;QAAE,eAAe,QAAQ;KAAG,EAAE,UAAU,CAAC,EAAE;AACrG;AACO,MAAM,kBAAkB,CAAC,WAAW;IACvC,OAAO,uMAAA,CAAA,YAAS,CAAC,sBAAsB,CAAC;QAAC,4KAAA,CAAA,cAAW;QAAE,eAAe,QAAQ;KAAG,EAAE,UAAU,CAAC,EAAE;AACnG;AACO,MAAM,sBAAsB,CAAC,WAAW,MAAM;IACjD,OAAO,uMAAA,CAAA,YAAS,CAAC,sBAAsB,CAAC;QAAC,4KAAA,CAAA,mBAAgB;QAAE,KAAK,QAAQ;QAAI,QAAQ,QAAQ;KAAG,EAAE,UAAU,CAAC,EAAE;AAClH","ignoreList":[0]}},
    {"offset": {"line": 1492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1498, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/solana/StreamClient.js"],"sourcesContent":["// Latest version of the SDK that does not use Anchor. It supports raw instructions.\nimport BN from \"bn.js\";\nimport bs58 from \"bs58\";\nimport { Buffer } from \"buffer\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT } from \"@solana/spl-token\";\nimport { Connection, Keypair, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionMessage, VersionedTransaction, } from \"@solana/web3.js\";\nimport { ata, checkOrCreateAtaBatch, signAndExecuteTransaction, getProgramAccounts, prepareWrappedAccount, prepareTransaction, prepareBaseInstructions, getMintAndProgram, executeTransaction, executeMultipleTransactions, buildSendThrottler, getMultipleAccountsInfoBatched, } from \"@streamflow/common/solana\";\nimport * as borsh from \"borsh\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { getBN } from \"@streamflow/common\";\nimport { Contract, AlignedContract, } from \"./types.js\";\nimport { decodeStream, extractSolanaErrorCode, sendAndConfirmStreamRawTransaction, signAllTransactionWithRecipients, } from \"./lib/utils.js\";\nimport { PROGRAM_ID, STREAMFLOW_TREASURY_PUBLIC_KEY, STREAM_STRUCT_OFFSET_RECIPIENT, STREAM_STRUCT_OFFSET_SENDER, TX_FINALITY_CONFIRMED, WITHDRAWOR_PUBLIC_KEY, FEE_ORACLE_PUBLIC_KEY, DEFAULT_STREAMFLOW_FEE, PARTNER_ORACLE_PROGRAM_ID, FEES_METADATA_SEED, PARTNERS_SCHEMA, STREAM_STRUCT_OFFSETS, ORIGINAL_CONTRACT_SENDER_OFFSET, ALIGNED_PRECISION_FACTOR_POW, ALIGNED_COMPUTE_LIMIT, } from \"./constants.js\";\nimport { withdrawStreamInstruction, cancelStreamInstruction, transferStreamInstruction, topupStreamInstruction, createStreamInstruction, createUncheckedStreamInstruction, updateStreamInstruction, } from \"./instructions.js\";\nimport { ICluster, StreamDirection, StreamType, } from \"../common/types.js\";\nimport { BaseStreamClient } from \"../common/BaseStreamClient.js\";\nimport { calculateTotalAmountToDeposit } from \"../common/utils.js\";\nimport { WITHDRAW_AVAILABLE_AMOUNT } from \"../common/constants.js\";\nimport StreamflowAlignedUnlocksIDL from \"./descriptor/idl/streamflow_aligned_unlocks.json\";\nimport { deriveContractPDA, deriveEscrowPDA, deriveTestOraclePDA } from \"./lib/derive-accounts.js\";\nimport { isCreateAlignedStreamData } from \"../common/contractUtils.js\";\nconst METADATA_ACC_SIZE = 1104;\nconst ALIGNED_METADATA_ACC_SIZE = 320;\nexport class SolanaStreamClient extends BaseStreamClient {\n    connection;\n    programId;\n    commitment;\n    alignedProxyProgram;\n    schedulingParams;\n    /**\n     * Create Stream instance\n     */\n    constructor(optionsOrClusterUrl, cluster = ICluster.Mainnet, commitment = \"confirmed\", programId = \"\", sendRate = 1, sendThrottler) {\n        super();\n        if (typeof optionsOrClusterUrl === \"string\") {\n            this.commitment = commitment;\n            this.connection = new Connection(optionsOrClusterUrl, this.commitment);\n            this.programId = programId !== \"\" ? new PublicKey(programId) : new PublicKey(PROGRAM_ID[cluster]);\n            this.schedulingParams = {\n                sendThrottler: sendThrottler ?? buildSendThrottler(sendRate),\n            };\n        }\n        else {\n            const { clusterUrl, cluster = ICluster.Mainnet, commitment = \"confirmed\", programId = \"\", sendScheduler, } = optionsOrClusterUrl;\n            this.commitment = commitment;\n            this.connection = new Connection(clusterUrl, this.commitment);\n            this.programId = programId !== \"\" ? new PublicKey(programId) : new PublicKey(PROGRAM_ID[cluster]);\n            const schedulingOptions = sendScheduler && \"sendRate\" in sendScheduler ? sendScheduler : undefined;\n            const sendThrottler = !sendScheduler\n                ? buildSendThrottler(1)\n                : \"sendRate\" in sendScheduler\n                    ? buildSendThrottler(sendScheduler.sendRate ?? 1, sendScheduler.sendInterval)\n                    : sendScheduler;\n            this.schedulingParams = {\n                ...schedulingOptions,\n                sendThrottler,\n            };\n        }\n        const alignedUnlocksProgram = {\n            ...StreamflowAlignedUnlocksIDL,\n            address: StreamflowAlignedUnlocksIDL.address,\n        };\n        this.alignedProxyProgram = new Program(alignedUnlocksProgram, { connection: this.connection });\n    }\n    getConnection() {\n        return this.connection;\n    }\n    getCommitment() {\n        return typeof this.commitment == \"string\" ? this.commitment : this.commitment.commitment;\n    }\n    getProgramId() {\n        return this.programId.toBase58();\n    }\n    /**\n     * Creates a new stream/vesting contract.\n     * All fees are paid by sender (escrow metadata account rent, escrow token account rent, recipient's associated token account rent, Streamflow's service fee).\n     */\n    async create(data, extParams) {\n        const { partner, amount, tokenProgramId } = data;\n        const { isNative, sender, customInstructions } = extParams;\n        const partnerPublicKey = partner ? new PublicKey(partner) : WITHDRAWOR_PUBLIC_KEY;\n        const mintPublicKey = new PublicKey(data.tokenId);\n        if (!sender.publicKey) {\n            throw new Error(\"Sender's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const ixs = await this.getCreateATAInstructions([STREAMFLOW_TREASURY_PUBLIC_KEY, partnerPublicKey], mintPublicKey, sender, true, tokenProgramId ? new PublicKey(tokenProgramId) : undefined);\n        const { ixs: createIxs, metadata, metadataPubKey } = await this.prepareCreateInstructions(data, extParams);\n        ixs.push(...createIxs);\n        if (isNative) {\n            const totalFee = await this.getTotalFee({\n                address: partnerPublicKey.toString(),\n            });\n            const totalAmount = calculateTotalAmountToDeposit(amount, totalFee);\n            ixs.push(...(await prepareWrappedAccount(this.connection, sender.publicKey, totalAmount)));\n        }\n        await this.applyCustomAfterInstructions(ixs, customInstructions, metadataPubKey);\n        const { tx, hash, context } = await prepareTransaction(this.connection, ixs, sender.publicKey, undefined, metadata);\n        const signature = await signAndExecuteTransaction(this.connection, extParams.sender, tx, {\n            hash,\n            context,\n            commitment: this.getCommitment(),\n        }, this.schedulingParams);\n        return { ixs, txId: signature, metadataId: metadataPubKey.toBase58() };\n    }\n    async prepareCreateInstructions(streamParams, extParams) {\n        const { ixs, metadata, metadataPubKey } = isCreateAlignedStreamData(streamParams)\n            ? await this.prepareCreateAlignedUnlockInstructions(streamParams, extParams)\n            : await this.prepareCreateStreamInstructions(streamParams, extParams);\n        return { ixs, metadata, metadataPubKey };\n    }\n    async prepareCreateAlignedUnlockInstructions(streamParams, extParams) {\n        const { tokenId: mint, start, period, cliff, canTopup, cancelableBySender, cancelableByRecipient, transferableBySender, transferableByRecipient, partner, recipient, cliffAmount, amountPerPeriod, amount: depositedAmount, name: streamName, minPrice, maxPercentage, minPercentage, maxPrice, skipInitial, tickSize, priceOracle, oracleType, tokenProgramId: streamTokenProgramId, } = streamParams;\n        const { isNative, sender, computeLimit, computePrice, metadataPubKeys } = extParams;\n        if (!sender.publicKey) {\n            throw new Error(\"Sender's PublicKey is not available, check passed wallet adapter!\");\n        }\n        if (!priceOracle && oracleType && oracleType !== \"none\") {\n            throw new Error(\"Price oracle is required for the specified oracle type\");\n        }\n        const recipientPublicKey = new PublicKey(recipient);\n        const mintPublicKey = isNative ? NATIVE_MINT : new PublicKey(mint);\n        const metadata = !metadataPubKeys ? Keypair.generate() : undefined;\n        const metadataPubKey = metadata ? metadata.publicKey : metadataPubKeys[0];\n        let tokenProgramId = streamTokenProgramId ? new PublicKey(streamTokenProgramId) : undefined;\n        if (!tokenProgramId) {\n            tokenProgramId = (await getMintAndProgram(this.connection, mintPublicKey)).tokenProgramId;\n        }\n        const partnerPublicKey = partner ? new PublicKey(partner) : WITHDRAWOR_PUBLIC_KEY;\n        const streamflowProgramPublicKey = new PublicKey(this.programId);\n        const escrowPDA = deriveEscrowPDA(streamflowProgramPublicKey, metadataPubKey);\n        const oracle = priceOracle ?? deriveTestOraclePDA(this.alignedProxyProgram.programId, mintPublicKey, sender.publicKey);\n        const ixs = prepareBaseInstructions(this.connection, {\n            computePrice,\n            computeLimit: computeLimit ?? ALIGNED_COMPUTE_LIMIT,\n        });\n        ixs.push(...(await this.getCreateATAInstructions([recipientPublicKey], mintPublicKey, sender, true, tokenProgramId)));\n        const encodedUIntArray = new TextEncoder().encode(streamName);\n        const streamNameArray = Array.from(encodedUIntArray);\n        const createIx = await this.alignedProxyProgram.methods\n            .create({\n            startTime: new BN(start),\n            netAmountDeposited: depositedAmount,\n            period: new BN(period),\n            amountPerPeriod: amountPerPeriod,\n            cliff: new BN(cliff),\n            cliffAmount: cliffAmount,\n            transferableBySender,\n            transferableByRecipient,\n            cancelableByRecipient,\n            cancelableBySender,\n            canTopup,\n            oracleType: (!!oracleType ? { [oracleType]: {} } : { none: {} }),\n            streamName: streamNameArray,\n            minPrice: minPrice instanceof BN ? minPrice : getBN(minPrice, ALIGNED_PRECISION_FACTOR_POW),\n            maxPrice: maxPrice instanceof BN ? maxPrice : getBN(maxPrice, ALIGNED_PRECISION_FACTOR_POW),\n            minPercentage: minPercentage instanceof BN ? minPercentage : getBN(minPercentage, ALIGNED_PRECISION_FACTOR_POW),\n            maxPercentage: maxPercentage instanceof BN ? maxPercentage : getBN(maxPercentage, ALIGNED_PRECISION_FACTOR_POW),\n            tickSize: new BN(tickSize || 1),\n            skipInitial: skipInitial ?? false,\n        })\n            .accountsPartial({\n            payer: sender.publicKey,\n            sender: sender.publicKey,\n            streamMetadata: metadataPubKey,\n            escrowTokens: escrowPDA,\n            mint: mintPublicKey,\n            partner: partnerPublicKey,\n            recipient: recipientPublicKey,\n            withdrawor: WITHDRAWOR_PUBLIC_KEY,\n            feeOracle: FEE_ORACLE_PUBLIC_KEY,\n            priceOracle: oracle,\n            tokenProgram: tokenProgramId,\n            streamflowProgram: this.programId,\n        })\n            .instruction();\n        ixs.push(createIx);\n        return { ixs, metadata, metadataPubKey };\n    }\n    /**\n     * Creates a new stream/vesting contract.\n     * All fees are paid by sender (escrow metadata account rent, escrow token account rent, recipient's associated token account rent, Streamflow's service fee).\n     */\n    async prepareCreateStreamInstructions({ recipient, tokenId: mint, start, amount: depositedAmount, period, cliff, cliffAmount, amountPerPeriod, name, canPause, canUpdateRate, canTopup, cancelableBySender, cancelableByRecipient, transferableBySender, transferableByRecipient, automaticWithdrawal = false, withdrawalFrequency = 0, partner, tokenProgramId: streamTokenProgramId, }, { sender, metadataPubKeys, isNative = false, computePrice, computeLimit }) {\n        if (!sender.publicKey) {\n            throw new Error(\"Sender's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const ixs = prepareBaseInstructions(this.connection, {\n            computePrice,\n            computeLimit,\n        });\n        const mintPublicKey = isNative ? NATIVE_MINT : new PublicKey(mint);\n        const recipientPublicKey = new PublicKey(recipient);\n        const { metadata, metadataPubKey } = this.getOrCreateStreamMetadata(metadataPubKeys);\n        const [escrowTokens] = PublicKey.findProgramAddressSync([Buffer.from(\"strm\"), metadataPubKey.toBuffer()], this.programId);\n        let tokenProgramId = streamTokenProgramId ? new PublicKey(streamTokenProgramId) : undefined;\n        if (!tokenProgramId) {\n            tokenProgramId = (await getMintAndProgram(this.connection, mintPublicKey)).tokenProgramId;\n        }\n        const senderTokens = await ata(mintPublicKey, sender.publicKey, tokenProgramId);\n        const recipientTokens = await ata(mintPublicKey, recipientPublicKey, tokenProgramId);\n        const streamflowTreasuryTokens = await ata(mintPublicKey, STREAMFLOW_TREASURY_PUBLIC_KEY, tokenProgramId);\n        const partnerPublicKey = partner ? new PublicKey(partner) : WITHDRAWOR_PUBLIC_KEY;\n        const partnerTokens = await ata(mintPublicKey, partnerPublicKey, tokenProgramId);\n        ixs.push(await createStreamInstruction({\n            start: new BN(start),\n            depositedAmount,\n            period: new BN(period),\n            amountPerPeriod,\n            cliff: new BN(cliff),\n            cliffAmount: new BN(cliffAmount),\n            cancelableBySender,\n            cancelableByRecipient,\n            automaticWithdrawal,\n            transferableBySender,\n            transferableByRecipient,\n            canTopup,\n            canUpdateRate: !!canUpdateRate,\n            canPause: !!canPause,\n            name,\n            withdrawFrequency: new BN(automaticWithdrawal ? withdrawalFrequency : period),\n        }, this.programId, {\n            sender: sender.publicKey,\n            senderTokens,\n            recipient: new PublicKey(recipient),\n            metadata: metadataPubKey,\n            escrowTokens,\n            recipientTokens,\n            streamflowTreasury: STREAMFLOW_TREASURY_PUBLIC_KEY,\n            streamflowTreasuryTokens: streamflowTreasuryTokens,\n            partner: partnerPublicKey,\n            partnerTokens: partnerTokens,\n            mint: new PublicKey(mint),\n            feeOracle: FEE_ORACLE_PUBLIC_KEY,\n            rent: SYSVAR_RENT_PUBKEY,\n            timelockProgram: this.programId,\n            tokenProgram: tokenProgramId,\n            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n            withdrawor: WITHDRAWOR_PUBLIC_KEY,\n            systemProgram: SystemProgram.programId,\n        }));\n        return { ixs, metadata, metadataPubKey };\n    }\n    /**\n     * Creates a new stream/vesting contract using unchecked instruction.\n     *\n     * Unchecked instruction differs from the regular in:\n     * - does not check for initialized associated token account (wallets with no control over their ATA should not be used\n     * as sender/recipient/partner or there are risks of funds being locked in the contract)\n     * - initialized contract PDA off chain\n     *\n     * If you are not sure if you should use create or create_unchecked, go for create to be safer.\n     */\n    async createUnchecked(data, extParams) {\n        const { ixs, metadata, metadataPubKey } = await this.prepareCreateUncheckedInstructions(data, extParams);\n        const { tx, hash, context } = await prepareTransaction(this.connection, ixs, extParams.sender.publicKey, undefined, metadata);\n        const signature = await signAndExecuteTransaction(this.connection, extParams.sender, tx, {\n            hash,\n            context,\n            commitment: this.getCommitment(),\n        }, this.schedulingParams);\n        return { ixs, txId: signature, metadataId: metadataPubKey.toBase58() };\n    }\n    /**\n     * Create Transaction instructions for `createUnchecked`\n     */\n    async prepareCreateUncheckedInstructions({ recipient, tokenId: mint, start, amount: depositedAmount, period, cliff, cliffAmount, amountPerPeriod, name, canTopup, canUpdateRate, canPause, cancelableBySender, cancelableByRecipient, transferableBySender, transferableByRecipient, automaticWithdrawal = false, withdrawalFrequency = 0, partner, }, { sender, metadataPubKeys, isNative = false, computePrice, computeLimit }) {\n        if (!sender.publicKey) {\n            throw new Error(\"Sender's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const mintPublicKey = new PublicKey(mint);\n        const recipientPublicKey = new PublicKey(recipient);\n        const { metadata, metadataPubKey } = this.getOrCreateStreamMetadata(metadataPubKeys);\n        const rentToExempt = await this.connection.getMinimumBalanceForRentExemption(METADATA_ACC_SIZE);\n        const createMetadataInstruction = SystemProgram.createAccount({\n            programId: this.programId,\n            space: METADATA_ACC_SIZE,\n            lamports: rentToExempt,\n            fromPubkey: sender?.publicKey,\n            newAccountPubkey: metadataPubKey,\n        });\n        const [escrowTokens] = PublicKey.findProgramAddressSync([Buffer.from(\"strm\"), metadataPubKey.toBuffer()], this.programId);\n        const { tokenProgramId } = await getMintAndProgram(this.connection, mintPublicKey);\n        const senderTokens = await ata(mintPublicKey, sender.publicKey, tokenProgramId);\n        const partnerPublicKey = partner ? new PublicKey(partner) : WITHDRAWOR_PUBLIC_KEY;\n        const ixs = prepareBaseInstructions(this.connection, {\n            computePrice,\n            computeLimit,\n        });\n        if (isNative) {\n            const totalFee = await this.getTotalFee({ address: partnerPublicKey.toString() });\n            const totalAmount = calculateTotalAmountToDeposit(depositedAmount, totalFee);\n            ixs.push(...(await prepareWrappedAccount(this.connection, sender.publicKey, totalAmount)));\n        }\n        const createInstruction = await createUncheckedStreamInstruction({\n            start: new BN(start),\n            depositedAmount,\n            period: new BN(period),\n            amountPerPeriod,\n            cliff: new BN(cliff),\n            cliffAmount: new BN(cliffAmount),\n            cancelableBySender,\n            cancelableByRecipient,\n            automaticWithdrawal,\n            transferableBySender,\n            transferableByRecipient,\n            canTopup,\n            canUpdateRate: !!canUpdateRate,\n            canPause: !!canPause,\n            name,\n            withdrawFrequency: new BN(automaticWithdrawal ? withdrawalFrequency : period),\n            recipient: recipientPublicKey,\n            partner: partnerPublicKey,\n        }, this.programId, {\n            sender: sender.publicKey,\n            senderTokens,\n            metadata: metadataPubKey,\n            escrowTokens,\n            mint: new PublicKey(mint),\n            feeOracle: FEE_ORACLE_PUBLIC_KEY,\n            rent: SYSVAR_RENT_PUBKEY,\n            timelockProgram: this.programId,\n            tokenProgram: tokenProgramId,\n            withdrawor: WITHDRAWOR_PUBLIC_KEY,\n            systemProgram: SystemProgram.programId,\n        });\n        ixs.push(createMetadataInstruction, createInstruction);\n        return { ixs, metadata, metadataPubKey };\n    }\n    /**\n     * Creates multiple stream/vesting contracts.\n     * All fees are paid by sender (escrow metadata account rent, escrow token account rent, recipient's associated token account rent, Streamflow's service fee).\n     */\n    async createMultiple(data, extParams) {\n        const { recipients, ...streamParams } = data;\n        const { sender, metadataPubKeys: metadataPubKeysExt, isNative, computePrice, computeLimit, customInstructions, } = extParams;\n        const metadatas = [];\n        const metadataToRecipient = {};\n        const errors = [];\n        const signatures = [];\n        const batch = [];\n        const instructionsBatch = [];\n        const metadataPubKeys = metadataPubKeysExt || [];\n        const partnerPublicKey = data.partner ? new PublicKey(data.partner) : WITHDRAWOR_PUBLIC_KEY;\n        const mintPublicKey = new PublicKey(data.tokenId);\n        if (recipients.length === 0) {\n            throw new Error(\"Recipients array is empty!\");\n        }\n        if (!sender.publicKey) {\n            throw new Error(\"Sender's PublicKey is not available, check passed wallet adapter!\");\n        }\n        for (let i = 0; i < recipients.length; i++) {\n            const recipientData = recipients[i];\n            const createStreamData = { ...streamParams, ...recipientData };\n            const createStreamExtParams = {\n                sender,\n                metadataPubKeys: metadataPubKeys[i] ? [metadataPubKeys[i]] : undefined,\n                computePrice,\n                computeLimit,\n                customInstructions,\n            };\n            const { ixs, metadata, metadataPubKey } = await this.prepareCreateInstructions(createStreamData, createStreamExtParams);\n            await this.applyCustomAfterInstructions(ixs, customInstructions, metadataPubKey);\n            metadataToRecipient[metadataPubKey.toBase58()] = recipientData;\n            metadatas.push(metadataPubKey.toBase58());\n            instructionsBatch.push({\n                ixs,\n                metadata,\n                recipient: recipientData.recipient,\n            });\n        }\n        const { value: hash, context } = await this.connection.getLatestBlockhashAndContext();\n        for (const { ixs, metadata, recipient } of instructionsBatch) {\n            const messageV0 = new TransactionMessage({\n                payerKey: sender.publicKey,\n                recentBlockhash: hash.blockhash,\n                instructions: ixs,\n            }).compileToV0Message();\n            const tx = new VersionedTransaction(messageV0);\n            if (metadata) {\n                tx.sign([metadata]);\n            }\n            batch.push({ tx, recipient });\n        }\n        const prepareInstructions = await this.getCreateATAInstructions([STREAMFLOW_TREASURY_PUBLIC_KEY, partnerPublicKey], mintPublicKey, sender, true);\n        if (isNative) {\n            const totalDepositedAmount = recipients.reduce((acc, recipient) => recipient.amount.add(acc), new BN(0));\n            const nativeInstructions = await prepareWrappedAccount(this.connection, sender.publicKey, totalDepositedAmount);\n            prepareInstructions.push(...nativeInstructions);\n        }\n        if (prepareInstructions.length > 0) {\n            const messageV0 = new TransactionMessage({\n                payerKey: sender.publicKey,\n                recentBlockhash: hash.blockhash,\n                instructions: prepareInstructions,\n            }).compileToV0Message();\n            const tx = new VersionedTransaction(messageV0);\n            batch.push({\n                tx,\n                recipient: sender.publicKey.toBase58(),\n            });\n        }\n        const signedBatch = await signAllTransactionWithRecipients(sender, batch);\n        if (prepareInstructions.length > 0) {\n            const prepareTx = signedBatch.pop();\n            await sendAndConfirmStreamRawTransaction(this.connection, prepareTx, { hash, context }, this.schedulingParams);\n        }\n        const responses = [];\n        if (metadataPubKeys.length > 0) {\n            //if metadata pub keys were passed we should execute transaction sequentially\n            //ephemeral signer need to be used first before proceeding with the next\n            for (const batchTx of signedBatch) {\n                responses.push(...(await Promise.allSettled([\n                    executeTransaction(this.connection, batchTx.tx, { hash, context }, this.schedulingParams),\n                ])));\n            }\n        }\n        else {\n            //send all transactions in parallel and wait for them to settle.\n            //it allows to speed up the process of sending transactions\n            //we then filter all promise responses and handle failed transactions\n            responses.push(...(await executeMultipleTransactions(this.connection, signedBatch.map((item) => item.tx), { hash, context }, this.schedulingParams)));\n        }\n        responses.forEach((item, index) => {\n            if (item.status === \"fulfilled\") {\n                signatures.push(item.value);\n            }\n            else {\n                errors.push({\n                    recipient: signedBatch[index].recipient,\n                    error: item.reason,\n                    contractErrorCode: this.extractErrorCode(item.reason) || undefined,\n                });\n            }\n        });\n        return { txs: signatures, metadatas, metadataToRecipient, errors };\n    }\n    /**\n     * Creates multiple stream/vesting contracts, and send all transactions sequentially.\n     * All fees are paid by sender (escrow metadata account rent, escrow token account rent, recipient's associated token account rent, Streamflow's service fee).\n     * In most cases, createMultiple should be used instead.\n     */\n    async createMultipleSequential(data, extParams) {\n        const { recipients, ...streamParams } = data;\n        const { sender, metadataPubKeys: metadataPubKeysExt, isNative, computePrice, computeLimit, customInstructions, } = extParams;\n        const metadatas = [];\n        const metadataToRecipient = {};\n        const errors = [];\n        const signatures = [];\n        const batch = [];\n        const instructionsBatch = [];\n        const metadataPubKeys = metadataPubKeysExt || [];\n        const partnerPublicKey = data.partner ? new PublicKey(data.partner) : WITHDRAWOR_PUBLIC_KEY;\n        const mintPublicKey = new PublicKey(data.tokenId);\n        if (recipients.length === 0) {\n            throw new Error(\"Recipients array is empty!\");\n        }\n        if (!sender.publicKey) {\n            throw new Error(\"Sender's PublicKey is not available, check passed wallet adapter!\");\n        }\n        for (let i = 0; i < recipients.length; i++) {\n            const recipientData = recipients[i];\n            const createStreamData = { ...streamParams, ...recipientData };\n            const createStreamExtParams = {\n                sender,\n                metadataPubKeys: metadataPubKeys[i] ? [metadataPubKeys[i]] : undefined,\n                computePrice,\n                computeLimit,\n                customInstructions,\n            };\n            const { ixs, metadata, metadataPubKey } = await this.prepareCreateInstructions(createStreamData, createStreamExtParams);\n            await this.applyCustomAfterInstructions(ixs, customInstructions, metadataPubKey);\n            metadataToRecipient[metadataPubKey.toBase58()] = recipientData;\n            metadatas.push(metadataPubKey.toBase58());\n            instructionsBatch.push({\n                ixs,\n                metadata,\n                recipient: recipientData.recipient,\n            });\n        }\n        const { value: hash, context } = await this.connection.getLatestBlockhashAndContext();\n        for (const { ixs, metadata, recipient } of instructionsBatch) {\n            const messageV0 = new TransactionMessage({\n                payerKey: sender.publicKey,\n                recentBlockhash: hash.blockhash,\n                instructions: ixs,\n            }).compileToV0Message();\n            const tx = new VersionedTransaction(messageV0);\n            if (metadata) {\n                tx.sign([metadata]);\n            }\n            batch.push({ tx, recipient });\n        }\n        const prepareInstructions = await this.getCreateATAInstructions([STREAMFLOW_TREASURY_PUBLIC_KEY, partnerPublicKey], mintPublicKey, sender, true);\n        if (isNative) {\n            const totalDepositedAmount = recipients.reduce((acc, recipient) => recipient.amount.add(acc), new BN(0));\n            const nativeInstructions = await prepareWrappedAccount(this.connection, sender.publicKey, totalDepositedAmount);\n            prepareInstructions.push(...nativeInstructions);\n        }\n        if (prepareInstructions.length > 0) {\n            const messageV0 = new TransactionMessage({\n                payerKey: sender.publicKey,\n                recentBlockhash: hash.blockhash,\n                instructions: prepareInstructions,\n            }).compileToV0Message();\n            const tx = new VersionedTransaction(messageV0);\n            batch.push({\n                tx,\n                recipient: sender.publicKey.toBase58(),\n            });\n        }\n        const signedBatch = await signAllTransactionWithRecipients(sender, batch);\n        if (prepareInstructions.length > 0) {\n            const prepareTx = signedBatch.shift();\n            await sendAndConfirmStreamRawTransaction(this.connection, prepareTx, { hash, context }, this.schedulingParams);\n        }\n        const responses = [];\n        for (const batchTx of signedBatch) {\n            responses.push(...(await Promise.allSettled([\n                executeTransaction(this.connection, batchTx.tx, { hash, context }, this.schedulingParams),\n            ])));\n        }\n        responses.forEach((item, index) => {\n            if (item.status === \"fulfilled\") {\n                signatures.push(item.value);\n            }\n            else {\n                errors.push({\n                    recipient: signedBatch[index].recipient,\n                    error: item.reason,\n                    contractErrorCode: this.extractErrorCode(item.reason) || undefined,\n                });\n            }\n        });\n        return { txs: signatures, metadatas, metadataToRecipient, errors };\n    }\n    /**\n     * Attempts withdrawing from the specified stream.\n     */\n    async withdraw({ id, amount = WITHDRAW_AVAILABLE_AMOUNT }, extParams) {\n        const { invoker, customInstructions } = extParams;\n        if (!invoker.publicKey) {\n            throw new Error(\"Invoker's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const ixs = await this.prepareWithdrawInstructions({ id, amount }, extParams);\n        const metadata = new PublicKey(id);\n        await this.applyCustomAfterInstructions(ixs, customInstructions, metadata);\n        const { tx, hash, context } = await prepareTransaction(this.connection, ixs, invoker.publicKey);\n        const signature = await signAndExecuteTransaction(this.connection, extParams.invoker, tx, {\n            hash,\n            context,\n            commitment: this.getCommitment(),\n        }, this.schedulingParams);\n        return { ixs, txId: signature };\n    }\n    /**\n     * Creates Transaction Instructions for withdrawal\n     */\n    async prepareWithdrawInstructions({ id, amount = WITHDRAW_AVAILABLE_AMOUNT }, { invoker, checkTokenAccounts, computePrice, computeLimit }) {\n        if (!invoker.publicKey) {\n            throw new Error(\"Invoker's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const ixs = prepareBaseInstructions(this.connection, {\n            computePrice,\n            computeLimit,\n        });\n        const streamPublicKey = new PublicKey(id);\n        const escrow = await this.connection.getAccountInfo(streamPublicKey);\n        if (!escrow?.data) {\n            throw new Error(\"Couldn't get account info\");\n        }\n        const data = decodeStream(escrow.data);\n        const { sender, recipient, mint, streamflowTreasury, partner, recipientTokens, escrowTokens } = data;\n        const { tokenProgramId } = await getMintAndProgram(this.connection, mint);\n        const streamflowTreasuryTokens = await ata(mint, STREAMFLOW_TREASURY_PUBLIC_KEY, tokenProgramId);\n        const partnerTokens = await ata(mint, partner, tokenProgramId);\n        const ataIx = await this.getCreateATAInstructions([sender, recipient, streamflowTreasury, partner], mint, invoker, checkTokenAccounts, tokenProgramId);\n        ixs.push(...ataIx, await withdrawStreamInstruction(amount, this.programId, {\n            partner,\n            partnerTokens,\n            mint,\n            streamflowTreasuryTokens,\n            recipientTokens,\n            escrowTokens,\n            authority: invoker.publicKey,\n            recipient: invoker.publicKey,\n            metadata: streamPublicKey,\n            streamflowTreasury: STREAMFLOW_TREASURY_PUBLIC_KEY,\n            tokenProgram: tokenProgramId,\n        }));\n        return ixs;\n    }\n    /**\n     * Attempts canceling the specified stream.\n     */\n    async cancel(cancelData, extParams) {\n        const ixs = await this.prepareCancelInstructions(cancelData, extParams);\n        const { tx, hash, context } = await prepareTransaction(this.connection, ixs, extParams.invoker.publicKey);\n        const signature = await signAndExecuteTransaction(this.connection, extParams.invoker, tx, {\n            hash,\n            context,\n            commitment: this.getCommitment(),\n        }, this.schedulingParams);\n        return { ixs, txId: signature };\n    }\n    async prepareCancelInstructions(cancelData, extParams) {\n        const streamPublicKey = new PublicKey(cancelData.id);\n        const account = await this.connection.getAccountInfo(streamPublicKey);\n        if (!account) {\n            throw new Error(\"Impossible to cancel a stream contract that does not exist\");\n        }\n        const { sender: senderPublicKey } = decodeStream(account.data);\n        const isAlignedUnlock = this.isAlignedUnlock(streamPublicKey, senderPublicKey);\n        const ixs = isAlignedUnlock\n            ? await this.prepareCancelAlignedUnlockInstructions(cancelData, extParams)\n            : await this.prepareCancelStreamInstructions(cancelData, extParams);\n        return ixs;\n    }\n    async prepareCancelAlignedUnlockInstructions({ id }, { invoker, checkTokenAccounts, computePrice, computeLimit }) {\n        if (!invoker.publicKey) {\n            throw new Error(\"Invoker's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const streamPublicKey = new PublicKey(id);\n        const escrowAcc = await this.connection.getAccountInfo(streamPublicKey);\n        if (!escrowAcc?.data) {\n            throw new Error(\"Couldn't get account info\");\n        }\n        const streamData = decodeStream(escrowAcc.data);\n        const { sender, recipient, mint, streamflowTreasury, partner, escrowTokens } = streamData;\n        const { tokenProgramId } = await getMintAndProgram(this.connection, mint);\n        const ixs = prepareBaseInstructions(this.connection, {\n            computePrice,\n            computeLimit: computeLimit ?? ALIGNED_COMPUTE_LIMIT,\n        });\n        const ataIx = await this.getCreateATAInstructions([sender, recipient, partner, streamflowTreasury], mint, invoker, checkTokenAccounts, tokenProgramId);\n        const cancelIx = await this.alignedProxyProgram.methods\n            .cancel()\n            .accountsPartial({\n            mint,\n            partner,\n            recipient,\n            escrowTokens,\n            sender: invoker.publicKey,\n            streamMetadata: streamPublicKey,\n            streamflowTreasury: STREAMFLOW_TREASURY_PUBLIC_KEY,\n            tokenProgram: tokenProgramId,\n            streamflowProgram: this.programId,\n        })\n            .instruction();\n        ixs.push(...ataIx, cancelIx);\n        return ixs;\n    }\n    /**\n     * Creates Transaction Instructions for cancel\n     */\n    async prepareCancelStreamInstructions({ id }, { invoker, checkTokenAccounts, computePrice, computeLimit }) {\n        if (!invoker.publicKey) {\n            throw new Error(\"Invoker's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const streamPublicKey = new PublicKey(id);\n        const escrowAcc = await this.connection.getAccountInfo(streamPublicKey);\n        if (!escrowAcc?.data) {\n            throw new Error(\"Couldn't get account info\");\n        }\n        const data = decodeStream(escrowAcc.data);\n        const { sender, recipient, partner, streamflowTreasury, mint, senderTokens, recipientTokens, escrowTokens } = data;\n        const { tokenProgramId } = await getMintAndProgram(this.connection, mint);\n        const streamflowTreasuryTokens = await ata(mint, STREAMFLOW_TREASURY_PUBLIC_KEY, tokenProgramId);\n        const partnerTokens = await ata(mint, partner, tokenProgramId);\n        const ixs = prepareBaseInstructions(this.connection, {\n            computePrice,\n            computeLimit,\n        });\n        const ixsAta = await this.getCreateATAInstructions([sender, recipient, partner, streamflowTreasury], mint, invoker, checkTokenAccounts, tokenProgramId);\n        ixs.push(...ixsAta, await cancelStreamInstruction(this.programId, {\n            sender,\n            senderTokens,\n            recipient,\n            recipientTokens,\n            streamflowTreasuryTokens,\n            partner,\n            partnerTokens,\n            mint,\n            escrowTokens,\n            authority: invoker.publicKey,\n            metadata: streamPublicKey,\n            streamflowTreasury: STREAMFLOW_TREASURY_PUBLIC_KEY,\n            tokenProgram: tokenProgramId,\n        }));\n        return ixs;\n    }\n    /**\n     * Attempts changing the stream/vesting contract's recipient (effectively transferring the stream/vesting contract).\n     * Potential associated token account rent fee (to make it rent-exempt) is paid by the transaction initiator.\n     */\n    async transfer({ id, newRecipient }, extParams) {\n        const ixs = await this.prepareTransferInstructions({ id, newRecipient }, extParams);\n        const { tx, hash, context } = await prepareTransaction(this.connection, ixs, extParams.invoker.publicKey);\n        const signature = await signAndExecuteTransaction(this.connection, extParams.invoker, tx, {\n            hash,\n            context,\n            commitment: this.getCommitment(),\n        }, this.schedulingParams);\n        return { ixs, txId: signature };\n    }\n    /**\n     * Attempts changing the stream/vesting contract's recipient (effectively transferring the stream/vesting contract).\n     * Potential associated token account rent fee (to make it rent-exempt) is paid by the transaction initiator.\n     */\n    async prepareTransferInstructions({ id, newRecipient }, { invoker, computePrice, computeLimit = 100001 }) {\n        if (!invoker.publicKey) {\n            throw new Error(\"Invoker's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const ixs = prepareBaseInstructions(this.connection, {\n            computePrice,\n            computeLimit,\n        });\n        const stream = new PublicKey(id);\n        const newRecipientPublicKey = new PublicKey(newRecipient);\n        const escrow = await this.connection.getAccountInfo(stream);\n        if (!escrow?.data) {\n            throw new Error(\"Couldn't get account info\");\n        }\n        const { mint } = decodeStream(escrow?.data);\n        const { tokenProgramId } = await getMintAndProgram(this.connection, mint);\n        const newRecipientTokens = await ata(mint, newRecipientPublicKey, tokenProgramId);\n        ixs.push(await transferStreamInstruction(this.programId, {\n            authority: invoker.publicKey,\n            newRecipient: newRecipientPublicKey,\n            newRecipientTokens,\n            metadata: stream,\n            mint,\n            rent: SYSVAR_RENT_PUBKEY,\n            tokenProgram: tokenProgramId,\n            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n            systemProgram: SystemProgram.programId,\n        }));\n        return ixs;\n    }\n    /**\n     * Tops up stream account with specified amount.\n     */\n    async topup({ id, amount }, extParams) {\n        const ixs = await this.prepareTopupInstructions({ id, amount }, extParams);\n        const { tx, hash, context } = await prepareTransaction(this.connection, ixs, extParams.invoker.publicKey);\n        const signature = await signAndExecuteTransaction(this.connection, extParams.invoker, tx, {\n            hash,\n            context,\n            commitment: this.getCommitment(),\n        }, this.schedulingParams);\n        return { ixs, txId: signature };\n    }\n    /**\n     * Create Transaction instructions for topup\n     */\n    async prepareTopupInstructions({ id, amount }, { invoker, isNative, computePrice, computeLimit }) {\n        if (!invoker.publicKey) {\n            throw new Error(\"Invoker's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const ixs = prepareBaseInstructions(this.connection, {\n            computePrice,\n            computeLimit,\n        });\n        const streamPublicKey = new PublicKey(id);\n        const escrow = await this.connection.getAccountInfo(streamPublicKey);\n        if (!escrow?.data) {\n            throw new Error(\"Couldn't get account info\");\n        }\n        const { mint, partner, senderTokens, escrowTokens } = decodeStream(escrow?.data);\n        const { tokenProgramId } = await getMintAndProgram(this.connection, mint);\n        const streamflowTreasuryTokens = await ata(mint, STREAMFLOW_TREASURY_PUBLIC_KEY, tokenProgramId);\n        const partnerTokens = await ata(mint, partner, tokenProgramId);\n        if (isNative) {\n            ixs.push(...(await prepareWrappedAccount(this.connection, invoker.publicKey, amount)));\n        }\n        ixs.push(await topupStreamInstruction(amount, this.programId, {\n            sender: invoker.publicKey,\n            senderTokens,\n            metadata: streamPublicKey,\n            escrowTokens,\n            streamflowTreasury: STREAMFLOW_TREASURY_PUBLIC_KEY,\n            streamflowTreasuryTokens: streamflowTreasuryTokens,\n            partner: partner,\n            partnerTokens: partnerTokens,\n            mint,\n            tokenProgram: tokenProgramId,\n            withdrawor: WITHDRAWOR_PUBLIC_KEY,\n            systemProgram: SystemProgram.programId,\n        }));\n        return ixs;\n    }\n    /**\n     * Fetch stream data by its id (address).\n     */\n    async getOne({ id }) {\n        const streamPublicKey = new PublicKey(id);\n        const escrow = await this.connection.getAccountInfo(streamPublicKey, TX_FINALITY_CONFIRMED);\n        if (!escrow?.data) {\n            throw new Error(\"Couldn't get account info.\");\n        }\n        const stream = decodeStream(escrow.data);\n        if (this.isAlignedUnlock(streamPublicKey, stream.sender)) {\n            const alignedProxy = await this.alignedProxyProgram.account.contract.fetch(deriveContractPDA(this.alignedProxyProgram.programId, streamPublicKey));\n            if (!alignedProxy) {\n                throw new Error(\"Couldn't get proxy account info.\");\n            }\n            return new AlignedContract(stream, alignedProxy);\n        }\n        return new Contract(stream);\n    }\n    /**\n     * Fetch all aligned outgoing streams/contracts by the provided public key.\n     */\n    async getOutgoingAlignedStreams(sender) {\n        const streams = {};\n        const alignedOutgoingProgramAccounts = await this.alignedProxyProgram.account.contract.all([\n            {\n                memcmp: {\n                    offset: ORIGINAL_CONTRACT_SENDER_OFFSET,\n                    bytes: sender,\n                },\n            },\n            {\n                dataSize: ALIGNED_METADATA_ACC_SIZE,\n            },\n        ]);\n        const streamPubKeys = alignedOutgoingProgramAccounts.map((account) => account.account.stream);\n        const streamAccounts = await getMultipleAccountsInfoBatched(this.connection, streamPubKeys, TX_FINALITY_CONFIRMED);\n        streamAccounts.forEach((account, index) => {\n            if (account) {\n                const alignedData = alignedOutgoingProgramAccounts[index].account;\n                streams[streamPubKeys[index].toBase58()] = new AlignedContract(decodeStream(account.data), alignedData);\n            }\n        });\n        return streams;\n    }\n    async getIncomingAlignedStreams(streamRecord) {\n        const streams = {};\n        const alignedStreamsPubKeys = Object.keys(streamRecord);\n        const alignedProxyPDAs = alignedStreamsPubKeys.map((streamPubKey) => deriveContractPDA(this.alignedProxyProgram.programId, new PublicKey(streamPubKey)));\n        const alignedProxyAccounts = await getMultipleAccountsInfoBatched(this.connection, alignedProxyPDAs);\n        alignedProxyAccounts.forEach((account, index) => {\n            if (account && account.data.length === ALIGNED_METADATA_ACC_SIZE) {\n                const alignedData = streamRecord[alignedStreamsPubKeys[index]];\n                streams[alignedStreamsPubKeys[index]] = new AlignedContract(alignedData, this.alignedProxyProgram.account.contract.coder.accounts.decode(\"contract\", account.data));\n            }\n        });\n        return streams;\n    }\n    /**\n     * Fetch streams/contracts by providing direction.\n     * Streams are sorted by start time in ascending order.\n     */\n    async get({ address, type = StreamType.All, direction = StreamDirection.All, }) {\n        const publicKey = new PublicKey(address);\n        let streams = {};\n        // don't do unnecessary rpc calls if we are not querying for vesting streams\n        const shouldFetchAligned = type === StreamType.All || type === StreamType.Vesting;\n        if (direction !== StreamDirection.Incoming) {\n            const outgoingStreamAccounts = await getProgramAccounts(this.connection, publicKey, STREAM_STRUCT_OFFSET_SENDER, this.programId);\n            outgoingStreamAccounts.forEach((account) => {\n                streams[account.pubkey.toBase58()] = new Contract(decodeStream(account.account.data));\n            });\n            if (shouldFetchAligned) {\n                const alignedStreams = await this.getOutgoingAlignedStreams(address);\n                streams = { ...streams, ...alignedStreams };\n            }\n        }\n        if (direction !== StreamDirection.Outgoing) {\n            const allIncomingAccounts = await getProgramAccounts(this.connection, publicKey, STREAM_STRUCT_OFFSET_RECIPIENT, this.programId);\n            const allIncomingStreams = allIncomingAccounts.map((account) => decodeStream(account.account.data));\n            const alignedDecoded = {};\n            // filter out aligned unlocks and store them in a separate object\n            allIncomingAccounts.forEach((account, index) => {\n                if (this.isAlignedUnlock(account.pubkey, allIncomingStreams[index].sender)) {\n                    alignedDecoded[account.pubkey.toBase58()] = allIncomingStreams[index];\n                }\n                else {\n                    streams[account.pubkey.toBase58()] = new Contract(allIncomingStreams[index]);\n                }\n            });\n            if (shouldFetchAligned) {\n                const incomingAlignedStreams = await this.getIncomingAlignedStreams(alignedDecoded);\n                streams = { ...streams, ...incomingAlignedStreams };\n            }\n        }\n        const sortedStreams = Object.entries(streams).sort(([, stream1], [, stream2]) => stream2.start - stream1.start);\n        if (type === StreamType.All)\n            return sortedStreams;\n        return sortedStreams.filter((stream) => stream[1].type === type);\n    }\n    async searchStreams(data) {\n        const filters = Object.entries(data)\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            .filter(([_, value]) => value !== undefined) // Only keep entries where the value is truthy\n            .map(([key, value]) => ({\n            memcmp: {\n                offset: STREAM_STRUCT_OFFSETS[key],\n                bytes: typeof value === \"boolean\" ? bs58.encode([Number(value)]) : value.toString(),\n            },\n        }));\n        filters.push({ dataSize: METADATA_ACC_SIZE });\n        const accounts = await this.connection.getProgramAccounts(this.programId, {\n            filters,\n        });\n        return accounts.map(({ pubkey, account }) => ({\n            publicKey: pubkey,\n            account: new Contract(decodeStream(account.data)),\n        }));\n    }\n    /**\n     * Attempts updating the stream auto withdrawal params and amount per period\n     */\n    async update(data, extParams) {\n        const ixs = await this.prepareUpdateInstructions(data, extParams);\n        const { tx, hash, context } = await prepareTransaction(this.connection, ixs, extParams.invoker.publicKey);\n        const signature = await signAndExecuteTransaction(this.connection, extParams.invoker, tx, {\n            hash,\n            context,\n            commitment: this.getCommitment(),\n        }, this.schedulingParams);\n        return {\n            ixs,\n            txId: signature,\n        };\n    }\n    /**\n     * Create Transaction instructions for update\n     */\n    async prepareUpdateInstructions(data, { invoker, computePrice, computeLimit }) {\n        if (!invoker.publicKey) {\n            throw new Error(\"Invoker's PublicKey is not available, check passed wallet adapter!\");\n        }\n        const streamPublicKey = new PublicKey(data.id);\n        const escrow = await this.connection.getAccountInfo(streamPublicKey);\n        if (!escrow) {\n            throw new Error(\"Couldn't get account info\");\n        }\n        const ixs = prepareBaseInstructions(this.connection, {\n            computePrice,\n            computeLimit,\n        });\n        ixs.push(await updateStreamInstruction(data, this.programId, {\n            authority: invoker.publicKey,\n            metadata: streamPublicKey,\n            withdrawor: WITHDRAWOR_PUBLIC_KEY,\n            systemProgram: SystemProgram.programId,\n        }));\n        return ixs;\n    }\n    async getFees({ address }) {\n        const [metadataPubKey] = PublicKey.findProgramAddressSync([Buffer.from(FEES_METADATA_SEED)], new PublicKey(PARTNER_ORACLE_PROGRAM_ID));\n        const data = await this.connection.getAccountInfo(metadataPubKey);\n        if (!data) {\n            return null;\n        }\n        const partners = borsh.deserialize(PARTNERS_SCHEMA, data.data);\n        const filteredPartners = partners.filter((item) => new PublicKey(item.pubkey).toString() === address);\n        if (filteredPartners.length === 0) {\n            return null;\n        }\n        return {\n            streamflowFee: Number(filteredPartners[0].strm_fee.toFixed(4)),\n            partnerFee: Number(filteredPartners[0].partner_fee.toFixed(4)),\n        };\n    }\n    async getDefaultStreamflowFee() {\n        return DEFAULT_STREAMFLOW_FEE;\n    }\n    extractErrorCode(err) {\n        const logs = \"logs\" in err && Array.isArray(err.logs) ? err.logs : undefined;\n        return extractSolanaErrorCode(err.toString() ?? \"Unknown error!\", logs);\n    }\n    /**\n     * Utility function to generate metadata for a Contract or return existing Pubkey\n     */\n    getOrCreateStreamMetadata(metadataPubKeys) {\n        let metadata;\n        let metadataPubKey;\n        if (!metadataPubKeys) {\n            metadata = Keypair.generate();\n            metadataPubKey = metadata.publicKey;\n        }\n        else {\n            metadataPubKey = metadataPubKeys[0];\n        }\n        return { metadata, metadataPubKey };\n    }\n    /**\n     * Utility function that checks whether the associated stream address is an aligned unlock contract, indicated by whether the sender/creator is a PDA\n     */\n    isAlignedUnlock(streamPublicKey, senderPublicKey) {\n        const pda = deriveContractPDA(this.alignedProxyProgram.programId, streamPublicKey);\n        return senderPublicKey.equals(pda);\n    }\n    /**\n     * Returns insrtuctions for creating associated token accounts for the provided owners\n     */\n    async getCreateATAInstructions(owners, mint, invoker, checkTokenAccounts, programId) {\n        if (!checkTokenAccounts) {\n            return [];\n        }\n        // filter out duplicate PublicKeys, otherwise transaction will fail\n        const uniqueOwners = Array.from(new Set(owners.map((owner) => owner.toBase58()))).map((pkString) => new PublicKey(pkString));\n        return checkOrCreateAtaBatch(this.connection, uniqueOwners, mint, invoker, programId);\n    }\n    async applyCustomAfterInstructions(ixs, customInstructions, metadata) {\n        if (customInstructions?.after) {\n            const afterInstructions = typeof customInstructions.after === \"function\"\n                ? await customInstructions.after({\n                    instructions: ixs,\n                    metadata,\n                })\n                : customInstructions.after;\n            ixs.push(...afterInstructions);\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2643, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2649, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40streamflow/stream/dist/esm/solana/timelockIDL.js"],"sourcesContent":["export default {\n    version: \"0.1.0\",\n    name: \"timelock\",\n    instructions: [\n        {\n            name: \"create\",\n            accounts: [\n                {\n                    name: \"sender\",\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: \"senderTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"recipient\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"metadata\",\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: \"escrowTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"recipientTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"streamflowTreasury\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"streamflowTreasuryTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"withdrawor\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"partner\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"partnerTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"mint\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"feeOracle\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"timelockProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"associatedTokenProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: \"startTime\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"netAmountDeposited\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"period\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"amountPerPeriod\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"cliff\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"cliffAmount\",\n                    type: \"u64\",\n                },\n                {\n                    name: \"cancelableBySender\",\n                    type: \"bool\",\n                },\n                {\n                    name: \"cancelableByRecipient\",\n                    type: \"bool\",\n                },\n                {\n                    name: \"automaticWithdrawal\",\n                    type: \"bool\",\n                },\n                {\n                    name: \"transferableBySender\",\n                    type: \"bool\",\n                },\n                {\n                    name: \"transferableByRecipient\",\n                    type: \"bool\",\n                },\n                {\n                    name: \"canTopup\",\n                    type: \"bool\",\n                },\n                {\n                    name: \"streamName\",\n                    type: {\n                        array: [\"u8\", 64],\n                    },\n                },\n                {\n                    name: \"withdrawFrequency\",\n                    type: \"u64\",\n                },\n            ],\n        },\n        {\n            name: \"withdraw\",\n            accounts: [\n                {\n                    name: \"authority\",\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: \"recipient\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"recipientTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"metadata\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"escrowTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"streamflowTreasury\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"streamflowTreasuryTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"partner\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"partnerTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"mint\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: \"amount\",\n                    type: \"u64\",\n                },\n            ],\n        },\n        {\n            name: \"cancel\",\n            accounts: [\n                {\n                    name: \"authority\",\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: \"sender\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"senderTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"recipient\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"recipientTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"metadata\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"escrowTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"streamflowTreasury\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"streamflowTreasuryTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"partner\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"partnerTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"mint\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: \"transferRecipient\",\n            accounts: [\n                {\n                    name: \"authority\",\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: \"newRecipient\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"newRecipientTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"metadata\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"mint\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"associatedTokenProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: \"topup\",\n            accounts: [\n                {\n                    name: \"sender\",\n                    isMut: true,\n                    isSigner: true,\n                },\n                {\n                    name: \"senderTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"metadata\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"escrowTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"streamflowTreasury\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"streamflowTreasuryTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"withdrawor\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"partner\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"partnerTokens\",\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: \"mint\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: \"amount\",\n                    type: \"u64\",\n                },\n            ],\n        },\n    ],\n};\n"],"names":[],"mappings":";;;uCAAe;IACX,SAAS;IACT,MAAM;IACN,cAAc;QACV;YACI,MAAM;YACN,UAAU;gBACN;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;aACH;YACD,MAAM;gBACF;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;gBACA;oBACI,MAAM;oBACN,MAAM;wBACF,OAAO;4BAAC;4BAAM;yBAAG;oBACrB;gBACJ;gBACA;oBACI,MAAM;oBACN,MAAM;gBACV;aACH;QACL;QACA;YACI,MAAM;YACN,UAAU;gBACN;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;aACH;YACD,MAAM;gBACF;oBACI,MAAM;oBACN,MAAM;gBACV;aACH;QACL;QACA;YACI,MAAM;YACN,UAAU;gBACN;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;aACH;YACD,MAAM,EAAE;QACZ;QACA;YACI,MAAM;YACN,UAAU;gBACN;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;aACH;YACD,MAAM,EAAE;QACZ;QACA;YACI,MAAM;YACN,UAAU;gBACN;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;gBACA;oBACI,MAAM;oBACN,OAAO;oBACP,UAAU;gBACd;aACH;YACD,MAAM;gBACF;oBACI,MAAM;oBACN,MAAM;gBACV;aACH;QACL;KACH;AACL","ignoreList":[0]}},
    {"offset": {"line": 3075, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3081, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 3089, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}