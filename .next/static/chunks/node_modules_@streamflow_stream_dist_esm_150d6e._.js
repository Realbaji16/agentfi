(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@streamflow_stream_dist_esm_150d6e._.js", {

"[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ContractErrorCode": (()=>ContractErrorCode),
    "SolanaAlignedProxyErrorCode": (()=>SolanaAlignedProxyErrorCode),
    "SolanaContractErrorCode": (()=>SolanaContractErrorCode),
    "StreamDirection": (()=>StreamDirection),
    "StreamType": (()=>StreamType)
});
;
var StreamDirection;
(function(StreamDirection) {
    StreamDirection["Outgoing"] = "outgoing";
    StreamDirection["Incoming"] = "incoming";
    StreamDirection["All"] = "all";
})(StreamDirection || (StreamDirection = {}));
var StreamType;
(function(StreamType) {
    StreamType["All"] = "all";
    StreamType["Payment"] = "payment";
    StreamType["Vesting"] = "vesting";
    StreamType["Lock"] = "lock";
})(StreamType || (StreamType = {}));
var ContractErrorCode;
(function(ContractErrorCode) {
    /** Contract does not exist */ ContractErrorCode["ECONTRACT_NOT_INIT"] = "ECONTRACT_NOT_INIT";
    /** Invalid total amount */ ContractErrorCode["EBAD_AMOUNT"] = "EBAD_AMOUNT";
    /** No permissions to perform an operation */ ContractErrorCode["ENO_PERMISSIONS"] = "ENO_PERMISSIONS";
    /** Invalid input parameters on create/update */ ContractErrorCode["EBADINPUT"] = "EBADINPUT";
    /** Contract is already ended */ ContractErrorCode["ECLOSED"] = "ECLOSED";
    /** Invalid amount per period input */ ContractErrorCode["EBAD_INPUT_AMOUNT_PER_PERIOD"] = "EBAD_INPUT_AMOUNT_PER_PERIOD";
    /** Pause feature is not supported */ ContractErrorCode["EBAD_INPUT_PAUSABLE"] = "EBAD_INPUT_PAUSABLE";
    /** Not used currently  */ ContractErrorCode["EBAD_INPUT_UPDATE_RATE"] = "EBAD_INPUT_UPDATE_RATE";
    /** Invalid cliff amount input */ ContractErrorCode["EBAD_INPUT_CLIFF_AMOUNT"] = "EBAD_INPUT_CLIFF_AMOUNT";
    /** Invalid period input */ ContractErrorCode["EBAD_INPUT_PERIOD"] = "EBAD_INPUT_PERIOD";
    /** Invalid start time of the contract */ ContractErrorCode["EBAD_INPUT_START"] = "EBAD_INPUT_START";
    /** EVM: token allowance is not enough to create a Contract */ ContractErrorCode["EBAD_INSUFFICIENT_TOKEN_ALLOWANCE"] = "EBAD_INSUFFICIENT_TOKEN_ALLOWANCE";
    /** EVM: not enough coins were passed for withdrawal fees */ ContractErrorCode["EBAD_INSUFFICIENT_WITHDRAWAL_FEES"] = "EBAD_INSUFFICIENT_WITHDRAWAL_FEES";
    /** Sui: Insufficient amount of tokens passed */ ContractErrorCode["EBAD_INSUFFICIENT_AMOUNT"] = "EBAD_INSUFFICIENT_AMOUNT";
    /** Contract is already paused */ ContractErrorCode["EPAUSED"] = "EPAUSED";
    /** Contract is not paused */ ContractErrorCode["ENOTPAUSED"] = "ENOTPAUSED";
    /** Aptos: user opt out from direct coin transfers feature and has not coin wallet registered */ ContractErrorCode["ENO_RECIPIENT_COIN_ADDRESS"] = "ENO_RECIPIENT_COIN_ADDRESS";
})(ContractErrorCode || (ContractErrorCode = {}));
var SolanaContractErrorCode;
(function(SolanaContractErrorCode) {
    /** Accounts not writable */ SolanaContractErrorCode["AccountsNotWritable"] = "AccountsNotWritable";
    /** Invalid Metadata */ SolanaContractErrorCode["InvalidMetadata"] = "InvalidMetadata";
    /** Invalid metadata account */ SolanaContractErrorCode["InvalidMetadataAccount"] = "InvalidMetadataAccount";
    /** Provided accounts don't match the ones in contract */ SolanaContractErrorCode["MetadataAccountMismatch"] = "MetadataAccountMismatch";
    /** Invalid escrow account */ SolanaContractErrorCode["InvalidEscrowAccount"] = "InvalidEscrowAccount";
    /** Provided account(s) is/are not valid associated token accounts */ SolanaContractErrorCode["NotAssociated"] = "NotAssociated";
    /** Sender mint does not match accounts mint */ SolanaContractErrorCode["MintMismatch"] = "MintMismatch";
    /** Recipient not transferable for account */ SolanaContractErrorCode["TransferNotAllowed"] = "TransferNotAllowed";
    /** Contract closed */ SolanaContractErrorCode["ContractClosed"] = "ContractClosed";
    /** Invalid Streamflow Treasury accounts supplied */ SolanaContractErrorCode["InvalidTreasury"] = "InvalidTreasury";
    /** Given timestamps are invalid */ SolanaContractErrorCode["InvalidTimestamps"] = "InvalidTimestamps";
    /** Invalid deposit configuration */ SolanaContractErrorCode["InvalidDepositConfiguration"] = "InvalidDepositConfiguration";
    /** Amount cannot be zero */ SolanaContractErrorCode["AmountIsZero"] = "AmountIsZero";
    /** Amount requested is larger than available */ SolanaContractErrorCode["AmountMoreThanAvailable"] = "AmountMoreThanAvailable";
    /** Amount currently available is zero */ SolanaContractErrorCode["AmountAvailableIsZero"] = "AmountAvailableIsZero";
    /** Arithmetic error */ SolanaContractErrorCode["ArithmeticError"] = "ArithmeticError";
    /** Metadata account data must be 1104 bytes long */ SolanaContractErrorCode["InvalidMetadataSize"] = "InvalidMetadataSize";
    /** Metadata state account must be initialized */ SolanaContractErrorCode["UninitializedMetadata"] = "UninitializedMetadata";
    /** Authority does not have permission for this action */ SolanaContractErrorCode["Unauthorized"] = "Unauthorized";
    /** Contract is not transferable to the original recipient */ SolanaContractErrorCode["SelfTransfer"] = "SelfTransfer";
    /** Contract is already paused */ SolanaContractErrorCode["AlreadyPaused"] = "AlreadyPaused";
    /** Contract is not paused */ SolanaContractErrorCode["NotPaused"] = "NotPaused";
    /** Meta account is not rent exempt */ SolanaContractErrorCode["MetadataNotRentExempt"] = "MetadataNotRentExempt";
})(SolanaContractErrorCode || (SolanaContractErrorCode = {}));
var SolanaAlignedProxyErrorCode;
(function(SolanaAlignedProxyErrorCode) {
    /** Authority does not have permission for this action */ SolanaAlignedProxyErrorCode["Unauthorized"] = "Unauthorized";
    /** Arithmetic error */ SolanaAlignedProxyErrorCode["ArithmeticError"] = "ArithmeticError";
    /** Mint has unsupported Token Extensions */ SolanaAlignedProxyErrorCode["UnsupportedTokenExtensions"] = "UnsupportedTokenExtensions";
    /** Provided period is too short, should be equal or more than 30 seconds */ SolanaAlignedProxyErrorCode["PeriodTooShort"] = "PeriodTooShort";
    /** Provided percentage tick size is invalid */ SolanaAlignedProxyErrorCode["InvalidTickSize"] = "InvalidTickSize";
    /** Provided percentage bounds are invalid */ SolanaAlignedProxyErrorCode["InvalidPercentageBoundaries"] = "InvalidPercentageBoundaries";
    /** Provided price bounds are invalid */ SolanaAlignedProxyErrorCode["InvalidPriceBoundaries"] = "InvalidPriceBoundaries";
    /** Unsupported price oracle */ SolanaAlignedProxyErrorCode["UnsupportedOracle"] = "UnsupportedOracle";
    /** Invalid oracle account */ SolanaAlignedProxyErrorCode["InvalidOracleAccount"] = "InvalidOracleAccount";
    /** Invalid oracle price */ SolanaAlignedProxyErrorCode["InvalidOraclePrice"] = "InvalidOraclePrice";
    /** Invalid Stream Metadata */ SolanaAlignedProxyErrorCode["InvalidStreamMetadata"] = "InvalidStreamMetadata";
    /** Release amount has already been updated in this period */ SolanaAlignedProxyErrorCode["AmountAlreadyUpdated"] = "AmountAlreadyUpdated";
    /** All funds are already unlocked */ SolanaAlignedProxyErrorCode["AllFundsUnlocked"] = "AllFundsUnlocked";
})(SolanaAlignedProxyErrorCode || (SolanaAlignedProxyErrorCode = {}));
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/common/constants.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "BASE_FEE": (()=>BASE_FEE),
    "MAX_SAFE_UNIX_TIME_VALUE": (()=>MAX_SAFE_UNIX_TIME_VALUE),
    "WITHDRAW_AVAILABLE_AMOUNT": (()=>WITHDRAW_AVAILABLE_AMOUNT)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bn.js/lib/bn.js [app-client] (ecmascript)");
;
const MAX_SAFE_UNIX_TIME_VALUE = 8640000000000;
const BASE_FEE = 1009900; // Buffer to include usual fees when calculating stream amount
const WITHDRAW_AVAILABLE_AMOUNT = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]("18446744073709551615"); // Magical number to withdraw all available amount from a Contract
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/common/contractUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildStreamType": (()=>buildStreamType),
    "calculateUnlockedAmount": (()=>calculateUnlockedAmount),
    "decodeEndTime": (()=>decodeEndTime),
    "isAligned": (()=>isAligned),
    "isCliffCloseToDepositedAmount": (()=>isCliffCloseToDepositedAmount),
    "isCreateAlignedStreamData": (()=>isCreateAlignedStreamData),
    "isDynamicLock": (()=>isDynamicLock),
    "isPayment": (()=>isPayment),
    "isTokenLock": (()=>isTokenLock),
    "isVesting": (()=>isVesting)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bn.js/lib/bn.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <locals>");
;
;
;
const calculateUnlockedAmount = ({ depositedAmount, cliff, cliffAmount, end, currentTimestamp, lastRateChangeTime, period, amountPerPeriod, fundsUnlockedAtLastRateChange })=>{
    const deposited = depositedAmount;
    if (currentTimestamp < cliff) return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](0);
    if (currentTimestamp > end) return deposited;
    const savedUnlockedFunds = lastRateChangeTime === 0 ? cliffAmount : fundsUnlockedAtLastRateChange;
    const savedUnlockedFundsTime = lastRateChangeTime === 0 ? cliff : lastRateChangeTime;
    const streamed = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](Math.floor((currentTimestamp - savedUnlockedFundsTime) / period)).mul(amountPerPeriod).add(savedUnlockedFunds);
    return streamed.lt(deposited) ? streamed : deposited;
};
const isCliffCloseToDepositedAmount = (streamData)=>{
    return streamData.cliffAmount.gte(streamData.depositedAmount.sub(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](1)));
};
const isPayment = (streamData)=>{
    return streamData.canTopup;
};
const isVesting = (streamData)=>{
    return !streamData.canTopup && !isCliffCloseToDepositedAmount(streamData) && !isDynamicLock(streamData.minPrice, streamData.maxPrice, streamData.minPercentage, streamData.maxPercentage);
};
const isAligned = (stream)=>{
    return "minPrice" in stream && "maxPrice" in stream && "minPercentage" in stream && "maxPercentage" in stream;
};
const isCreateAlignedStreamData = (obj)=>{
    return "minPrice" in obj && "maxPrice" in obj && "minPercentage" in obj && "maxPercentage" in obj;
};
const isDynamicLock = (minPrice, maxPrice, minPercentage, maxPercentage)=>{
    return !!minPrice && !!maxPrice && minPrice > 0 && maxPrice - minPrice <= 1 && minPercentage === 0 && maxPercentage === 100;
};
const isTokenLock = (streamData)=>{
    return !streamData.canTopup && !streamData.automaticWithdrawal && !streamData.cancelableBySender && !streamData.cancelableByRecipient && !streamData.transferableBySender && !streamData.transferableByRecipient && (isCliffCloseToDepositedAmount(streamData) || isDynamicLock(streamData.minPrice, streamData.maxPrice, streamData.minPercentage, streamData.maxPercentage));
};
const buildStreamType = (streamData)=>{
    if (isVesting(streamData)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamType"].Vesting;
    }
    if (isTokenLock(streamData)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamType"].Lock;
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamType"].Payment;
};
const decodeEndTime = (endTime)=>{
    if (endTime.gt(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_SAFE_UNIX_TIME_VALUE"]))) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_SAFE_UNIX_TIME_VALUE"];
    }
    return endTime.toNumber();
};
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/common/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "calculateTotalAmountToDeposit": (()=>calculateTotalAmountToDeposit),
    "getBN": (()=>getBN),
    "getNumberFromBN": (()=>getNumberFromBN),
    "handleContractError": (()=>handleContractError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bn.js/lib/bn.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/types.js [app-client] (ecmascript)");
;
;
const FEE_PRECISION = 4;
const FEE_NORMALIZER = 10 ** FEE_PRECISION;
const FEE_MULTIPLIER = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](10 ** 6);
const getBN = (value, decimals)=>{
    const decimalPart = value - Math.trunc(value);
    const integerPart = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](Math.trunc(value));
    const decimalE = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](decimalPart * 1e9);
    const sum = integerPart.mul(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](1e9)).add(decimalE);
    const resultE = sum.mul(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](10).pow(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](decimals)));
    return resultE.div(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](1e9));
};
const getNumberFromBN = (value, decimals)=>value.gt(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](2 ** 53 - 1)) ? value.div(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](10 ** decimals)).toNumber() : value.toNumber() / 10 ** decimals;
const calculateTotalAmountToDeposit = (depositedAmount, totalFee)=>{
    const totalFeeNormalized = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](totalFee * FEE_NORMALIZER);
    return depositedAmount.mul(totalFeeNormalized.add(FEE_MULTIPLIER)).div(FEE_MULTIPLIER);
};
async function handleContractError(func, callback) {
    try {
        return await func();
    } catch (err) {
        if (err instanceof Error) {
            if (callback) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ContractError"](err, callback(err));
            }
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ContractError"](err);
        }
        throw err;
    }
}
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/constants.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AIRDROP_AMOUNT": (()=>AIRDROP_AMOUNT),
    "AIRDROP_TEST_TOKEN": (()=>AIRDROP_TEST_TOKEN),
    "ALIGNED_COMPUTE_LIMIT": (()=>ALIGNED_COMPUTE_LIMIT),
    "ALIGNED_PRECISION_FACTOR_POW": (()=>ALIGNED_PRECISION_FACTOR_POW),
    "ALIGNED_UNLOCKS_PROGRAM_ID": (()=>ALIGNED_UNLOCKS_PROGRAM_ID),
    "CONTRACT_DISCRIMINATOR": (()=>CONTRACT_DISCRIMINATOR),
    "CONTRACT_SEED": (()=>CONTRACT_SEED),
    "CREATE_PARAMS_PADDING": (()=>CREATE_PARAMS_PADDING),
    "DEFAULT_STREAMFLOW_FEE": (()=>DEFAULT_STREAMFLOW_FEE),
    "ESCROW_SEED": (()=>ESCROW_SEED),
    "FEES_METADATA_SEED": (()=>FEES_METADATA_SEED),
    "FEE_ORACLE_PUBLIC_KEY": (()=>FEE_ORACLE_PUBLIC_KEY),
    "ORIGINAL_CONTRACT_SENDER_OFFSET": (()=>ORIGINAL_CONTRACT_SENDER_OFFSET),
    "PARTNERS_SCHEMA": (()=>PARTNERS_SCHEMA),
    "PARTNER_ORACLE_PROGRAM_ID": (()=>PARTNER_ORACLE_PROGRAM_ID),
    "PARTNER_SCHEMA": (()=>PARTNER_SCHEMA),
    "PROGRAM_ID": (()=>PROGRAM_ID),
    "SOLANA_ERROR_MAP": (()=>SOLANA_ERROR_MAP),
    "SOLANA_ERROR_MATCH_REGEX": (()=>SOLANA_ERROR_MATCH_REGEX),
    "STREAMFLOW_TREASURY_PUBLIC_KEY": (()=>STREAMFLOW_TREASURY_PUBLIC_KEY),
    "STREAM_STRUCT_OFFSETS": (()=>STREAM_STRUCT_OFFSETS),
    "STREAM_STRUCT_OFFSET_CLOSED": (()=>STREAM_STRUCT_OFFSET_CLOSED),
    "STREAM_STRUCT_OFFSET_MINT": (()=>STREAM_STRUCT_OFFSET_MINT),
    "STREAM_STRUCT_OFFSET_RECIPIENT": (()=>STREAM_STRUCT_OFFSET_RECIPIENT),
    "STREAM_STRUCT_OFFSET_SENDER": (()=>STREAM_STRUCT_OFFSET_SENDER),
    "TEST_ORACLE_DISCRIMINATOR": (()=>TEST_ORACLE_DISCRIMINATOR),
    "TEST_ORACLE_SEED": (()=>TEST_ORACLE_SEED),
    "TX_FINALITY_CONFIRMED": (()=>TX_FINALITY_CONFIRMED),
    "WITHDRAWOR_PUBLIC_KEY": (()=>WITHDRAWOR_PUBLIC_KEY)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/@solana/web3.js/lib/index.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/buffer/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/types.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <locals>");
;
;
;
const TX_FINALITY_CONFIRMED = "confirmed";
const ORIGINAL_CONTRACT_SENDER_OFFSET = 9;
const STREAM_STRUCT_OFFSET_SENDER = 49;
const STREAM_STRUCT_OFFSET_RECIPIENT = 113;
const STREAM_STRUCT_OFFSET_MINT = 177;
const STREAM_STRUCT_OFFSET_CLOSED = 671;
const ALIGNED_PRECISION_FACTOR_POW = 9;
const STREAM_STRUCT_OFFSETS = {
    mint: STREAM_STRUCT_OFFSET_MINT,
    recipient: STREAM_STRUCT_OFFSET_RECIPIENT,
    sender: STREAM_STRUCT_OFFSET_SENDER,
    closed: STREAM_STRUCT_OFFSET_CLOSED
};
const CREATE_PARAMS_PADDING = 126;
const PROGRAM_ID = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Devnet]: "HqDGZjaVRXJ9MGRQEw7qDc2rAr6iH1n1kAQdCZaCMfMZ",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Mainnet]: "strmRqUCoQUgGUan5YhzUZa6KqdzwX5L6FpUxfmKg5m",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Testnet]: "HqDGZjaVRXJ9MGRQEw7qDc2rAr6iH1n1kAQdCZaCMfMZ",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Local]: "HqDGZjaVRXJ9MGRQEw7qDc2rAr6iH1n1kAQdCZaCMfMZ"
};
const ALIGNED_UNLOCKS_PROGRAM_ID = {
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Devnet]: "aSTRM2NKoKxNnkmLWk9sz3k74gKBk9t7bpPrTGxMszH",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Mainnet]: "aSTRM2NKoKxNnkmLWk9sz3k74gKBk9t7bpPrTGxMszH",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Testnet]: "aSTRM2NKoKxNnkmLWk9sz3k74gKBk9t7bpPrTGxMszH",
    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Local]: "aSTRM2NKoKxNnkmLWk9sz3k74gKBk9t7bpPrTGxMszH"
};
const ALIGNED_COMPUTE_LIMIT = 300000;
const CONTRACT_DISCRIMINATOR = [
    172,
    138,
    115,
    242,
    121,
    67,
    183,
    26
];
const TEST_ORACLE_DISCRIMINATOR = [
    198,
    49,
    63,
    134,
    232,
    251,
    168,
    28
];
const CONTRACT_SEED = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from("contract", "utf-8");
const ESCROW_SEED = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from("strm", "utf-8");
const TEST_ORACLE_SEED = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from("test-oracle", "utf-8");
const PARTNER_ORACLE_PROGRAM_ID = "pardpVtPjC8nLj1Dwncew62mUzfChdCX1EaoZe8oCAa";
const STREAMFLOW_TREASURY_PUBLIC_KEY = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"]("5SEpbdjFK5FxwTvfsGMXVQTD2v4M2c5tyRTxhdsPkgDw");
const WITHDRAWOR_PUBLIC_KEY = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"]("wdrwhnCv4pzW8beKsbPa4S2UDZrXenjg16KJdKSpb5u");
const FEE_ORACLE_PUBLIC_KEY = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"]("B743wFVk2pCYhV91cn287e1xY7f1vt4gdY48hhNiuQmT");
const AIRDROP_TEST_TOKEN = "Gssm3vfi8s65R31SBdmQRq6cKeYojGgup7whkw4VCiQj";
const FEES_METADATA_SEED = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from("strm_fees");
const DEFAULT_STREAMFLOW_FEE = 0.99;
const AIRDROP_AMOUNT = 1; // 1 SOL is the cap on the testnet
const PARTNER_SCHEMA = {
    struct: {
        pubkey: {
            array: {
                type: "u8",
                len: 32
            }
        },
        partner_fee: "f32",
        strm_fee: "f32"
    }
};
const PARTNERS_SCHEMA = {
    array: {
        type: PARTNER_SCHEMA
    }
};
const SOLANA_ERROR_MATCH_REGEX = /custom program error: (0x\d{2})/;
const SOLANA_ERROR_MAP = {
    0x60: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].AccountsNotWritable,
    0x61: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].InvalidMetadata,
    0x62: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].InvalidMetadataAccount,
    0x63: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].MetadataAccountMismatch,
    0x64: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].InvalidEscrowAccount,
    0x65: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].NotAssociated,
    0x66: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].MintMismatch,
    0x67: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].TransferNotAllowed,
    0x68: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].ContractClosed,
    0x69: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].InvalidTreasury,
    0x70: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].InvalidTimestamps,
    0x71: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].InvalidDepositConfiguration,
    0x72: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].AmountIsZero,
    0x73: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].AmountMoreThanAvailable,
    0x74: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].AmountAvailableIsZero,
    0x80: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].ArithmeticError,
    0x81: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].InvalidMetadataSize,
    0x82: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].UninitializedMetadata,
    0x83: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].Unauthorized,
    0x84: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].SelfTransfer,
    0x85: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].AlreadyPaused,
    0x86: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].NotPaused,
    0x87: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaContractErrorCode"].MetadataNotRentExempt,
    0x1770: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].Unauthorized,
    0x1771: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].ArithmeticError,
    0x1772: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].UnsupportedTokenExtensions,
    0x1773: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].PeriodTooShort,
    0x1774: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].InvalidTickSize,
    0x1775: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].InvalidPercentageBoundaries,
    0x1776: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].InvalidPriceBoundaries,
    0x1777: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].UnsupportedOracle,
    0x1778: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].InvalidOracleAccount,
    0x1779: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].InvalidOraclePrice,
    0x177a: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].InvalidStreamMetadata,
    0x177b: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].AmountAlreadyUpdated,
    0x177c: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["SolanaAlignedProxyErrorCode"].AllFundsUnlocked
};
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/types.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AlignedContract": (()=>AlignedContract),
    "Contract": (()=>Contract)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$contractUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/contractUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/constants.js [app-client] (ecmascript)");
;
;
;
;
class Contract {
    magic;
    version;
    createdAt;
    withdrawnAmount;
    canceledAt;
    end;
    lastWithdrawnAt;
    sender;
    senderTokens;
    recipient;
    recipientTokens;
    mint;
    escrowTokens;
    streamflowTreasury;
    streamflowTreasuryTokens;
    streamflowFeeTotal;
    streamflowFeeWithdrawn;
    streamflowFeePercent;
    partnerFeeTotal;
    partnerFeeWithdrawn;
    partnerFeePercent;
    partner;
    partnerTokens;
    start;
    depositedAmount;
    period;
    amountPerPeriod;
    cliff;
    cliffAmount;
    cancelableBySender;
    cancelableByRecipient;
    automaticWithdrawal;
    transferableBySender;
    transferableByRecipient;
    canTopup;
    name;
    withdrawalFrequency;
    closed;
    currentPauseStart;
    pauseCumulative;
    lastRateChangeTime;
    fundsUnlockedAtLastRateChange;
    type;
    isAligned;
    constructor(stream){
        this.magic = stream.magic.toNumber();
        this.version = stream.version.toNumber();
        this.createdAt = stream.createdAt.toNumber();
        this.withdrawnAmount = stream.withdrawnAmount;
        this.canceledAt = stream.canceledAt.toNumber();
        // for aligned contracts end time can be an invalid timeValue
        this.end = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$contractUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeEndTime"])(stream.end);
        this.lastWithdrawnAt = stream.lastWithdrawnAt.toNumber();
        this.sender = stream.sender.toBase58();
        this.senderTokens = stream.senderTokens.toBase58();
        this.recipient = stream.recipient.toBase58();
        this.recipientTokens = stream.recipientTokens.toBase58();
        this.mint = stream.mint.toBase58();
        this.escrowTokens = stream.escrowTokens.toBase58();
        this.streamflowTreasury = stream.streamflowTreasury.toBase58();
        this.streamflowTreasuryTokens = stream.streamflowTreasuryTokens.toBase58();
        this.streamflowFeeTotal = stream.streamflowFeeTotal;
        this.streamflowFeeWithdrawn = stream.streamflowFeeWithdrawn;
        this.streamflowFeePercent = stream.streamflowFeePercent.toNumber();
        this.partnerFeeTotal = stream.partnerFeeTotal;
        this.partnerFeeWithdrawn = stream.partnerFeeWithdrawn;
        this.partnerFeePercent = stream.partnerFeePercent.toNumber();
        this.partner = stream.partner.toBase58();
        this.partnerTokens = stream.partnerTokens?.toBase58();
        this.start = stream.start.toNumber();
        this.depositedAmount = stream.depositedAmount;
        this.period = stream.period.toNumber();
        this.amountPerPeriod = stream.amountPerPeriod;
        this.cliff = stream.cliff.toNumber();
        this.cliffAmount = stream.cliffAmount;
        this.cancelableBySender = stream.cancelableBySender;
        this.cancelableByRecipient = stream.cancelableByRecipient;
        this.automaticWithdrawal = stream.automaticWithdrawal;
        this.transferableBySender = stream.transferableBySender;
        this.transferableByRecipient = stream.transferableByRecipient;
        this.canTopup = stream.canTopup;
        this.name = stream.name;
        this.withdrawalFrequency = stream.withdrawFrequency.toNumber();
        this.closed = stream.closed;
        this.currentPauseStart = stream.currentPauseStart.toNumber();
        this.pauseCumulative = stream.pauseCumulative;
        this.lastRateChangeTime = stream.lastRateChangeTime.toNumber();
        this.fundsUnlockedAtLastRateChange = stream.fundsUnlockedAtLastRateChange;
        this.type = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$contractUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildStreamType"])(this);
        this.isAligned = false;
    }
    unlocked(currentTimestamp) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$contractUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["calculateUnlockedAmount"])({
            ...this,
            currentTimestamp
        });
    }
    remaining(decimals) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNumberFromBN"])(this.depositedAmount.sub(this.withdrawnAmount), decimals);
    }
}
class AlignedContract extends Contract {
    minPrice;
    maxPrice;
    minPercentage;
    maxPercentage;
    tickSize;
    proxyAddress;
    priceOracle;
    oracleType;
    initialAmountPerPeriod;
    initialPrice;
    lastPrice;
    lastAmountUpdateTime;
    initialNetAmount;
    constructor(stream, alignedProxy){
        super(stream);
        this.minPrice = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNumberFromBN"])(alignedProxy.minPrice, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]);
        this.maxPrice = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNumberFromBN"])(alignedProxy.maxPrice, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]);
        this.minPercentage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNumberFromBN"])(alignedProxy.minPercentage, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]);
        this.maxPercentage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNumberFromBN"])(alignedProxy.maxPercentage, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]);
        this.oracleType = Object.keys(alignedProxy.priceOracleType).find((key)=>!!key) || "none";
        this.tickSize = alignedProxy.tickSize.toNumber();
        this.priceOracle = this.oracleType === "none" ? undefined : alignedProxy.priceOracle.toBase58();
        this.sender = alignedProxy.sender.toBase58();
        this.canceledAt = alignedProxy.streamCanceledTime.toNumber();
        this.proxyAddress = stream.sender.toBase58();
        this.initialAmountPerPeriod = alignedProxy.initialAmountPerPeriod;
        this.initialPrice = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNumberFromBN"])(alignedProxy.initialPrice, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]);
        this.lastPrice = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNumberFromBN"])(alignedProxy.lastPrice, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]);
        this.lastAmountUpdateTime = alignedProxy.lastAmountUpdateTime.toNumber();
        this.initialNetAmount = alignedProxy.initialNetAmount;
        // need to call this again since minPrice and maxPrice are used in determining the type
        this.type = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$contractUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildStreamType"])(this);
        this.isAligned = true;
    }
}
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/types.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$contractUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/contractUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/types.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/layout.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createStreamLayout": (()=>createStreamLayout),
    "createUncheckedStreamLayout": (()=>createUncheckedStreamLayout),
    "encodeUpdateStream": (()=>encodeUpdateStream),
    "partnerLayout": (()=>partnerLayout),
    "streamLayout": (()=>streamLayout),
    "topupStreamLayout": (()=>topupStreamLayout),
    "withdrawStreamLayout": (()=>withdrawStreamLayout)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@solana/buffer-layout/lib/Layout.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/constants.js [app-client] (ecmascript)");
;
;
const streamLayout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.struct([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "magic"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(1, "version"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "created_at"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "withdrawn_amount"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "canceled_at"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "end_time"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "last_withdrawn_at"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "sender"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "sender_tokens"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "recipient"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "recipient_tokens"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "mint"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "escrow_tokens"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "streamflow_treasury"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "streamflow_treasury_tokens"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "streamflow_fee_total"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "streamflow_fee_withdrawn"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.f32("streamflow_fee_percent"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "partner"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "partner_tokens"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "partner_fee_total"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "partner_fee_withdrawn"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.f32("partner_fee_percent"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "start_time"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "net_amount_deposited"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "period"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "amount_per_period"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "cliff"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "cliff_amount"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("cancelable_by_sender"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("cancelable_by_recipient"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("automatic_withdrawal"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("transferable_by_sender"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("transferable_by_recipient"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("can_topup"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(64, "stream_name"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "withdraw_frequency"),
    // Unused, kept for backward compatibility™
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(4, "ghost"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("pausable"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("can_update_rate"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(4, "create_stream_params_padding_length"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.seq(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CREATE_PARAMS_PADDING"], "create_params_padding"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("closed"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "current_pause_start"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "pause_cumulative"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "last_rate_change_time"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "funds_unlocked_at_last_rate_change")
]);
const partnerLayout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.struct([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "pubkey"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.f32("partner_fee"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.f32("strm_fee")
]);
const createStreamLayout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.struct([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "start_time"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "net_amount_deposited"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "period"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "amount_per_period"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "cliff"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "cliff_amount"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("cancelable_by_sender"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("cancelable_by_recipient"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("automatic_withdrawal"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("transferable_by_sender"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("transferable_by_recipient"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("can_topup"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(64, "stream_name"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "withdraw_frequency"),
    // discriminator for optional field
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("_pausable_discriminator"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("pausable"),
    // discriminator for optional field
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("_can_update_rate_discriminator"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("can_update_rate")
]);
const createUncheckedStreamLayout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.struct([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "start_time"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "net_amount_deposited"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "period"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "amount_per_period"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "cliff"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "cliff_amount"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("cancelable_by_sender"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("cancelable_by_recipient"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("automatic_withdrawal"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("transferable_by_sender"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("transferable_by_recipient"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("can_topup"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(64, "stream_name"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "withdraw_frequency"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "recipient"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(32, "partner"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("pausable"),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("can_update_rate")
]);
const withdrawStreamLayout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.struct([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "amount")
]);
const encodeUpdateStream = (values, data)=>{
    const structs = [];
    if (values.enable_automatic_withdrawal) {
        structs.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("enable_automatic_withdrawal_exists"));
        structs.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("enable_automatic_withdrawal"));
    } else {
        structs.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("enable_automatic_withdrawal_exists"));
    }
    if (values.withdraw_frequency) {
        structs.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("withdraw_frequency_exists"));
        structs.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "withdraw_frequency"));
    } else {
        structs.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("withdraw_frequency_exists"));
    }
    if (values.amount_per_period) {
        structs.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("amount_per_period_exists"));
        structs.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "amount_per_period"));
    } else {
        structs.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.u8("amount_per_period_exists"));
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.struct(structs).encode({
        enable_automatic_withdrawal_exists: values.enable_automatic_withdrawal ? 1 : 0,
        enable_automatic_withdrawal: values.enable_automatic_withdrawal ?? 0,
        withdraw_frequency_exists: values.withdraw_frequency ? 1 : 0,
        withdraw_frequency: values.withdraw_frequency ?? 0,
        amount_per_period_exists: values.amount_per_period ? 1 : 0,
        amount_per_period: values.amount_per_period ?? 0
    }, data);
};
const topupStreamLayout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.struct([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$buffer$2d$layout$2f$lib$2f$Layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.blob(8, "amount")
]);
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/lib/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decodeStream": (()=>decodeStream),
    "extractSolanaErrorCode": (()=>extractSolanaErrorCode),
    "sendAndConfirmStreamRawTransaction": (()=>sendAndConfirmStreamRawTransaction),
    "signAllTransactionWithRecipients": (()=>signAllTransactionWithRecipients)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/@solana/web3.js/lib/index.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/solana/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bn.js/lib/bn.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/layout.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/solana/utils.js [app-client] (ecmascript)");
;
;
;
;
;
const decoder = new TextDecoder("utf-8");
const LE = "le"; //little endian
const decodeStream = (buf)=>{
    const raw = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["streamLayout"].decode(buf);
    return {
        magic: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.magic, LE),
        version: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.version, LE),
        createdAt: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.created_at, LE),
        withdrawnAmount: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.withdrawn_amount, LE),
        canceledAt: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.canceled_at, LE),
        end: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.end_time, LE),
        lastWithdrawnAt: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.last_withdrawn_at, LE),
        sender: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.sender),
        senderTokens: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.sender_tokens),
        recipient: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.recipient),
        recipientTokens: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.recipient_tokens),
        mint: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.mint),
        escrowTokens: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.escrow_tokens),
        streamflowTreasury: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.streamflow_treasury),
        streamflowTreasuryTokens: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.streamflow_treasury_tokens),
        streamflowFeeTotal: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.streamflow_fee_total, LE),
        streamflowFeeWithdrawn: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.streamflow_fee_withdrawn, LE),
        streamflowFeePercent: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.streamflow_fee_percent, LE),
        partnerFeeTotal: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.partner_fee_total, LE),
        partnerFeeWithdrawn: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.partner_fee_withdrawn, LE),
        partnerFeePercent: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.partner_fee_percent, LE),
        partner: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.partner),
        partnerTokens: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](raw.partner_tokens),
        start: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.start_time, LE),
        depositedAmount: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.net_amount_deposited, LE),
        period: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.period, LE),
        amountPerPeriod: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.amount_per_period, LE),
        cliff: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.cliff, LE),
        cliffAmount: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.cliff_amount, LE),
        cancelableBySender: Boolean(raw.cancelable_by_sender),
        cancelableByRecipient: Boolean(raw.cancelable_by_recipient),
        automaticWithdrawal: Boolean(raw.automatic_withdrawal),
        transferableBySender: Boolean(raw.transferable_by_sender),
        transferableByRecipient: Boolean(raw.transferable_by_recipient),
        canTopup: Boolean(raw.can_topup),
        name: decoder.decode(raw.stream_name),
        withdrawFrequency: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.withdraw_frequency, LE),
        closed: Boolean(raw.closed),
        currentPauseStart: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.current_pause_start, LE),
        pauseCumulative: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.pause_cumulative, LE),
        lastRateChangeTime: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.last_rate_change_time, LE),
        fundsUnlockedAtLastRateChange: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](raw.funds_unlocked_at_last_rate_change, LE)
    };
};
async function signAllTransactionWithRecipients(sender, items) {
    const isKeypair = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSignerKeypair"])(sender);
    const isWallet = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSignerWallet"])(sender);
    if (isKeypair) {
        return items.map((t)=>{
            t.tx.sign([
                sender
            ]);
            return {
                tx: t.tx,
                recipient: t.recipient
            };
        });
    } else if (isWallet) {
        const signedTxs = await sender.signAllTransactions(items.map((t)=>t.tx));
        return items.map((item, index)=>({
                ...item,
                tx: signedTxs[index]
            }));
    } else {
        // If signer is not passed
        return [];
    }
}
async function sendAndConfirmStreamRawTransaction(connection, batchItem, confirmationParams, throttleParams) {
    try {
        const completedTxSignature = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["executeTransaction"])(connection, batchItem.tx, confirmationParams, throttleParams);
        return {
            ...batchItem,
            signature: completedTxSignature
        };
    } catch (error) {
        throw {
            recipient: batchItem.recipient,
            error
        };
    }
}
function extractSolanaErrorCode(errorText, logs) {
    let match = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SOLANA_ERROR_MATCH_REGEX"].exec(errorText);
    if (!match && logs) {
        for (const logLine of logs){
            match = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SOLANA_ERROR_MATCH_REGEX"].exec(logLine);
            if (match !== null) {
                break;
            }
        }
    }
    if (!match) {
        return null;
    }
    const errorCode = Number(match[1]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SOLANA_ERROR_MAP"][errorCode] || null;
}
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/instructions.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "cancelStreamInstruction": (()=>cancelStreamInstruction),
    "createStreamInstruction": (()=>createStreamInstruction),
    "createUncheckedStreamInstruction": (()=>createUncheckedStreamInstruction),
    "topupStreamInstruction": (()=>topupStreamInstruction),
    "transferStreamInstruction": (()=>transferStreamInstruction),
    "updateStreamInstruction": (()=>updateStreamInstruction),
    "withdrawStreamInstruction": (()=>withdrawStreamInstruction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/buffer/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/@solana/web3.js/lib/index.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/layout.js [app-client] (ecmascript)");
;
;
;
const sha256 = {
    digest: async (data)=>{
        const dataBuffer = new TextEncoder().encode(data);
        const hashBuffer = await globalThis.crypto.subtle.digest("SHA-256", dataBuffer);
        return new Uint8Array(hashBuffer);
    }
};
const createStreamInstruction = async (data, programId, accounts)=>{
    const keys = [
        {
            pubkey: accounts.sender,
            isSigner: true,
            isWritable: true
        },
        {
            pubkey: accounts.senderTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.recipient,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.metadata,
            isSigner: true,
            isWritable: true
        },
        {
            pubkey: accounts.escrowTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.recipientTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.streamflowTreasury,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.streamflowTreasuryTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.withdrawor,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.partner,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.partnerTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.mint,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.feeOracle,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.rent,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.timelockProgram,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.tokenProgram,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.associatedTokenProgram,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.systemProgram,
            isSigner: false,
            isWritable: false
        }
    ];
    let bufferData = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.createStreamLayout.span);
    const encodedUIntArray = new TextEncoder().encode(data.name);
    const streamNameBuffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(64).fill(encodedUIntArray, 0, encodedUIntArray.byteLength);
    const decodedData = {
        start_time: data.start.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        net_amount_deposited: data.depositedAmount.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        period: data.period.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        amount_per_period: data.amountPerPeriod.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        cliff: data.cliff.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        cliff_amount: data.cliffAmount.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        cancelable_by_sender: Number(data.cancelableBySender),
        cancelable_by_recipient: Number(data.cancelableByRecipient),
        automatic_withdrawal: Number(data.automaticWithdrawal),
        transferable_by_sender: Number(data.transferableBySender),
        transferable_by_recipient: Number(data.transferableByRecipient),
        can_topup: Number(data.canTopup),
        _pausable_discriminator: 1,
        can_update_rate: Number(data.canUpdateRate),
        _can_update_rate_discriminator: 1,
        pausable: Number(data.canPause),
        stream_name: streamNameBuffer,
        withdraw_frequency: data.withdrawFrequency.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8)
    };
    const encodeLength = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.createStreamLayout.encode(decodedData, bufferData);
    bufferData = bufferData.slice(0, encodeLength);
    bufferData = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].concat([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(await sha256.digest("global:create")).slice(0, 8),
        bufferData,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(10)
    ]);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionInstruction"]({
        keys,
        programId,
        data: bufferData
    });
};
const createUncheckedStreamInstruction = async (data, programId, accounts)=>{
    const keys = [
        {
            pubkey: accounts.sender,
            isSigner: true,
            isWritable: true
        },
        {
            pubkey: accounts.senderTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.metadata,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.escrowTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.withdrawor,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: accounts.mint,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.feeOracle,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.rent,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.timelockProgram,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.tokenProgram,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: accounts.systemProgram,
            isSigner: false,
            isWritable: false
        }
    ];
    if (accounts.payer) {
        keys.unshift({
            pubkey: accounts.payer,
            isSigner: true,
            isWritable: true
        });
    }
    let bufferData = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.createUncheckedStreamLayout.span);
    const encodedUIntArray = new TextEncoder().encode(data.name);
    const streamNameBuffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(64).fill(encodedUIntArray, 0, encodedUIntArray.byteLength);
    const decodedData = {
        start_time: data.start.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        net_amount_deposited: data.depositedAmount.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        period: data.period.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        amount_per_period: data.amountPerPeriod.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        cliff: data.cliff.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        cliff_amount: data.cliffAmount.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        cancelable_by_sender: Number(data.cancelableBySender),
        cancelable_by_recipient: Number(data.cancelableByRecipient),
        automatic_withdrawal: Number(data.automaticWithdrawal),
        transferable_by_sender: Number(data.transferableBySender),
        transferable_by_recipient: Number(data.transferableByRecipient),
        can_topup: Number(data.canTopup),
        stream_name: streamNameBuffer,
        withdraw_frequency: data.withdrawFrequency.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8),
        recipient: data.recipient.toBuffer(),
        partner: data.partner.toBuffer(),
        pausable: Number(data.canPause),
        can_update_rate: Number(data.canUpdateRate)
    };
    const encodeLength = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.createUncheckedStreamLayout.encode(decodedData, bufferData);
    bufferData = bufferData.slice(0, encodeLength);
    const digest = accounts.payer ? await sha256.digest("global:create_unchecked_with_payer") : await sha256.digest("global:create_unchecked");
    bufferData = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].concat([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(digest).slice(0, 8),
        bufferData,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(10)
    ]);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionInstruction"]({
        keys,
        programId,
        data: bufferData
    });
};
const withdrawStreamInstruction = async (amount, programId, { authority, recipient, recipientTokens, metadata, escrowTokens, streamflowTreasury, streamflowTreasuryTokens, partner, partnerTokens, mint, tokenProgram })=>{
    const keys = [
        {
            pubkey: authority,
            isSigner: true,
            isWritable: true
        },
        {
            pubkey: recipient,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: recipientTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: metadata,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: escrowTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: streamflowTreasury,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: streamflowTreasuryTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: partner,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: partnerTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: mint,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: tokenProgram,
            isSigner: false,
            isWritable: false
        }
    ];
    let data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.withdrawStreamLayout.span);
    const decodedData = {
        amount: amount.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8)
    };
    const encodeLength = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.withdrawStreamLayout.encode(decodedData, data);
    data = data.slice(0, encodeLength);
    data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].concat([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(await sha256.digest("global:withdraw")).slice(0, 8),
        data,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(10)
    ]);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionInstruction"]({
        keys,
        programId,
        data
    });
};
const updateStreamInstruction = async (params, programId, { authority, metadata, withdrawor, systemProgram })=>{
    const keys = [
        {
            pubkey: authority,
            isSigner: true,
            isWritable: true
        },
        {
            pubkey: metadata,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: withdrawor,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: systemProgram,
            isSigner: false,
            isWritable: false
        }
    ];
    let data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(100);
    const decodedData = {
        enable_automatic_withdrawal: Number(params.enableAutomaticWithdrawal),
        withdraw_frequency: params.withdrawFrequency ? params.withdrawFrequency.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8) : undefined,
        amount_per_period: params.amountPerPeriod ? params.amountPerPeriod.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8) : undefined
    };
    const encodeLength = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encodeUpdateStream(decodedData, data);
    data = data.slice(0, encodeLength);
    data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].concat([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(await sha256.digest("global:update")).slice(0, 8),
        data,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(20)
    ]);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionInstruction"]({
        keys: keys,
        programId: programId,
        data: data
    });
};
const cancelStreamInstruction = async (programId, { authority, sender, senderTokens, recipient, recipientTokens, metadata, escrowTokens, streamflowTreasury, streamflowTreasuryTokens, partner, partnerTokens, mint, tokenProgram })=>{
    const keys = [
        {
            pubkey: authority,
            isSigner: true,
            isWritable: false
        },
        {
            pubkey: sender,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: senderTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: recipient,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: recipientTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: metadata,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: escrowTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: streamflowTreasury,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: streamflowTreasuryTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: partner,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: partnerTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: mint,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: tokenProgram,
            isSigner: false,
            isWritable: false
        }
    ];
    const data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].concat([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(await sha256.digest("global:cancel")).slice(0, 8),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(10)
    ]);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionInstruction"]({
        keys,
        programId,
        data
    });
};
const transferStreamInstruction = async (programId, { authority, newRecipient, newRecipientTokens, metadata, mint, rent, tokenProgram, associatedTokenProgram, systemProgram })=>{
    const keys = [
        {
            pubkey: authority,
            isSigner: true,
            isWritable: true
        },
        {
            pubkey: newRecipient,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: newRecipientTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: metadata,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: mint,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: rent,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: tokenProgram,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: associatedTokenProgram,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: systemProgram,
            isSigner: false,
            isWritable: false
        }
    ];
    const data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].concat([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(await sha256.digest("global:transfer_recipient")).slice(0, 8),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(10)
    ]);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionInstruction"]({
        keys,
        programId,
        data
    });
};
const topupStreamInstruction = async (amount, programId, { sender, senderTokens, metadata, escrowTokens, streamflowTreasury, streamflowTreasuryTokens, partner, partnerTokens, mint, tokenProgram, withdrawor, systemProgram })=>{
    const keys = [
        {
            pubkey: sender,
            isSigner: true,
            isWritable: true
        },
        {
            pubkey: senderTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: metadata,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: escrowTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: streamflowTreasury,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: streamflowTreasuryTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: withdrawor,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: partner,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: partnerTokens,
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: mint,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: tokenProgram,
            isSigner: false,
            isWritable: false
        },
        {
            pubkey: systemProgram,
            isSigner: false,
            isWritable: false
        }
    ];
    let data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.topupStreamLayout.span);
    const decodedData = {
        amount: amount.toArrayLike(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"], "le", 8)
    };
    const encodeLength = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$layout$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.topupStreamLayout.encode(decodedData, data);
    data = data.slice(0, encodeLength);
    data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].concat([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(await sha256.digest("global:topup")).slice(0, 8),
        data,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].alloc(10)
    ]);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionInstruction"]({
        keys,
        programId,
        data
    });
};
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/common/BaseStreamClient.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "BaseStreamClient": (()=>BaseStreamClient)
});
class BaseStreamClient {
    /**
     * Returns total fee percent, streamflow fees + partner fees
     * @param getFeesData structure with address for which we need to derive fee, either sender or partner usually
     * @param chainSpecificParams additional parameters required by chain client
     * @returns fee as floating number, so if fee is 0.99%, it will return 0.99
     */ async getTotalFee(getFeesData, chainSpecificParams) {
        const fees = await this.getFees(getFeesData, chainSpecificParams);
        if (fees) {
            return fees.partnerFee + fees.streamflowFee;
        }
        return this.getDefaultStreamflowFee(chainSpecificParams);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    extractErrorCode(err) {
        return null;
    }
}
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/descriptor/idl/streamflow_aligned_unlocks.json (json)": ((__turbopack_context__) => {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_export_value__(JSON.parse("{\"address\":\"aSTRM2NKoKxNnkmLWk9sz3k74gKBk9t7bpPrTGxMszH\",\"metadata\":{\"name\":\"streamflow_aligned_unlocks\",\"version\":\"1.1.1\",\"spec\":\"0.1.0\",\"description\":\"Proxy to update unlock amount within Streamflow vesting protocol according to Token performance and other metrics\"},\"instructions\":[{\"name\":\"cancel\",\"discriminator\":[232,219,223,41,219,236,220,190],\"accounts\":[{\"name\":\"sender\",\"writable\":true,\"signer\":true},{\"name\":\"sender_tokens\",\"docs\":[\"Associated token account address of `sender`.\"],\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"account\",\"path\":\"sender\"},{\"kind\":\"account\",\"path\":\"token_program\"},{\"kind\":\"account\",\"path\":\"mint\"}],\"program\":{\"kind\":\"const\",\"value\":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{\"name\":\"recipient\",\"writable\":true},{\"name\":\"recipient_tokens\",\"docs\":[\"CHECK; Associated token account address of `recipient`.\"],\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"account\",\"path\":\"recipient\"},{\"kind\":\"account\",\"path\":\"token_program\"},{\"kind\":\"account\",\"path\":\"mint\"}],\"program\":{\"kind\":\"const\",\"value\":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{\"name\":\"proxy_metadata\",\"docs\":[\"Proxy Contract\"],\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"const\",\"value\":[99,111,110,116,114,97,99,116]},{\"kind\":\"account\",\"path\":\"stream_metadata\"}]}},{\"name\":\"proxy_tokens\",\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"account\",\"path\":\"proxy_metadata\"},{\"kind\":\"account\",\"path\":\"token_program\"},{\"kind\":\"account\",\"path\":\"mint\"}],\"program\":{\"kind\":\"const\",\"value\":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{\"name\":\"stream_metadata\",\"writable\":true},{\"name\":\"escrow_tokens\",\"writable\":true},{\"name\":\"streamflow_treasury\",\"writable\":true},{\"name\":\"streamflow_treasury_tokens\",\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"account\",\"path\":\"streamflow_treasury\"},{\"kind\":\"account\",\"path\":\"token_program\"},{\"kind\":\"account\",\"path\":\"mint\"}],\"program\":{\"kind\":\"const\",\"value\":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{\"name\":\"partner\",\"writable\":true},{\"name\":\"partner_tokens\",\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"account\",\"path\":\"partner\"},{\"kind\":\"account\",\"path\":\"token_program\"},{\"kind\":\"account\",\"path\":\"mint\"}],\"program\":{\"kind\":\"const\",\"value\":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{\"name\":\"mint\",\"docs\":[\"The SPL token mint account.\"],\"writable\":true},{\"name\":\"streamflow_program\",\"address\":\"strmRqUCoQUgGUan5YhzUZa6KqdzwX5L6FpUxfmKg5m\"},{\"name\":\"token_program\",\"docs\":[\"The SPL program needed in case an associated account\",\"for the new recipient is being created.\"]}],\"args\":[]},{\"name\":\"change_oracle\",\"discriminator\":[177,227,230,103,13,72,141,248],\"accounts\":[{\"name\":\"sender\",\"writable\":true,\"signer\":true},{\"name\":\"proxy_metadata\",\"docs\":[\"Proxy Contract\"],\"writable\":true},{\"name\":\"new_price_oracle\"}],\"args\":[{\"name\":\"params\",\"type\":{\"defined\":{\"name\":\"ChangeOracleParams\"}}}]},{\"name\":\"create\",\"discriminator\":[24,30,200,40,5,28,7,119],\"accounts\":[{\"name\":\"payer\",\"docs\":[\"Rent payer\"],\"writable\":true,\"signer\":true},{\"name\":\"sender\",\"writable\":true,\"signer\":true},{\"name\":\"sender_tokens\",\"docs\":[\"Associated token account address of `payer`.\"],\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"account\",\"path\":\"sender\"},{\"kind\":\"account\",\"path\":\"token_program\"},{\"kind\":\"account\",\"path\":\"mint\"}],\"program\":{\"kind\":\"const\",\"value\":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{\"name\":\"recipient\"},{\"name\":\"recipient_tokens\",\"pda\":{\"seeds\":[{\"kind\":\"account\",\"path\":\"recipient\"},{\"kind\":\"account\",\"path\":\"token_program\"},{\"kind\":\"account\",\"path\":\"mint\"}],\"program\":{\"kind\":\"const\",\"value\":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{\"name\":\"proxy_metadata\",\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"const\",\"value\":[99,111,110,116,114,97,99,116]},{\"kind\":\"account\",\"path\":\"stream_metadata\"}]}},{\"name\":\"proxy_tokens\",\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"account\",\"path\":\"proxy_metadata\"},{\"kind\":\"account\",\"path\":\"token_program\"},{\"kind\":\"account\",\"path\":\"mint\"}],\"program\":{\"kind\":\"const\",\"value\":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{\"name\":\"stream_metadata\",\"writable\":true,\"signer\":true},{\"name\":\"escrow_tokens\",\"writable\":true},{\"name\":\"withdrawor\",\"writable\":true},{\"name\":\"partner\"},{\"name\":\"mint\"},{\"name\":\"fee_oracle\"},{\"name\":\"price_oracle\"},{\"name\":\"rent\",\"address\":\"SysvarRent111111111111111111111111111111111\"},{\"name\":\"streamflow_program\",\"address\":\"strmRqUCoQUgGUan5YhzUZa6KqdzwX5L6FpUxfmKg5m\"},{\"name\":\"token_program\"},{\"name\":\"associated_token_program\",\"address\":\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"},{\"name\":\"system_program\",\"address\":\"11111111111111111111111111111111\"}],\"args\":[{\"name\":\"ix\",\"type\":{\"defined\":{\"name\":\"CreateParams\"}}}]},{\"name\":\"create_test_oracle\",\"discriminator\":[183,110,4,11,131,220,84,12],\"accounts\":[{\"name\":\"creator\",\"writable\":true,\"signer\":true},{\"name\":\"mint\"},{\"name\":\"test_oracle\",\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"const\",\"value\":[116,101,115,116,45,111,114,97,99,108,101]},{\"kind\":\"account\",\"path\":\"mint\"},{\"kind\":\"account\",\"path\":\"creator\"}]}},{\"name\":\"system_program\",\"address\":\"11111111111111111111111111111111\"}],\"args\":[{\"name\":\"params\",\"type\":{\"defined\":{\"name\":\"CreateTestOracleParams\"}}}]},{\"name\":\"set_test_oracle_authority\",\"discriminator\":[26,66,233,99,38,118,181,247],\"accounts\":[{\"name\":\"authority\",\"writable\":true,\"signer\":true},{\"name\":\"test_oracle\",\"writable\":true},{\"name\":\"new_authority\"}],\"args\":[]},{\"name\":\"update_amount\",\"discriminator\":[212,178,69,133,251,180,212,71],\"accounts\":[{\"name\":\"authority\",\"docs\":[\"Wallet authorised to call this method\"],\"writable\":true,\"signer\":true},{\"name\":\"proxy_metadata\",\"writable\":true,\"pda\":{\"seeds\":[{\"kind\":\"const\",\"value\":[99,111,110,116,114,97,99,116]},{\"kind\":\"account\",\"path\":\"stream_metadata\"}]}},{\"name\":\"stream_metadata\",\"writable\":true},{\"name\":\"withdrawor\",\"writable\":true},{\"name\":\"price_oracle\",\"relations\":[\"proxy_metadata\"]},{\"name\":\"streamflow_program\",\"address\":\"strmRqUCoQUgGUan5YhzUZa6KqdzwX5L6FpUxfmKg5m\"},{\"name\":\"system_program\",\"address\":\"11111111111111111111111111111111\"}],\"args\":[]},{\"name\":\"update_test_oracle\",\"discriminator\":[158,147,215,74,34,123,80,76],\"accounts\":[{\"name\":\"authority\",\"writable\":true,\"signer\":true},{\"name\":\"test_oracle\",\"writable\":true}],\"args\":[{\"name\":\"params\",\"type\":{\"defined\":{\"name\":\"UpdateTestOracleParams\"}}}]}],\"accounts\":[{\"name\":\"Contract\",\"discriminator\":[172,138,115,242,121,67,183,26]},{\"name\":\"TestOracle\",\"discriminator\":[198,49,63,134,232,251,168,28]}],\"errors\":[{\"code\":6000,\"name\":\"Unauthorized\",\"msg\":\"Authority does not have permission for this action\"},{\"code\":6001,\"name\":\"ArithmeticError\",\"msg\":\"Arithmetic error\"},{\"code\":6002,\"name\":\"UnsupportedTokenExtensions\",\"msg\":\"Mint has unsupported Token Extensions\"},{\"code\":6003,\"name\":\"PeriodTooShort\",\"msg\":\"Provided period is too short, should be equal or more than 30 seconds\"},{\"code\":6004,\"name\":\"InvalidTickSize\",\"msg\":\"Provided percentage tick size is invalid\"},{\"code\":6005,\"name\":\"InvalidPercentageBoundaries\",\"msg\":\"Provided percentage bounds are invalid\"},{\"code\":6006,\"name\":\"InvalidPriceBoundaries\",\"msg\":\"Provided price bounds are invalid\"},{\"code\":6007,\"name\":\"UnsupportedOracle\",\"msg\":\"Unsupported price oracle\"},{\"code\":6008,\"name\":\"InvalidOracleAccount\",\"msg\":\"Invalid oracle account\"},{\"code\":6009,\"name\":\"InvalidOraclePrice\",\"msg\":\"Invalid oracle price\"},{\"code\":6010,\"name\":\"InvalidStreamMetadata\",\"msg\":\"Invalid Stream Metadata\"},{\"code\":6011,\"name\":\"AmountAlreadyUpdated\",\"msg\":\"Release amount has already been updated in this period\"},{\"code\":6012,\"name\":\"AllFundsUnlocked\",\"msg\":\"All funds are already unlocked\"}],\"types\":[{\"name\":\"ChangeOracleParams\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"oracle_type\",\"type\":{\"defined\":{\"name\":\"OracleType\"}}}]}},{\"name\":\"Contract\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"bump\",\"docs\":[\"Bump Seed used to sign transactions\"],\"type\":\"u8\"},{\"name\":\"sender\",\"docs\":[\"Original Contract sender\"],\"type\":\"pubkey\"},{\"name\":\"sender_tokens\",\"docs\":[\"Original Contract sender tokens address\"],\"type\":\"pubkey\"},{\"name\":\"stream\",\"docs\":[\"Vesting Stream address\"],\"type\":\"pubkey\"},{\"name\":\"price_oracle_type\",\"docs\":[\"Type of the Oracle used to derive Token Price\"],\"type\":{\"defined\":{\"name\":\"OracleType\"}}},{\"name\":\"price_oracle\",\"docs\":[\"Address of the Price Oracle\"],\"type\":\"pubkey\"},{\"name\":\"min_price\",\"docs\":[\"Min price boundary\"],\"type\":\"u64\"},{\"name\":\"max_price\",\"docs\":[\"Max price boundary\"],\"type\":\"u64\"},{\"name\":\"min_percentage\",\"docs\":[\"Min percentage boundary, can be 0 that equals 1 Raw Token\"],\"type\":\"u64\"},{\"name\":\"max_percentage\",\"docs\":[\"Max percentage boundary\"],\"type\":\"u64\"},{\"name\":\"tick_size\",\"docs\":[\"Ticket size for percentage boundaries\"],\"type\":\"u64\"},{\"name\":\"start_time\",\"docs\":[\"unlock_start from Stream contract for our worker to be able to fetch it in one call with the proxy contract\"],\"type\":\"u64\"},{\"name\":\"end_time\",\"docs\":[\"Copy end_time from Stream contract for our worker to be able to fetch it in one call with the proxy contract\"],\"type\":\"u64\"},{\"name\":\"period\",\"docs\":[\"Copy period from Stream contract for our worker to be able to fetch it in one call with the proxy contract\"],\"type\":\"u64\"},{\"name\":\"last_amount_update_time\",\"docs\":[\"Copy last_rate_change_time from Stream contract for our worker to be able to fetch it in one call with the proxy contract\"],\"type\":\"u64\"},{\"name\":\"last_price\",\"docs\":[\"Price used on last amount calculation\"],\"type\":\"u64\"},{\"name\":\"stream_canceled_time\",\"docs\":[\"Timestamp when stream was cancelled\"],\"type\":\"u64\"},{\"name\":\"initial_amount_per_period\",\"docs\":[\"Amount per period to use as base for calculations\"],\"type\":\"u64\"},{\"name\":\"initial_price\",\"docs\":[\"Initial token price at the time of Contract creation\"],\"type\":\"u64\"},{\"name\":\"initial_net_amount\",\"docs\":[\"Initial deposited amount\"],\"type\":\"u64\"},{\"name\":\"mint\",\"docs\":[\"Mint for which the contract was created\"],\"type\":\"pubkey\"},{\"name\":\"buffer\",\"docs\":[\"Buffer for additional fields\"],\"type\":{\"array\":[\"u8\",32]}}]}},{\"name\":\"CreateParams\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"start_time\",\"docs\":[\"Timestamp when the tokens start vesting\"],\"type\":\"u64\"},{\"name\":\"net_amount_deposited\",\"docs\":[\"Deposited amount of tokens\"],\"type\":\"u64\"},{\"name\":\"period\",\"docs\":[\"Time step (period) in seconds per which the vesting/release occurs\"],\"type\":\"u64\"},{\"name\":\"amount_per_period\",\"docs\":[\"Base Amount released per period. Combined with `period`, we get a release rate.\"],\"type\":\"u64\"},{\"name\":\"cliff\",\"docs\":[\"Vesting contract \\\"cliff\\\" timestamp\"],\"type\":\"u64\"},{\"name\":\"cliff_amount\",\"docs\":[\"Amount unlocked at the \\\"cliff\\\" timestamp\"],\"type\":\"u64\"},{\"name\":\"cancelable_by_sender\",\"docs\":[\"Whether a stream can be canceled by a sender\"],\"type\":\"bool\"},{\"name\":\"cancelable_by_recipient\",\"docs\":[\"Whether a stream can be canceled by a recipient\"],\"type\":\"bool\"},{\"name\":\"transferable_by_sender\",\"docs\":[\"Whether the sender can transfer the stream\"],\"type\":\"bool\"},{\"name\":\"transferable_by_recipient\",\"docs\":[\"Whether the recipient can transfer the stream\"],\"type\":\"bool\"},{\"name\":\"can_topup\",\"docs\":[\"Whether topup is enabled\"],\"type\":\"bool\"},{\"name\":\"stream_name\",\"docs\":[\"The name of this stream\"],\"type\":{\"array\":[\"u8\",64]}},{\"name\":\"min_price\",\"type\":\"u64\"},{\"name\":\"max_price\",\"type\":\"u64\"},{\"name\":\"min_percentage\",\"type\":\"u64\"},{\"name\":\"max_percentage\",\"type\":\"u64\"},{\"name\":\"tick_size\",\"type\":\"u64\"},{\"name\":\"skip_initial\",\"docs\":[\"Whether to skip initial calculation of amount per period\"],\"type\":\"bool\"},{\"name\":\"oracle_type\",\"docs\":[\"Type of Oracle to use to derive Token Price\"],\"type\":{\"defined\":{\"name\":\"OracleType\"}}}]}},{\"name\":\"CreateTestOracleParams\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"price\",\"type\":\"u64\"},{\"name\":\"expo\",\"type\":\"i32\"},{\"name\":\"conf\",\"type\":\"u64\"},{\"name\":\"publish_time\",\"type\":\"i64\"}]}},{\"name\":\"OracleType\",\"type\":{\"kind\":\"enum\",\"variants\":[{\"name\":\"None\"},{\"name\":\"Test\"},{\"name\":\"Pyth\"},{\"name\":\"Switchboard\"}]}},{\"name\":\"TestOracle\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"price\",\"type\":\"u64\"},{\"name\":\"expo\",\"type\":\"i32\"},{\"name\":\"conf\",\"type\":\"u64\"},{\"name\":\"publish_time\",\"type\":\"i64\"},{\"name\":\"creator\",\"type\":\"pubkey\"},{\"name\":\"authority\",\"type\":\"pubkey\"},{\"name\":\"mint\",\"type\":\"pubkey\"}]}},{\"name\":\"UpdateTestOracleParams\",\"type\":{\"kind\":\"struct\",\"fields\":[{\"name\":\"price\",\"type\":\"u64\"},{\"name\":\"expo\",\"type\":\"i32\"},{\"name\":\"conf\",\"type\":\"u64\"},{\"name\":\"publish_time\",\"type\":\"i64\"}]}}]}"));}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/lib/derive-accounts.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "deriveContractPDA": (()=>deriveContractPDA),
    "deriveEscrowPDA": (()=>deriveEscrowPDA),
    "deriveTestOraclePDA": (()=>deriveTestOraclePDA)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/@solana/web3.js/lib/index.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/constants.js [app-client] (ecmascript)");
;
;
const deriveContractPDA = (programId, streamMetadata)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"].findProgramAddressSync([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CONTRACT_SEED"],
        streamMetadata.toBuffer()
    ], programId)[0];
};
const deriveEscrowPDA = (programId, streamMetadata)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"].findProgramAddressSync([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ESCROW_SEED"],
        streamMetadata.toBuffer()
    ], programId)[0];
};
const deriveTestOraclePDA = (programId, mint, creator)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"].findProgramAddressSync([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TEST_ORACLE_SEED"],
        mint.toBuffer(),
        creator.toBuffer()
    ], programId)[0];
};
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/StreamClient.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Latest version of the SDK that does not use Anchor. It supports raw instructions.
__turbopack_esm__({
    "SolanaStreamClient": (()=>SolanaStreamClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bn.js/lib/bn.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f$bs58$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/bs58/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/buffer/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/@solana/web3.js/lib/index.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/solana/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f$borsh$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/borsh/lib/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$coral$2d$xyz$2f$anchor$2f$dist$2f$browser$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/@coral-xyz/anchor/dist/browser/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/types.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/lib/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/instructions.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$BaseStreamClient$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/BaseStreamClient.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$descriptor$2f$idl$2f$streamflow_aligned_unlocks$2e$json__$28$json$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/descriptor/idl/streamflow_aligned_unlocks.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$derive$2d$accounts$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/lib/derive-accounts.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$contractUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/contractUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/types.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/solana/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$coral$2d$xyz$2f$anchor$2f$dist$2f$browser$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/@coral-xyz/anchor/dist/browser/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/solana/instructions.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$spl$2d$token$2f$lib$2f$esm$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/node_modules/@solana/spl-token/lib/esm/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/common/dist/esm/lib/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/types.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/common/types.js [app-client] (ecmascript) <locals>");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const METADATA_ACC_SIZE = 1104;
const ALIGNED_METADATA_ACC_SIZE = 320;
class SolanaStreamClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$BaseStreamClient$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BaseStreamClient"] {
    connection;
    programId;
    commitment;
    alignedProxyProgram;
    schedulingParams;
    /**
     * Create Stream instance
     */ constructor(optionsOrClusterUrl, cluster = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Mainnet, commitment = "confirmed", programId = "", sendRate = 1, sendThrottler){
        super();
        if (typeof optionsOrClusterUrl === "string") {
            this.commitment = commitment;
            this.connection = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Connection"](optionsOrClusterUrl, this.commitment);
            this.programId = programId !== "" ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](programId) : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PROGRAM_ID"][cluster]);
            this.schedulingParams = {
                sendThrottler: sendThrottler ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildSendThrottler"])(sendRate)
            };
        } else {
            const { clusterUrl, cluster = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ICluster"].Mainnet, commitment = "confirmed", programId = "", sendScheduler } = optionsOrClusterUrl;
            this.commitment = commitment;
            this.connection = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Connection"](clusterUrl, this.commitment);
            this.programId = programId !== "" ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](programId) : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PROGRAM_ID"][cluster]);
            const schedulingOptions = sendScheduler && "sendRate" in sendScheduler ? sendScheduler : undefined;
            const sendThrottler = !sendScheduler ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildSendThrottler"])(1) : "sendRate" in sendScheduler ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildSendThrottler"])(sendScheduler.sendRate ?? 1, sendScheduler.sendInterval) : sendScheduler;
            this.schedulingParams = {
                ...schedulingOptions,
                sendThrottler
            };
        }
        const alignedUnlocksProgram = {
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$descriptor$2f$idl$2f$streamflow_aligned_unlocks$2e$json__$28$json$29$__["default"],
            address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$descriptor$2f$idl$2f$streamflow_aligned_unlocks$2e$json__$28$json$29$__["default"].address
        };
        this.alignedProxyProgram = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$coral$2d$xyz$2f$anchor$2f$dist$2f$browser$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Program"](alignedUnlocksProgram, {
            connection: this.connection
        });
    }
    getConnection() {
        return this.connection;
    }
    getCommitment() {
        return typeof this.commitment == "string" ? this.commitment : this.commitment.commitment;
    }
    getProgramId() {
        return this.programId.toBase58();
    }
    /**
     * Creates a new stream/vesting contract.
     * All fees are paid by sender (escrow metadata account rent, escrow token account rent, recipient's associated token account rent, Streamflow's service fee).
     */ async create(data, extParams) {
        const { partner, amount, tokenProgramId } = data;
        const { isNative, sender, customInstructions } = extParams;
        const partnerPublicKey = partner ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](partner) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"];
        const mintPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](data.tokenId);
        if (!sender.publicKey) {
            throw new Error("Sender's PublicKey is not available, check passed wallet adapter!");
        }
        const ixs = await this.getCreateATAInstructions([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"],
            partnerPublicKey
        ], mintPublicKey, sender, true, tokenProgramId ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](tokenProgramId) : undefined);
        const { ixs: createIxs, metadata, metadataPubKey } = await this.prepareCreateInstructions(data, extParams);
        ixs.push(...createIxs);
        if (isNative) {
            const totalFee = await this.getTotalFee({
                address: partnerPublicKey.toString()
            });
            const totalAmount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["calculateTotalAmountToDeposit"])(amount, totalFee);
            ixs.push(...await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareWrappedAccount"])(this.connection, sender.publicKey, totalAmount));
        }
        await this.applyCustomAfterInstructions(ixs, customInstructions, metadataPubKey);
        const { tx, hash, context } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareTransaction"])(this.connection, ixs, sender.publicKey, undefined, metadata);
        const signature = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signAndExecuteTransaction"])(this.connection, extParams.sender, tx, {
            hash,
            context,
            commitment: this.getCommitment()
        }, this.schedulingParams);
        return {
            ixs,
            txId: signature,
            metadataId: metadataPubKey.toBase58()
        };
    }
    async prepareCreateInstructions(streamParams, extParams) {
        const { ixs, metadata, metadataPubKey } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$contractUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCreateAlignedStreamData"])(streamParams) ? await this.prepareCreateAlignedUnlockInstructions(streamParams, extParams) : await this.prepareCreateStreamInstructions(streamParams, extParams);
        return {
            ixs,
            metadata,
            metadataPubKey
        };
    }
    async prepareCreateAlignedUnlockInstructions(streamParams, extParams) {
        const { tokenId: mint, start, period, cliff, canTopup, cancelableBySender, cancelableByRecipient, transferableBySender, transferableByRecipient, partner, recipient, cliffAmount, amountPerPeriod, amount: depositedAmount, name: streamName, minPrice, maxPercentage, minPercentage, maxPrice, skipInitial, tickSize, priceOracle, oracleType, tokenProgramId: streamTokenProgramId } = streamParams;
        const { isNative, sender, computeLimit, computePrice, metadataPubKeys } = extParams;
        if (!sender.publicKey) {
            throw new Error("Sender's PublicKey is not available, check passed wallet adapter!");
        }
        if (!priceOracle && oracleType && oracleType !== "none") {
            throw new Error("Price oracle is required for the specified oracle type");
        }
        const recipientPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](recipient);
        const mintPublicKey = isNative ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$spl$2d$token$2f$lib$2f$esm$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NATIVE_MINT"] : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](mint);
        const metadata = !metadataPubKeys ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Keypair"].generate() : undefined;
        const metadataPubKey = metadata ? metadata.publicKey : metadataPubKeys[0];
        let tokenProgramId = streamTokenProgramId ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](streamTokenProgramId) : undefined;
        if (!tokenProgramId) {
            tokenProgramId = (await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMintAndProgram"])(this.connection, mintPublicKey)).tokenProgramId;
        }
        const partnerPublicKey = partner ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](partner) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"];
        const streamflowProgramPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](this.programId);
        const escrowPDA = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$derive$2d$accounts$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deriveEscrowPDA"])(streamflowProgramPublicKey, metadataPubKey);
        const oracle = priceOracle ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$derive$2d$accounts$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deriveTestOraclePDA"])(this.alignedProxyProgram.programId, mintPublicKey, sender.publicKey);
        const ixs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareBaseInstructions"])(this.connection, {
            computePrice,
            computeLimit: computeLimit ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_COMPUTE_LIMIT"]
        });
        ixs.push(...await this.getCreateATAInstructions([
            recipientPublicKey
        ], mintPublicKey, sender, true, tokenProgramId));
        const encodedUIntArray = new TextEncoder().encode(streamName);
        const streamNameArray = Array.from(encodedUIntArray);
        const createIx = await this.alignedProxyProgram.methods.create({
            startTime: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](start),
            netAmountDeposited: depositedAmount,
            period: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](period),
            amountPerPeriod: amountPerPeriod,
            cliff: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](cliff),
            cliffAmount: cliffAmount,
            transferableBySender,
            transferableByRecipient,
            cancelableByRecipient,
            cancelableBySender,
            canTopup,
            oracleType: !!oracleType ? {
                [oracleType]: {}
            } : {
                none: {}
            },
            streamName: streamNameArray,
            minPrice: minPrice instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] ? minPrice : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getBN"])(minPrice, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]),
            maxPrice: maxPrice instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] ? maxPrice : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getBN"])(maxPrice, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]),
            minPercentage: minPercentage instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] ? minPercentage : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getBN"])(minPercentage, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]),
            maxPercentage: maxPercentage instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] ? maxPercentage : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getBN"])(maxPercentage, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_PRECISION_FACTOR_POW"]),
            tickSize: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](tickSize || 1),
            skipInitial: skipInitial ?? false
        }).accountsPartial({
            payer: sender.publicKey,
            sender: sender.publicKey,
            streamMetadata: metadataPubKey,
            escrowTokens: escrowPDA,
            mint: mintPublicKey,
            partner: partnerPublicKey,
            recipient: recipientPublicKey,
            withdrawor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"],
            feeOracle: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FEE_ORACLE_PUBLIC_KEY"],
            priceOracle: oracle,
            tokenProgram: tokenProgramId,
            streamflowProgram: this.programId
        }).instruction();
        ixs.push(createIx);
        return {
            ixs,
            metadata,
            metadataPubKey
        };
    }
    /**
     * Creates a new stream/vesting contract.
     * All fees are paid by sender (escrow metadata account rent, escrow token account rent, recipient's associated token account rent, Streamflow's service fee).
     */ async prepareCreateStreamInstructions({ recipient, tokenId: mint, start, amount: depositedAmount, period, cliff, cliffAmount, amountPerPeriod, name, canPause, canUpdateRate, canTopup, cancelableBySender, cancelableByRecipient, transferableBySender, transferableByRecipient, automaticWithdrawal = false, withdrawalFrequency = 0, partner, tokenProgramId: streamTokenProgramId }, { sender, metadataPubKeys, isNative = false, computePrice, computeLimit }) {
        if (!sender.publicKey) {
            throw new Error("Sender's PublicKey is not available, check passed wallet adapter!");
        }
        const ixs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareBaseInstructions"])(this.connection, {
            computePrice,
            computeLimit
        });
        const mintPublicKey = isNative ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$spl$2d$token$2f$lib$2f$esm$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NATIVE_MINT"] : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](mint);
        const recipientPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](recipient);
        const { metadata, metadataPubKey } = this.getOrCreateStreamMetadata(metadataPubKeys);
        const [escrowTokens] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"].findProgramAddressSync([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from("strm"),
            metadataPubKey.toBuffer()
        ], this.programId);
        let tokenProgramId = streamTokenProgramId ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](streamTokenProgramId) : undefined;
        if (!tokenProgramId) {
            tokenProgramId = (await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMintAndProgram"])(this.connection, mintPublicKey)).tokenProgramId;
        }
        const senderTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mintPublicKey, sender.publicKey, tokenProgramId);
        const recipientTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mintPublicKey, recipientPublicKey, tokenProgramId);
        const streamflowTreasuryTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mintPublicKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"], tokenProgramId);
        const partnerPublicKey = partner ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](partner) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"];
        const partnerTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mintPublicKey, partnerPublicKey, tokenProgramId);
        ixs.push(await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createStreamInstruction"])({
            start: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](start),
            depositedAmount,
            period: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](period),
            amountPerPeriod,
            cliff: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](cliff),
            cliffAmount: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](cliffAmount),
            cancelableBySender,
            cancelableByRecipient,
            automaticWithdrawal,
            transferableBySender,
            transferableByRecipient,
            canTopup,
            canUpdateRate: !!canUpdateRate,
            canPause: !!canPause,
            name,
            withdrawFrequency: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](automaticWithdrawal ? withdrawalFrequency : period)
        }, this.programId, {
            sender: sender.publicKey,
            senderTokens,
            recipient: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](recipient),
            metadata: metadataPubKey,
            escrowTokens,
            recipientTokens,
            streamflowTreasury: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"],
            streamflowTreasuryTokens: streamflowTreasuryTokens,
            partner: partnerPublicKey,
            partnerTokens: partnerTokens,
            mint: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](mint),
            feeOracle: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FEE_ORACLE_PUBLIC_KEY"],
            rent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SYSVAR_RENT_PUBKEY"],
            timelockProgram: this.programId,
            tokenProgram: tokenProgramId,
            associatedTokenProgram: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$spl$2d$token$2f$lib$2f$esm$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSOCIATED_TOKEN_PROGRAM_ID"],
            withdrawor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"],
            systemProgram: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SystemProgram"].programId
        }));
        return {
            ixs,
            metadata,
            metadataPubKey
        };
    }
    /**
     * Creates a new stream/vesting contract using unchecked instruction.
     *
     * Unchecked instruction differs from the regular in:
     * - does not check for initialized associated token account (wallets with no control over their ATA should not be used
     * as sender/recipient/partner or there are risks of funds being locked in the contract)
     * - initialized contract PDA off chain
     *
     * If you are not sure if you should use create or create_unchecked, go for create to be safer.
     */ async createUnchecked(data, extParams) {
        const { ixs, metadata, metadataPubKey } = await this.prepareCreateUncheckedInstructions(data, extParams);
        const { tx, hash, context } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareTransaction"])(this.connection, ixs, extParams.sender.publicKey, undefined, metadata);
        const signature = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signAndExecuteTransaction"])(this.connection, extParams.sender, tx, {
            hash,
            context,
            commitment: this.getCommitment()
        }, this.schedulingParams);
        return {
            ixs,
            txId: signature,
            metadataId: metadataPubKey.toBase58()
        };
    }
    /**
     * Create Transaction instructions for `createUnchecked`
     */ async prepareCreateUncheckedInstructions({ recipient, tokenId: mint, start, amount: depositedAmount, period, cliff, cliffAmount, amountPerPeriod, name, canTopup, canUpdateRate, canPause, cancelableBySender, cancelableByRecipient, transferableBySender, transferableByRecipient, automaticWithdrawal = false, withdrawalFrequency = 0, partner }, { sender, metadataPubKeys, isNative = false, computePrice, computeLimit }) {
        if (!sender.publicKey) {
            throw new Error("Sender's PublicKey is not available, check passed wallet adapter!");
        }
        const mintPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](mint);
        const recipientPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](recipient);
        const { metadata, metadataPubKey } = this.getOrCreateStreamMetadata(metadataPubKeys);
        const rentToExempt = await this.connection.getMinimumBalanceForRentExemption(METADATA_ACC_SIZE);
        const createMetadataInstruction = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SystemProgram"].createAccount({
            programId: this.programId,
            space: METADATA_ACC_SIZE,
            lamports: rentToExempt,
            fromPubkey: sender?.publicKey,
            newAccountPubkey: metadataPubKey
        });
        const [escrowTokens] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"].findProgramAddressSync([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from("strm"),
            metadataPubKey.toBuffer()
        ], this.programId);
        const { tokenProgramId } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMintAndProgram"])(this.connection, mintPublicKey);
        const senderTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mintPublicKey, sender.publicKey, tokenProgramId);
        const partnerPublicKey = partner ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](partner) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"];
        const ixs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareBaseInstructions"])(this.connection, {
            computePrice,
            computeLimit
        });
        if (isNative) {
            const totalFee = await this.getTotalFee({
                address: partnerPublicKey.toString()
            });
            const totalAmount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["calculateTotalAmountToDeposit"])(depositedAmount, totalFee);
            ixs.push(...await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareWrappedAccount"])(this.connection, sender.publicKey, totalAmount));
        }
        const createInstruction = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createUncheckedStreamInstruction"])({
            start: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](start),
            depositedAmount,
            period: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](period),
            amountPerPeriod,
            cliff: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](cliff),
            cliffAmount: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](cliffAmount),
            cancelableBySender,
            cancelableByRecipient,
            automaticWithdrawal,
            transferableBySender,
            transferableByRecipient,
            canTopup,
            canUpdateRate: !!canUpdateRate,
            canPause: !!canPause,
            name,
            withdrawFrequency: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](automaticWithdrawal ? withdrawalFrequency : period),
            recipient: recipientPublicKey,
            partner: partnerPublicKey
        }, this.programId, {
            sender: sender.publicKey,
            senderTokens,
            metadata: metadataPubKey,
            escrowTokens,
            mint: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](mint),
            feeOracle: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FEE_ORACLE_PUBLIC_KEY"],
            rent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SYSVAR_RENT_PUBKEY"],
            timelockProgram: this.programId,
            tokenProgram: tokenProgramId,
            withdrawor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"],
            systemProgram: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SystemProgram"].programId
        });
        ixs.push(createMetadataInstruction, createInstruction);
        return {
            ixs,
            metadata,
            metadataPubKey
        };
    }
    /**
     * Creates multiple stream/vesting contracts.
     * All fees are paid by sender (escrow metadata account rent, escrow token account rent, recipient's associated token account rent, Streamflow's service fee).
     */ async createMultiple(data, extParams) {
        const { recipients, ...streamParams } = data;
        const { sender, metadataPubKeys: metadataPubKeysExt, isNative, computePrice, computeLimit, customInstructions } = extParams;
        const metadatas = [];
        const metadataToRecipient = {};
        const errors = [];
        const signatures = [];
        const batch = [];
        const instructionsBatch = [];
        const metadataPubKeys = metadataPubKeysExt || [];
        const partnerPublicKey = data.partner ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](data.partner) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"];
        const mintPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](data.tokenId);
        if (recipients.length === 0) {
            throw new Error("Recipients array is empty!");
        }
        if (!sender.publicKey) {
            throw new Error("Sender's PublicKey is not available, check passed wallet adapter!");
        }
        for(let i = 0; i < recipients.length; i++){
            const recipientData = recipients[i];
            const createStreamData = {
                ...streamParams,
                ...recipientData
            };
            const createStreamExtParams = {
                sender,
                metadataPubKeys: metadataPubKeys[i] ? [
                    metadataPubKeys[i]
                ] : undefined,
                computePrice,
                computeLimit,
                customInstructions
            };
            const { ixs, metadata, metadataPubKey } = await this.prepareCreateInstructions(createStreamData, createStreamExtParams);
            await this.applyCustomAfterInstructions(ixs, customInstructions, metadataPubKey);
            metadataToRecipient[metadataPubKey.toBase58()] = recipientData;
            metadatas.push(metadataPubKey.toBase58());
            instructionsBatch.push({
                ixs,
                metadata,
                recipient: recipientData.recipient
            });
        }
        const { value: hash, context } = await this.connection.getLatestBlockhashAndContext();
        for (const { ixs, metadata, recipient } of instructionsBatch){
            const messageV0 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionMessage"]({
                payerKey: sender.publicKey,
                recentBlockhash: hash.blockhash,
                instructions: ixs
            }).compileToV0Message();
            const tx = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VersionedTransaction"](messageV0);
            if (metadata) {
                tx.sign([
                    metadata
                ]);
            }
            batch.push({
                tx,
                recipient
            });
        }
        const prepareInstructions = await this.getCreateATAInstructions([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"],
            partnerPublicKey
        ], mintPublicKey, sender, true);
        if (isNative) {
            const totalDepositedAmount = recipients.reduce((acc, recipient)=>recipient.amount.add(acc), new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](0));
            const nativeInstructions = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareWrappedAccount"])(this.connection, sender.publicKey, totalDepositedAmount);
            prepareInstructions.push(...nativeInstructions);
        }
        if (prepareInstructions.length > 0) {
            const messageV0 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionMessage"]({
                payerKey: sender.publicKey,
                recentBlockhash: hash.blockhash,
                instructions: prepareInstructions
            }).compileToV0Message();
            const tx = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VersionedTransaction"](messageV0);
            batch.push({
                tx,
                recipient: sender.publicKey.toBase58()
            });
        }
        const signedBatch = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signAllTransactionWithRecipients"])(sender, batch);
        if (prepareInstructions.length > 0) {
            const prepareTx = signedBatch.pop();
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sendAndConfirmStreamRawTransaction"])(this.connection, prepareTx, {
                hash,
                context
            }, this.schedulingParams);
        }
        const responses = [];
        if (metadataPubKeys.length > 0) {
            //if metadata pub keys were passed we should execute transaction sequentially
            //ephemeral signer need to be used first before proceeding with the next
            for (const batchTx of signedBatch){
                responses.push(...await Promise.allSettled([
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["executeTransaction"])(this.connection, batchTx.tx, {
                        hash,
                        context
                    }, this.schedulingParams)
                ]));
            }
        } else {
            //send all transactions in parallel and wait for them to settle.
            //it allows to speed up the process of sending transactions
            //we then filter all promise responses and handle failed transactions
            responses.push(...await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["executeMultipleTransactions"])(this.connection, signedBatch.map((item)=>item.tx), {
                hash,
                context
            }, this.schedulingParams));
        }
        responses.forEach((item, index)=>{
            if (item.status === "fulfilled") {
                signatures.push(item.value);
            } else {
                errors.push({
                    recipient: signedBatch[index].recipient,
                    error: item.reason,
                    contractErrorCode: this.extractErrorCode(item.reason) || undefined
                });
            }
        });
        return {
            txs: signatures,
            metadatas,
            metadataToRecipient,
            errors
        };
    }
    /**
     * Creates multiple stream/vesting contracts, and send all transactions sequentially.
     * All fees are paid by sender (escrow metadata account rent, escrow token account rent, recipient's associated token account rent, Streamflow's service fee).
     * In most cases, createMultiple should be used instead.
     */ async createMultipleSequential(data, extParams) {
        const { recipients, ...streamParams } = data;
        const { sender, metadataPubKeys: metadataPubKeysExt, isNative, computePrice, computeLimit, customInstructions } = extParams;
        const metadatas = [];
        const metadataToRecipient = {};
        const errors = [];
        const signatures = [];
        const batch = [];
        const instructionsBatch = [];
        const metadataPubKeys = metadataPubKeysExt || [];
        const partnerPublicKey = data.partner ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](data.partner) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"];
        const mintPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](data.tokenId);
        if (recipients.length === 0) {
            throw new Error("Recipients array is empty!");
        }
        if (!sender.publicKey) {
            throw new Error("Sender's PublicKey is not available, check passed wallet adapter!");
        }
        for(let i = 0; i < recipients.length; i++){
            const recipientData = recipients[i];
            const createStreamData = {
                ...streamParams,
                ...recipientData
            };
            const createStreamExtParams = {
                sender,
                metadataPubKeys: metadataPubKeys[i] ? [
                    metadataPubKeys[i]
                ] : undefined,
                computePrice,
                computeLimit,
                customInstructions
            };
            const { ixs, metadata, metadataPubKey } = await this.prepareCreateInstructions(createStreamData, createStreamExtParams);
            await this.applyCustomAfterInstructions(ixs, customInstructions, metadataPubKey);
            metadataToRecipient[metadataPubKey.toBase58()] = recipientData;
            metadatas.push(metadataPubKey.toBase58());
            instructionsBatch.push({
                ixs,
                metadata,
                recipient: recipientData.recipient
            });
        }
        const { value: hash, context } = await this.connection.getLatestBlockhashAndContext();
        for (const { ixs, metadata, recipient } of instructionsBatch){
            const messageV0 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionMessage"]({
                payerKey: sender.publicKey,
                recentBlockhash: hash.blockhash,
                instructions: ixs
            }).compileToV0Message();
            const tx = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VersionedTransaction"](messageV0);
            if (metadata) {
                tx.sign([
                    metadata
                ]);
            }
            batch.push({
                tx,
                recipient
            });
        }
        const prepareInstructions = await this.getCreateATAInstructions([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"],
            partnerPublicKey
        ], mintPublicKey, sender, true);
        if (isNative) {
            const totalDepositedAmount = recipients.reduce((acc, recipient)=>recipient.amount.add(acc), new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](0));
            const nativeInstructions = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareWrappedAccount"])(this.connection, sender.publicKey, totalDepositedAmount);
            prepareInstructions.push(...nativeInstructions);
        }
        if (prepareInstructions.length > 0) {
            const messageV0 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TransactionMessage"]({
                payerKey: sender.publicKey,
                recentBlockhash: hash.blockhash,
                instructions: prepareInstructions
            }).compileToV0Message();
            const tx = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VersionedTransaction"](messageV0);
            batch.push({
                tx,
                recipient: sender.publicKey.toBase58()
            });
        }
        const signedBatch = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signAllTransactionWithRecipients"])(sender, batch);
        if (prepareInstructions.length > 0) {
            const prepareTx = signedBatch.shift();
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sendAndConfirmStreamRawTransaction"])(this.connection, prepareTx, {
                hash,
                context
            }, this.schedulingParams);
        }
        const responses = [];
        for (const batchTx of signedBatch){
            responses.push(...await Promise.allSettled([
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["executeTransaction"])(this.connection, batchTx.tx, {
                    hash,
                    context
                }, this.schedulingParams)
            ]));
        }
        responses.forEach((item, index)=>{
            if (item.status === "fulfilled") {
                signatures.push(item.value);
            } else {
                errors.push({
                    recipient: signedBatch[index].recipient,
                    error: item.reason,
                    contractErrorCode: this.extractErrorCode(item.reason) || undefined
                });
            }
        });
        return {
            txs: signatures,
            metadatas,
            metadataToRecipient,
            errors
        };
    }
    /**
     * Attempts withdrawing from the specified stream.
     */ async withdraw({ id, amount = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAW_AVAILABLE_AMOUNT"] }, extParams) {
        const { invoker, customInstructions } = extParams;
        if (!invoker.publicKey) {
            throw new Error("Invoker's PublicKey is not available, check passed wallet adapter!");
        }
        const ixs = await this.prepareWithdrawInstructions({
            id,
            amount
        }, extParams);
        const metadata = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](id);
        await this.applyCustomAfterInstructions(ixs, customInstructions, metadata);
        const { tx, hash, context } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareTransaction"])(this.connection, ixs, invoker.publicKey);
        const signature = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signAndExecuteTransaction"])(this.connection, extParams.invoker, tx, {
            hash,
            context,
            commitment: this.getCommitment()
        }, this.schedulingParams);
        return {
            ixs,
            txId: signature
        };
    }
    /**
     * Creates Transaction Instructions for withdrawal
     */ async prepareWithdrawInstructions({ id, amount = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAW_AVAILABLE_AMOUNT"] }, { invoker, checkTokenAccounts, computePrice, computeLimit }) {
        if (!invoker.publicKey) {
            throw new Error("Invoker's PublicKey is not available, check passed wallet adapter!");
        }
        const ixs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareBaseInstructions"])(this.connection, {
            computePrice,
            computeLimit
        });
        const streamPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](id);
        const escrow = await this.connection.getAccountInfo(streamPublicKey);
        if (!escrow?.data) {
            throw new Error("Couldn't get account info");
        }
        const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(escrow.data);
        const { sender, recipient, mint, streamflowTreasury, partner, recipientTokens, escrowTokens } = data;
        const { tokenProgramId } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMintAndProgram"])(this.connection, mint);
        const streamflowTreasuryTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mint, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"], tokenProgramId);
        const partnerTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mint, partner, tokenProgramId);
        const ataIx = await this.getCreateATAInstructions([
            sender,
            recipient,
            streamflowTreasury,
            partner
        ], mint, invoker, checkTokenAccounts, tokenProgramId);
        ixs.push(...ataIx, await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["withdrawStreamInstruction"])(amount, this.programId, {
            partner,
            partnerTokens,
            mint,
            streamflowTreasuryTokens,
            recipientTokens,
            escrowTokens,
            authority: invoker.publicKey,
            recipient: invoker.publicKey,
            metadata: streamPublicKey,
            streamflowTreasury: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"],
            tokenProgram: tokenProgramId
        }));
        return ixs;
    }
    /**
     * Attempts canceling the specified stream.
     */ async cancel(cancelData, extParams) {
        const ixs = await this.prepareCancelInstructions(cancelData, extParams);
        const { tx, hash, context } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareTransaction"])(this.connection, ixs, extParams.invoker.publicKey);
        const signature = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signAndExecuteTransaction"])(this.connection, extParams.invoker, tx, {
            hash,
            context,
            commitment: this.getCommitment()
        }, this.schedulingParams);
        return {
            ixs,
            txId: signature
        };
    }
    async prepareCancelInstructions(cancelData, extParams) {
        const streamPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](cancelData.id);
        const account = await this.connection.getAccountInfo(streamPublicKey);
        if (!account) {
            throw new Error("Impossible to cancel a stream contract that does not exist");
        }
        const { sender: senderPublicKey } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(account.data);
        const isAlignedUnlock = this.isAlignedUnlock(streamPublicKey, senderPublicKey);
        const ixs = isAlignedUnlock ? await this.prepareCancelAlignedUnlockInstructions(cancelData, extParams) : await this.prepareCancelStreamInstructions(cancelData, extParams);
        return ixs;
    }
    async prepareCancelAlignedUnlockInstructions({ id }, { invoker, checkTokenAccounts, computePrice, computeLimit }) {
        if (!invoker.publicKey) {
            throw new Error("Invoker's PublicKey is not available, check passed wallet adapter!");
        }
        const streamPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](id);
        const escrowAcc = await this.connection.getAccountInfo(streamPublicKey);
        if (!escrowAcc?.data) {
            throw new Error("Couldn't get account info");
        }
        const streamData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(escrowAcc.data);
        const { sender, recipient, mint, streamflowTreasury, partner, escrowTokens } = streamData;
        const { tokenProgramId } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMintAndProgram"])(this.connection, mint);
        const ixs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareBaseInstructions"])(this.connection, {
            computePrice,
            computeLimit: computeLimit ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGNED_COMPUTE_LIMIT"]
        });
        const ataIx = await this.getCreateATAInstructions([
            sender,
            recipient,
            partner,
            streamflowTreasury
        ], mint, invoker, checkTokenAccounts, tokenProgramId);
        const cancelIx = await this.alignedProxyProgram.methods.cancel().accountsPartial({
            mint,
            partner,
            recipient,
            escrowTokens,
            sender: invoker.publicKey,
            streamMetadata: streamPublicKey,
            streamflowTreasury: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"],
            tokenProgram: tokenProgramId,
            streamflowProgram: this.programId
        }).instruction();
        ixs.push(...ataIx, cancelIx);
        return ixs;
    }
    /**
     * Creates Transaction Instructions for cancel
     */ async prepareCancelStreamInstructions({ id }, { invoker, checkTokenAccounts, computePrice, computeLimit }) {
        if (!invoker.publicKey) {
            throw new Error("Invoker's PublicKey is not available, check passed wallet adapter!");
        }
        const streamPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](id);
        const escrowAcc = await this.connection.getAccountInfo(streamPublicKey);
        if (!escrowAcc?.data) {
            throw new Error("Couldn't get account info");
        }
        const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(escrowAcc.data);
        const { sender, recipient, partner, streamflowTreasury, mint, senderTokens, recipientTokens, escrowTokens } = data;
        const { tokenProgramId } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMintAndProgram"])(this.connection, mint);
        const streamflowTreasuryTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mint, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"], tokenProgramId);
        const partnerTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mint, partner, tokenProgramId);
        const ixs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareBaseInstructions"])(this.connection, {
            computePrice,
            computeLimit
        });
        const ixsAta = await this.getCreateATAInstructions([
            sender,
            recipient,
            partner,
            streamflowTreasury
        ], mint, invoker, checkTokenAccounts, tokenProgramId);
        ixs.push(...ixsAta, await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cancelStreamInstruction"])(this.programId, {
            sender,
            senderTokens,
            recipient,
            recipientTokens,
            streamflowTreasuryTokens,
            partner,
            partnerTokens,
            mint,
            escrowTokens,
            authority: invoker.publicKey,
            metadata: streamPublicKey,
            streamflowTreasury: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"],
            tokenProgram: tokenProgramId
        }));
        return ixs;
    }
    /**
     * Attempts changing the stream/vesting contract's recipient (effectively transferring the stream/vesting contract).
     * Potential associated token account rent fee (to make it rent-exempt) is paid by the transaction initiator.
     */ async transfer({ id, newRecipient }, extParams) {
        const ixs = await this.prepareTransferInstructions({
            id,
            newRecipient
        }, extParams);
        const { tx, hash, context } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareTransaction"])(this.connection, ixs, extParams.invoker.publicKey);
        const signature = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signAndExecuteTransaction"])(this.connection, extParams.invoker, tx, {
            hash,
            context,
            commitment: this.getCommitment()
        }, this.schedulingParams);
        return {
            ixs,
            txId: signature
        };
    }
    /**
     * Attempts changing the stream/vesting contract's recipient (effectively transferring the stream/vesting contract).
     * Potential associated token account rent fee (to make it rent-exempt) is paid by the transaction initiator.
     */ async prepareTransferInstructions({ id, newRecipient }, { invoker, computePrice, computeLimit = 100001 }) {
        if (!invoker.publicKey) {
            throw new Error("Invoker's PublicKey is not available, check passed wallet adapter!");
        }
        const ixs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareBaseInstructions"])(this.connection, {
            computePrice,
            computeLimit
        });
        const stream = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](id);
        const newRecipientPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](newRecipient);
        const escrow = await this.connection.getAccountInfo(stream);
        if (!escrow?.data) {
            throw new Error("Couldn't get account info");
        }
        const { mint } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(escrow?.data);
        const { tokenProgramId } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMintAndProgram"])(this.connection, mint);
        const newRecipientTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mint, newRecipientPublicKey, tokenProgramId);
        ixs.push(await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transferStreamInstruction"])(this.programId, {
            authority: invoker.publicKey,
            newRecipient: newRecipientPublicKey,
            newRecipientTokens,
            metadata: stream,
            mint,
            rent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SYSVAR_RENT_PUBKEY"],
            tokenProgram: tokenProgramId,
            associatedTokenProgram: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$spl$2d$token$2f$lib$2f$esm$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSOCIATED_TOKEN_PROGRAM_ID"],
            systemProgram: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SystemProgram"].programId
        }));
        return ixs;
    }
    /**
     * Tops up stream account with specified amount.
     */ async topup({ id, amount }, extParams) {
        const ixs = await this.prepareTopupInstructions({
            id,
            amount
        }, extParams);
        const { tx, hash, context } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareTransaction"])(this.connection, ixs, extParams.invoker.publicKey);
        const signature = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signAndExecuteTransaction"])(this.connection, extParams.invoker, tx, {
            hash,
            context,
            commitment: this.getCommitment()
        }, this.schedulingParams);
        return {
            ixs,
            txId: signature
        };
    }
    /**
     * Create Transaction instructions for topup
     */ async prepareTopupInstructions({ id, amount }, { invoker, isNative, computePrice, computeLimit }) {
        if (!invoker.publicKey) {
            throw new Error("Invoker's PublicKey is not available, check passed wallet adapter!");
        }
        const ixs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareBaseInstructions"])(this.connection, {
            computePrice,
            computeLimit
        });
        const streamPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](id);
        const escrow = await this.connection.getAccountInfo(streamPublicKey);
        if (!escrow?.data) {
            throw new Error("Couldn't get account info");
        }
        const { mint, partner, senderTokens, escrowTokens } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(escrow?.data);
        const { tokenProgramId } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMintAndProgram"])(this.connection, mint);
        const streamflowTreasuryTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mint, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"], tokenProgramId);
        const partnerTokens = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ata"])(mint, partner, tokenProgramId);
        if (isNative) {
            ixs.push(...await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareWrappedAccount"])(this.connection, invoker.publicKey, amount));
        }
        ixs.push(await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["topupStreamInstruction"])(amount, this.programId, {
            sender: invoker.publicKey,
            senderTokens,
            metadata: streamPublicKey,
            escrowTokens,
            streamflowTreasury: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAMFLOW_TREASURY_PUBLIC_KEY"],
            streamflowTreasuryTokens: streamflowTreasuryTokens,
            partner: partner,
            partnerTokens: partnerTokens,
            mint,
            tokenProgram: tokenProgramId,
            withdrawor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"],
            systemProgram: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SystemProgram"].programId
        }));
        return ixs;
    }
    /**
     * Fetch stream data by its id (address).
     */ async getOne({ id }) {
        const streamPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](id);
        const escrow = await this.connection.getAccountInfo(streamPublicKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TX_FINALITY_CONFIRMED"]);
        if (!escrow?.data) {
            throw new Error("Couldn't get account info.");
        }
        const stream = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(escrow.data);
        if (this.isAlignedUnlock(streamPublicKey, stream.sender)) {
            const alignedProxy = await this.alignedProxyProgram.account.contract.fetch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$derive$2d$accounts$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deriveContractPDA"])(this.alignedProxyProgram.programId, streamPublicKey));
            if (!alignedProxy) {
                throw new Error("Couldn't get proxy account info.");
            }
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AlignedContract"](stream, alignedProxy);
        }
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Contract"](stream);
    }
    /**
     * Fetch all aligned outgoing streams/contracts by the provided public key.
     */ async getOutgoingAlignedStreams(sender) {
        const streams = {};
        const alignedOutgoingProgramAccounts = await this.alignedProxyProgram.account.contract.all([
            {
                memcmp: {
                    offset: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ORIGINAL_CONTRACT_SENDER_OFFSET"],
                    bytes: sender
                }
            },
            {
                dataSize: ALIGNED_METADATA_ACC_SIZE
            }
        ]);
        const streamPubKeys = alignedOutgoingProgramAccounts.map((account)=>account.account.stream);
        const streamAccounts = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMultipleAccountsInfoBatched"])(this.connection, streamPubKeys, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["TX_FINALITY_CONFIRMED"]);
        streamAccounts.forEach((account, index)=>{
            if (account) {
                const alignedData = alignedOutgoingProgramAccounts[index].account;
                streams[streamPubKeys[index].toBase58()] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AlignedContract"]((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(account.data), alignedData);
            }
        });
        return streams;
    }
    async getIncomingAlignedStreams(streamRecord) {
        const streams = {};
        const alignedStreamsPubKeys = Object.keys(streamRecord);
        const alignedProxyPDAs = alignedStreamsPubKeys.map((streamPubKey)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$derive$2d$accounts$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deriveContractPDA"])(this.alignedProxyProgram.programId, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](streamPubKey)));
        const alignedProxyAccounts = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getMultipleAccountsInfoBatched"])(this.connection, alignedProxyPDAs);
        alignedProxyAccounts.forEach((account, index)=>{
            if (account && account.data.length === ALIGNED_METADATA_ACC_SIZE) {
                const alignedData = streamRecord[alignedStreamsPubKeys[index]];
                streams[alignedStreamsPubKeys[index]] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["AlignedContract"](alignedData, this.alignedProxyProgram.account.contract.coder.accounts.decode("contract", account.data));
            }
        });
        return streams;
    }
    /**
     * Fetch streams/contracts by providing direction.
     * Streams are sorted by start time in ascending order.
     */ async get({ address, type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamType"].All, direction = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamDirection"].All }) {
        const publicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](address);
        let streams = {};
        // don't do unnecessary rpc calls if we are not querying for vesting streams
        const shouldFetchAligned = type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamType"].All || type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamType"].Vesting;
        if (direction !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamDirection"].Incoming) {
            const outgoingStreamAccounts = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getProgramAccounts"])(this.connection, publicKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAM_STRUCT_OFFSET_SENDER"], this.programId);
            outgoingStreamAccounts.forEach((account)=>{
                streams[account.pubkey.toBase58()] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Contract"]((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(account.account.data));
            });
            if (shouldFetchAligned) {
                const alignedStreams = await this.getOutgoingAlignedStreams(address);
                streams = {
                    ...streams,
                    ...alignedStreams
                };
            }
        }
        if (direction !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamDirection"].Outgoing) {
            const allIncomingAccounts = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getProgramAccounts"])(this.connection, publicKey, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAM_STRUCT_OFFSET_RECIPIENT"], this.programId);
            const allIncomingStreams = allIncomingAccounts.map((account)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(account.account.data));
            const alignedDecoded = {};
            // filter out aligned unlocks and store them in a separate object
            allIncomingAccounts.forEach((account, index)=>{
                if (this.isAlignedUnlock(account.pubkey, allIncomingStreams[index].sender)) {
                    alignedDecoded[account.pubkey.toBase58()] = allIncomingStreams[index];
                } else {
                    streams[account.pubkey.toBase58()] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Contract"](allIncomingStreams[index]);
                }
            });
            if (shouldFetchAligned) {
                const incomingAlignedStreams = await this.getIncomingAlignedStreams(alignedDecoded);
                streams = {
                    ...streams,
                    ...incomingAlignedStreams
                };
            }
        }
        const sortedStreams = Object.entries(streams).sort(([, stream1], [, stream2])=>stream2.start - stream1.start);
        if (type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$common$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamType"].All) return sortedStreams;
        return sortedStreams.filter((stream)=>stream[1].type === type);
    }
    async searchStreams(data) {
        const filters = Object.entries(data)// eslint-disable-next-line @typescript-eslint/no-unused-vars
        .filter(([_, value])=>value !== undefined) // Only keep entries where the value is truthy
        .map(([key, value])=>({
                memcmp: {
                    offset: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["STREAM_STRUCT_OFFSETS"][key],
                    bytes: typeof value === "boolean" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f$bs58$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].encode([
                        Number(value)
                    ]) : value.toString()
                }
            }));
        filters.push({
            dataSize: METADATA_ACC_SIZE
        });
        const accounts = await this.connection.getProgramAccounts(this.programId, {
            filters
        });
        return accounts.map(({ pubkey, account })=>({
                publicKey: pubkey,
                account: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Contract"]((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeStream"])(account.data))
            }));
    }
    /**
     * Attempts updating the stream auto withdrawal params and amount per period
     */ async update(data, extParams) {
        const ixs = await this.prepareUpdateInstructions(data, extParams);
        const { tx, hash, context } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareTransaction"])(this.connection, ixs, extParams.invoker.publicKey);
        const signature = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["signAndExecuteTransaction"])(this.connection, extParams.invoker, tx, {
            hash,
            context,
            commitment: this.getCommitment()
        }, this.schedulingParams);
        return {
            ixs,
            txId: signature
        };
    }
    /**
     * Create Transaction instructions for update
     */ async prepareUpdateInstructions(data, { invoker, computePrice, computeLimit }) {
        if (!invoker.publicKey) {
            throw new Error("Invoker's PublicKey is not available, check passed wallet adapter!");
        }
        const streamPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](data.id);
        const escrow = await this.connection.getAccountInfo(streamPublicKey);
        if (!escrow) {
            throw new Error("Couldn't get account info");
        }
        const ixs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareBaseInstructions"])(this.connection, {
            computePrice,
            computeLimit
        });
        ixs.push(await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["updateStreamInstruction"])(data, this.programId, {
            authority: invoker.publicKey,
            metadata: streamPublicKey,
            withdrawor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WITHDRAWOR_PUBLIC_KEY"],
            systemProgram: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SystemProgram"].programId
        }));
        return ixs;
    }
    async getFees({ address }) {
        const [metadataPubKey] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"].findProgramAddressSync([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FEES_METADATA_SEED"])
        ], new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PARTNER_ORACLE_PROGRAM_ID"]));
        const data = await this.connection.getAccountInfo(metadataPubKey);
        if (!data) {
            return null;
        }
        const partners = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f$borsh$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.deserialize(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PARTNERS_SCHEMA"], data.data);
        const filteredPartners = partners.filter((item)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](item.pubkey).toString() === address);
        if (filteredPartners.length === 0) {
            return null;
        }
        return {
            streamflowFee: Number(filteredPartners[0].strm_fee.toFixed(4)),
            partnerFee: Number(filteredPartners[0].partner_fee.toFixed(4))
        };
    }
    async getDefaultStreamflowFee() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_STREAMFLOW_FEE"];
    }
    extractErrorCode(err) {
        const logs = "logs" in err && Array.isArray(err.logs) ? err.logs : undefined;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extractSolanaErrorCode"])(err.toString() ?? "Unknown error!", logs);
    }
    /**
     * Utility function to generate metadata for a Contract or return existing Pubkey
     */ getOrCreateStreamMetadata(metadataPubKeys) {
        let metadata;
        let metadataPubKey;
        if (!metadataPubKeys) {
            metadata = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Keypair"].generate();
            metadataPubKey = metadata.publicKey;
        } else {
            metadataPubKey = metadataPubKeys[0];
        }
        return {
            metadata,
            metadataPubKey
        };
    }
    /**
     * Utility function that checks whether the associated stream address is an aligned unlock contract, indicated by whether the sender/creator is a PDA
     */ isAlignedUnlock(streamPublicKey, senderPublicKey) {
        const pda = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$derive$2d$accounts$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deriveContractPDA"])(this.alignedProxyProgram.programId, streamPublicKey);
        return senderPublicKey.equals(pda);
    }
    /**
     * Returns insrtuctions for creating associated token accounts for the provided owners
     */ async getCreateATAInstructions(owners, mint, invoker, checkTokenAccounts, programId) {
        if (!checkTokenAccounts) {
            return [];
        }
        // filter out duplicate PublicKeys, otherwise transaction will fail
        const uniqueOwners = Array.from(new Set(owners.map((owner)=>owner.toBase58()))).map((pkString)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PublicKey"](pkString));
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$common$2f$dist$2f$esm$2f$solana$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["checkOrCreateAtaBatch"])(this.connection, uniqueOwners, mint, invoker, programId);
    }
    async applyCustomAfterInstructions(ixs, customInstructions, metadata) {
        if (customInstructions?.after) {
            const afterInstructions = typeof customInstructions.after === "function" ? await customInstructions.after({
                instructions: ixs,
                metadata
            }) : customInstructions.after;
            ixs.push(...afterInstructions);
        }
    }
}
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/timelockIDL.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    version: "0.1.0",
    name: "timelock",
    instructions: [
        {
            name: "create",
            accounts: [
                {
                    name: "sender",
                    isMut: true,
                    isSigner: true
                },
                {
                    name: "senderTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "recipient",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "metadata",
                    isMut: true,
                    isSigner: true
                },
                {
                    name: "escrowTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "recipientTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "streamflowTreasury",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "streamflowTreasuryTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "withdrawor",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "partner",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "partnerTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "mint",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "feeOracle",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "rent",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "timelockProgram",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "associatedTokenProgram",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "systemProgram",
                    isMut: false,
                    isSigner: false
                }
            ],
            args: [
                {
                    name: "startTime",
                    type: "u64"
                },
                {
                    name: "netAmountDeposited",
                    type: "u64"
                },
                {
                    name: "period",
                    type: "u64"
                },
                {
                    name: "amountPerPeriod",
                    type: "u64"
                },
                {
                    name: "cliff",
                    type: "u64"
                },
                {
                    name: "cliffAmount",
                    type: "u64"
                },
                {
                    name: "cancelableBySender",
                    type: "bool"
                },
                {
                    name: "cancelableByRecipient",
                    type: "bool"
                },
                {
                    name: "automaticWithdrawal",
                    type: "bool"
                },
                {
                    name: "transferableBySender",
                    type: "bool"
                },
                {
                    name: "transferableByRecipient",
                    type: "bool"
                },
                {
                    name: "canTopup",
                    type: "bool"
                },
                {
                    name: "streamName",
                    type: {
                        array: [
                            "u8",
                            64
                        ]
                    }
                },
                {
                    name: "withdrawFrequency",
                    type: "u64"
                }
            ]
        },
        {
            name: "withdraw",
            accounts: [
                {
                    name: "authority",
                    isMut: false,
                    isSigner: true
                },
                {
                    name: "recipient",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "recipientTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "metadata",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "escrowTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "streamflowTreasury",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "streamflowTreasuryTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "partner",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "partnerTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "mint",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false
                }
            ],
            args: [
                {
                    name: "amount",
                    type: "u64"
                }
            ]
        },
        {
            name: "cancel",
            accounts: [
                {
                    name: "authority",
                    isMut: false,
                    isSigner: true
                },
                {
                    name: "sender",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "senderTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "recipient",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "recipientTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "metadata",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "escrowTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "streamflowTreasury",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "streamflowTreasuryTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "partner",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "partnerTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "mint",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false
                }
            ],
            args: []
        },
        {
            name: "transferRecipient",
            accounts: [
                {
                    name: "authority",
                    isMut: true,
                    isSigner: true
                },
                {
                    name: "newRecipient",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "newRecipientTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "metadata",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "mint",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "rent",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "associatedTokenProgram",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "systemProgram",
                    isMut: false,
                    isSigner: false
                }
            ],
            args: []
        },
        {
            name: "topup",
            accounts: [
                {
                    name: "sender",
                    isMut: true,
                    isSigner: true
                },
                {
                    name: "senderTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "metadata",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "escrowTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "streamflowTreasury",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "streamflowTreasuryTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "withdrawor",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "partner",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "partnerTokens",
                    isMut: true,
                    isSigner: false
                },
                {
                    name: "mint",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false
                },
                {
                    name: "systemProgram",
                    isMut: false,
                    isSigner: false
                }
            ],
            args: [
                {
                    name: "amount",
                    type: "u64"
                }
            ]
        }
    ]
};
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
;
;
;
;
}}),
"[project]/node_modules/@streamflow/stream/dist/esm/solana/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$StreamClient$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/StreamClient.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/lib/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$lib$2f$derive$2d$accounts$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/lib/derive-accounts.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/types.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$instructions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/instructions.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$timelockIDL$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/timelockIDL.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$streamflow$2f$stream$2f$dist$2f$esm$2f$solana$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@streamflow/stream/dist/esm/solana/index.js [app-client] (ecmascript) <locals>");
}}),
}]);

//# sourceMappingURL=node_modules_%40streamflow_stream_dist_esm_150d6e._.js.map