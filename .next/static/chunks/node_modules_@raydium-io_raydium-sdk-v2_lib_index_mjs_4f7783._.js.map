{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/api/api.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/accountInfo.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/logger.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/bignumber.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/node_modules/decimal.js/decimal.mjs","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/module/amount.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/module/formatter.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/module/fraction.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/constant.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/token/constant.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/module/token.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/pubKey.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/module/currency.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/module/percent.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/module/price.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/fractionUtil.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/utility.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/date.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/lodash.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/owner.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/pda.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/txTool/txUtils.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/txTool/txType.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/programId.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/transfer.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/txTool/lookupTable.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/txTool/txTool.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/api/type.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/api/url.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/api/utils.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/raydium.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/common/error.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/account/account.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/moduleBase.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/account/instruction.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/account/util.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/node_modules/%40noble/hashes/src/_assert.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/node_modules/%40noble/hashes/src/utils.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/node_modules/%40noble/hashes/src/_md.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/node_modules/%40noble/hashes/src/sha256.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/marshmallow/index.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/marshmallow/buffer-layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/account/layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/farm/farm.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/farm/config.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/farm/layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/farm/instruction.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/farm/pda.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/farm/util.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/liquidity/liquidity.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/instrument.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/utils/tick.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/utils/constants.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/utils/math.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/utils/util.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/utils/pda.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/utils/pool.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/utils/position.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/utils/tickQuery.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/utils/tickarrayBitmap.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/token/layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/token/utils.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/liquidity/constant.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/liquidity/instruction.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/liquidity/layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/liquidity/stable.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/liquidity/utils.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/liquidity/serum.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/marketV2/createMarket.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/marketV2/instrument.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/marketV2/layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/clmm/clmm.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/cpmm/cpmm.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/cpmm/curve/calculator.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/cpmm/curve/constantProduct.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/cpmm/curve/fee.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/cpmm/instruction.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/cpmm/pda.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/cpmm/layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/tradeV2/trade.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/serum/id.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/serum/layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/serum/serum.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/tradeV2/instrument.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/utils1216/utils1216.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/ido/ido.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/ido/instruction.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/ido/layout.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/token/token.ts","file://C%3A/Users/obaji/Desktop/CODING/the-hive-main/node_modules/%40raydium-io/raydium-sdk-v2/src/raydium/type.ts"],"sourcesContent":["import axios, { AxiosInstance } from \"axios\";\n\nimport { createLogger, sleep } from \"../common\";\nimport { Cluster } from \"../solana\";\n\nimport {\n  ApiClmmConfigInfo,\n  ApiCpmmConfigInfo,\n  ApiV3Token,\n  FetchPoolParams,\n  PoolsApiReturn,\n  ApiV3PoolInfoItem,\n  PoolKeys,\n  FormatFarmInfoOut,\n  FormatFarmKeyOut,\n  AvailabilityCheckAPI3,\n  PoolFetchType,\n} from \"./type\";\nimport { API_URLS, API_URL_CONFIG } from \"./url\";\nimport { updateReqHistory } from \"./utils\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { solToWSol } from \"../common\";\n\nconst logger = createLogger(\"Raydium_Api\");\nconst poolKeysCache: Map<string, PoolKeys> = new Map();\n\nexport async function endlessRetry<T>(name: string, call: () => Promise<T>, interval = 1000): Promise<T> {\n  let result: T | undefined;\n\n  while (result == undefined) {\n    try {\n      logger.debug(`Request ${name} through endlessRetry`);\n      result = await call();\n    } catch (err) {\n      logger.error(`Request ${name} failed, retry after ${interval} ms`, err);\n      await sleep(interval);\n    }\n  }\n\n  return result;\n}\n\nexport interface ApiProps {\n  cluster: Cluster;\n  timeout: number;\n  logRequests?: boolean;\n  logCount?: number;\n  urlConfigs?: API_URL_CONFIG;\n}\n\nexport class Api {\n  public cluster: Cluster;\n\n  public api: AxiosInstance;\n  public logCount: number;\n\n  public urlConfigs: API_URL_CONFIG;\n\n  constructor({ cluster, timeout, logRequests, logCount, urlConfigs }: ApiProps) {\n    this.cluster = cluster;\n    this.urlConfigs = urlConfigs || {};\n    this.logCount = logCount || 1000;\n\n    this.api = axios.create({ baseURL: this.urlConfigs.BASE_HOST || API_URLS.BASE_HOST, timeout });\n\n    this.api.interceptors.request.use(\n      (config) => {\n        // before request\n        const { method, baseURL, url } = config;\n\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}`);\n\n        return config;\n      },\n      (error) => {\n        // request error\n        logger.error(`Request failed`);\n\n        return Promise.reject(error);\n      },\n    );\n    this.api.interceptors.response.use(\n      (response) => {\n        // 2xx\n        const { config, data, status } = response;\n        const { method, baseURL, url } = config;\n\n        if (logRequests) {\n          updateReqHistory({\n            status,\n            url: `${baseURL}${url}`,\n            params: config.params,\n            data,\n            logCount: this.logCount,\n          });\n        }\n\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}  ${status}`);\n\n        return data;\n      },\n      (error) => {\n        // https://axios-http.com/docs/handling_errors\n        // not 2xx\n        const { config, response = {} } = error;\n        const { status } = response;\n        const { method, baseURL, url } = config;\n\n        if (logRequests) {\n          updateReqHistory({\n            status,\n            url: `${baseURL}${url}`,\n            params: config.params,\n            data: error.message,\n            logCount: this.logCount,\n          });\n        }\n\n        logger.error(`${method.toUpperCase()} ${baseURL}${url} ${status || error.message}`);\n\n        return Promise.reject(error);\n      },\n    );\n  }\n\n  async getClmmConfigs(): Promise<ApiClmmConfigInfo[]> {\n    const res = await this.api.get(this.urlConfigs.CLMM_CONFIG || API_URLS.CLMM_CONFIG);\n    return res.data;\n  }\n\n  async getCpmmConfigs(): Promise<ApiCpmmConfigInfo[]> {\n    const res = await this.api.get(this.urlConfigs.CPMM_CONFIG || API_URLS.CPMM_CONFIG);\n    return res.data;\n  }\n\n  async getClmmPoolLines(poolId: string): Promise<{ price: string; liquidity: string }[]> {\n    const res = await this.api.get(\n      `${this.urlConfigs.POOL_LIQUIDITY_LINE || API_URLS.POOL_LIQUIDITY_LINE}?pool_id=${poolId}`,\n    );\n    return res.data;\n  }\n\n  async getBlockSlotCountForSecond(endpointUrl?: string): Promise<number> {\n    if (!endpointUrl) return 2;\n    const res: {\n      id: string;\n      jsonrpc: string;\n      result: { numSlots: number; numTransactions: number; samplePeriodSecs: number; slot: number }[];\n    } = await axios.post(endpointUrl, {\n      id: \"getRecentPerformanceSamples\",\n      jsonrpc: \"2.0\",\n      method: \"getRecentPerformanceSamples\",\n      params: [4],\n    });\n    const slotList = res.result.map((data) => data.numSlots);\n    return slotList.reduce((a, b) => a + b, 0) / slotList.length / 60;\n  }\n\n  async getChainTimeOffset(): Promise<{ offset: number }> {\n    const res = await this.api.get(this.urlConfigs.CHAIN_TIME || API_URLS.CHAIN_TIME);\n    return res.data;\n  }\n\n  async getRpcs(): Promise<{\n    rpcs: { batch: boolean; name: string; url: string; weight: number }[];\n    strategy: string;\n  }> {\n    return this.api.get(this.urlConfigs.RPCS || API_URLS.RPCS);\n  }\n\n  async getTokenList(): Promise<{ mintList: ApiV3Token[]; blacklist: ApiV3Token[]; whiteList: string[] }> {\n    const res = await this.api.get(this.urlConfigs.TOKEN_LIST || API_URLS.TOKEN_LIST);\n    return res.data;\n  }\n\n  async getJupTokenList(): Promise<\n    (ApiV3Token & {\n      daily_volume: number;\n      freeze_authority: string | null;\n      mint_authority: string | null;\n    })[]\n  > {\n    return this.api.get(\"\", {\n      baseURL: this.urlConfigs.JUP_TOKEN_LIST || API_URLS.JUP_TOKEN_LIST,\n    });\n  }\n\n  async getTokenInfo(mint: (string | PublicKey)[]): Promise<ApiV3Token[]> {\n    const res = await this.api.get(\n      (this.urlConfigs.MINT_INFO_ID || API_URLS.MINT_INFO_ID) + `?mints=${mint.map((m) => m.toString()).join(\",\")}`,\n    );\n    return res.data;\n  }\n\n  async getPoolList(props: FetchPoolParams = {}): Promise<PoolsApiReturn> {\n    const { type = \"all\", sort = \"liquidity\", order = \"desc\", page = 0, pageSize = 100 } = props;\n    const res = await this.api.get<PoolsApiReturn>(\n      (this.urlConfigs.POOL_LIST || API_URLS.POOL_LIST) +\n        `?poolType=${type}&poolSortField=${sort}&sortType=${order}&page=${page}&pageSize=${pageSize}`,\n    );\n    return res.data;\n  }\n\n  async fetchPoolById(props: { ids: string }): Promise<ApiV3PoolInfoItem[]> {\n    const { ids } = props;\n    const res = await this.api.get((this.urlConfigs.POOL_SEARCH_BY_ID || API_URLS.POOL_SEARCH_BY_ID) + `?ids=${ids}`);\n    return res.data;\n  }\n\n  async fetchPoolKeysById(props: { idList: string[] }): Promise<PoolKeys[]> {\n    const { idList } = props;\n\n    const cacheList: PoolKeys[] = [];\n\n    const readyList = idList.filter((poolId) => {\n      if (poolKeysCache.has(poolId)) {\n        cacheList.push(poolKeysCache.get(poolId)!);\n        return false;\n      }\n      return true;\n    });\n\n    let data: PoolKeys[] = [];\n    if (readyList.length) {\n      const res = await this.api.get<PoolKeys[]>(\n        (this.urlConfigs.POOL_KEY_BY_ID || API_URLS.POOL_KEY_BY_ID) + `?ids=${readyList.join(\",\")}`,\n      );\n      data = res.data.filter(Boolean);\n      data.forEach((poolKey) => {\n        poolKeysCache.set(poolKey.id, poolKey);\n      });\n    }\n\n    return cacheList.concat(data);\n  }\n\n  async fetchPoolByMints(\n    props: {\n      mint1: string | PublicKey;\n      mint2?: string | PublicKey;\n    } & Omit<FetchPoolParams, \"pageSize\">,\n  ): Promise<PoolsApiReturn> {\n    const {\n      mint1: propMint1,\n      mint2: propMint2,\n      type = PoolFetchType.All,\n      sort = \"default\",\n      order = \"desc\",\n      page = 1,\n    } = props;\n\n    const [mint1, mint2] = [\n      propMint1 ? solToWSol(propMint1).toBase58() : propMint1,\n      propMint2 && propMint2 !== \"undefined\" ? solToWSol(propMint2).toBase58() : \"\",\n    ];\n    const [baseMint, quoteMint] = mint2 && mint1 > mint2 ? [mint2, mint1] : [mint1, mint2];\n\n    const res = await this.api.get(\n      (this.urlConfigs.POOL_SEARCH_MINT || API_URLS.POOL_SEARCH_MINT) +\n        `?mint1=${baseMint}&mint2=${quoteMint}&poolType=${type}&poolSortField=${sort}&sortType=${order}&pageSize=100&page=${page}`,\n    );\n    return res.data;\n  }\n\n  async fetchFarmInfoById(props: { ids: string }): Promise<FormatFarmInfoOut[]> {\n    const { ids } = props;\n\n    const res = await this.api.get<FormatFarmInfoOut[]>(\n      (this.urlConfigs.FARM_INFO || API_URLS.FARM_INFO) + `?ids=${ids}`,\n    );\n    return res.data;\n  }\n\n  async fetchFarmKeysById(props: { ids: string }): Promise<FormatFarmKeyOut[]> {\n    const { ids } = props;\n\n    const res = await this.api.get<FormatFarmKeyOut[]>(\n      (this.urlConfigs.FARM_KEYS || API_URLS.FARM_KEYS) + `?ids=${ids}`,\n    );\n    return res.data;\n  }\n\n  async fetchAvailabilityStatus(): Promise<AvailabilityCheckAPI3> {\n    const res = await this.api.get<AvailabilityCheckAPI3>(\n      this.urlConfigs.CHECK_AVAILABILITY || API_URLS.CHECK_AVAILABILITY,\n    );\n    return res.data;\n  }\n}\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\nimport { ReturnTypeFetchMultipleMintInfos } from \"../raydium/type\";\nimport { WSOLMint, chunkArray, solToWSol } from \"./\";\nimport { createLogger } from \"./logger\";\nimport { MINT_SIZE, TOKEN_PROGRAM_ID, getTransferFeeConfig, unpackMint } from \"@solana/spl-token\";\n\ninterface MultipleAccountsJsonRpcResponse {\n  jsonrpc: string;\n  id: string;\n  error?: {\n    code: number;\n    message: string;\n  };\n  result: {\n    context: { slot: number };\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\n  };\n}\n\nexport interface GetMultipleAccountsInfoConfig {\n  batchRequest?: boolean;\n  commitment?: Commitment;\n  chunkCount?: number;\n}\n\nconst logger = createLogger(\"Raydium_accountInfo_util\");\n\nexport async function getMultipleAccountsInfo(\n  connection: Connection,\n  publicKeys: PublicKey[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  const {\n    batchRequest,\n    commitment = \"confirmed\",\n    chunkCount = 100,\n  } = {\n    batchRequest: false,\n    ...config,\n  };\n\n  const chunkedKeys = chunkArray(publicKeys, chunkCount);\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\n\n  if (batchRequest) {\n    const batch = chunkedKeys.map((keys) => {\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\n      return {\n        methodName: \"getMultipleAccounts\",\n        args,\n      };\n    });\n\n    const _batch = chunkArray(batch, 10);\n\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await (\n      await Promise.all(_batch.map(async (i) => await (connection as any)._rpcBatchRequest(i)))\n    ).flat();\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\n      if (unsafeRes.error)\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\n\n      return unsafeRes.result.value.map((accountInfo) => {\n        if (accountInfo) {\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\n\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\n\n          return {\n            data: Buffer.from(data[0], \"base64\"),\n            executable,\n            lamports,\n            owner: new PublicKey(owner),\n            rentEpoch,\n          };\n        }\n        return null;\n      });\n    });\n  } else {\n    try {\n      results = (await Promise.all(\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\n      )) as (AccountInfo<Buffer> | null)[][];\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\n      }\n    }\n  }\n\n  return results.flat();\n}\n\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\n  connection: Connection,\n  publicKeysWithCustomFlag: T[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\n    connection,\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\n    config,\n  );\n\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\n}\n\nexport enum AccountType {\n  Uninitialized,\n  Mint,\n  Account,\n}\nexport const ACCOUNT_TYPE_SIZE = 1;\n\nexport async function fetchMultipleMintInfos({\n  connection,\n  mints,\n  config,\n}: {\n  connection: Connection;\n  mints: PublicKey[];\n  config?: { batchRequest?: boolean };\n}): Promise<ReturnTypeFetchMultipleMintInfos> {\n  if (mints.length === 0) return {};\n  const mintInfos = await getMultipleAccountsInfoWithCustomFlags(\n    connection,\n    mints.map((i) => ({ pubkey: solToWSol(i) })),\n    config,\n  );\n\n  const mintK: ReturnTypeFetchMultipleMintInfos = {};\n  for (const i of mintInfos) {\n    if (!i.accountInfo || i.accountInfo.data.length < MINT_SIZE) {\n      console.log(\"invalid mint account\", i.pubkey.toBase58());\n      continue;\n    }\n    const t = unpackMint(i.pubkey, i.accountInfo, i.accountInfo?.owner);\n    mintK[i.pubkey.toString()] = {\n      ...t,\n      programId: i.accountInfo?.owner || TOKEN_PROGRAM_ID,\n      feeConfig: getTransferFeeConfig(t) ?? undefined,\n    };\n  }\n  mintK[PublicKey.default.toBase58()] = mintK[WSOLMint.toBase58()];\n\n  return mintK;\n}\n","import { get, set } from \"lodash\";\n\nexport type ModuleName = \"Common.Api\";\n\nexport enum LogLevel {\n  Error,\n  Warning,\n  Info,\n  Debug,\n}\nexport class Logger {\n  private logLevel: LogLevel;\n  private name: string;\n  constructor(params: { name: string; logLevel?: LogLevel }) {\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\n    this.name = params.name;\n  }\n\n  set level(logLevel: LogLevel) {\n    this.logLevel = logLevel;\n  }\n  get time(): string {\n    return Date.now().toString();\n  }\n  get moduleName(): string {\n    return this.name;\n  }\n\n  private isLogLevel(level: LogLevel): boolean {\n    return level <= this.logLevel;\n  }\n\n  public error(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Error)) return this;\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\n    return this;\n  }\n\n  public logWithError(...props): Logger {\n    // this.error(...props)\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\n    throw new Error(msg);\n  }\n\n  public warning(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\n    return this;\n  }\n\n  public info(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Info)) return this;\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\n    return this;\n  }\n\n  public debug(...props): Logger {\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\n    return this;\n  }\n}\n\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\n\nexport function createLogger(moduleName: string): Logger {\n  let logger = get(moduleLoggers, moduleName);\n  if (!logger) {\n    // default level is error\n    const logLevel = get(moduleLevels, moduleName);\n\n    logger = new Logger({ name: moduleName, logLevel });\n    set(moduleLoggers, moduleName, logger);\n  }\n\n  return logger;\n}\n\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\n  set(moduleLevels, moduleName, level);\n\n  const logger = get(moduleLoggers, moduleName);\n  if (logger) logger.level = level;\n}\n","import BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport { CurrencyAmount, TokenAmount } from \"../module/amount\";\nimport { Currency } from \"../module/currency\";\nimport { Fraction } from \"../module/fraction\";\nimport { Percent } from \"../module/percent\";\nimport { Price } from \"../module/price\";\nimport { Token } from \"../module/token\";\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\nimport { ReplaceType } from \"../raydium/type\";\nimport { parseBigNumberish } from \"./constant\";\nimport { mul } from \"./fractionUtil\";\nimport { notInnerObject } from \"./utility\";\n\nexport const BN_ZERO = new BN(0);\nexport const BN_ONE = new BN(1);\nexport const BN_TWO = new BN(2);\nexport const BN_THREE = new BN(3);\nexport const BN_FIVE = new BN(5);\nexport const BN_TEN = new BN(10);\nexport const BN_100 = new BN(100);\nexport const BN_1000 = new BN(1000);\nexport const BN_10000 = new BN(10000);\nexport type BigNumberish = BN | string | number | bigint;\nexport type Numberish = number | string | bigint | Fraction | BN;\n\n\nexport function tenExponential(shift: BigNumberish): BN {\n  return BN_TEN.pow(parseBigNumberish(shift));\n}\n\n/**\n *\n * @example\n * getIntInfo(0.34) => { numerator: '34', denominator: '100'}\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\n */\nexport function parseNumberInfo(n: Numberish | undefined): {\n  denominator: string;\n  numerator: string;\n  sign?: string;\n  int?: string;\n  dec?: string;\n} {\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\n  if (n instanceof BN) {\n    return { numerator: n.toString(), denominator: \"1\" };\n  }\n\n  if (n instanceof Fraction) {\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\n  }\n\n  const s = String(n);\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\n  const denominator = \"1\" + \"0\".repeat(dec.length);\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\n  return { denominator, numerator, sign, int, dec };\n}\n\n// round up\nexport function divCeil(a: BN, b: BN): BN {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const dm = a.divmod(b);\n\n  // Fast case - exact division\n  if (dm.mod.isZero()) return dm.div;\n\n  // Round up\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\n}\n\nexport function shakeFractionDecimal(n: Fraction): string {\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\n  return `${sign}${int}`;\n}\n\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\n  if (n instanceof BN) return n;\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\n}\n\nexport function toFraction(value: Numberish): Fraction {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\n\n  if (value instanceof Price) return value.adjusted;\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount)\n    try {\n      return toFraction(value.toExact());\n    } catch {\n      return new Fraction(BN_ZERO);\n    }\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return value;\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return new Fraction(details.numerator, details.denominator);\n}\n\n/**\n * @example\n * toPercent(3.14) // => Percent { 314.00% }\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\n */\nexport function toPercent(\n  n: Numberish,\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\n): Percent {\n  const { numerator, denominator } = parseNumberInfo(n);\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\n}\n\nexport function toTokenPrice(params: {\n  token: TokenJson | Token | SplToken;\n  numberPrice: Numberish;\n  decimalDone?: boolean;\n}): Price {\n  const { token, numberPrice, decimalDone } = params;\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\n\n  return new Price({\n    baseToken: usdCurrency,\n    denominator: parsedDenominator.toString(),\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\n    numerator: parsedNumerator.toString(),\n  });\n}\n\nexport function toUsdCurrency(amount: Numberish): CurrencyAmount {\n  const usdCurrency = new Currency({ decimals: 6, symbol: \"usd\", name: \"usd\" });\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\n  return new CurrencyAmount(usdCurrency, amountBigNumber);\n}\n\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): CurrencyAmount {\n  if (!price || !amount) return toUsdCurrency(0);\n  return toUsdCurrency(mul(amount, price)!);\n}\n\nexport function decimalToFraction(n: Decimal | undefined): Fraction | undefined {\n  if (n == null) return undefined;\n  const { numerator, denominator } = parseNumberInfo(n.toString());\n  return new Fraction(numerator, denominator);\n}\n\nexport function isDecimal(val: unknown): boolean {\n  return val instanceof Decimal;\n}\n\nexport function recursivelyDecimalToFraction<T>(info: T): ReplaceType<T, Decimal, Fraction> {\n  // @ts-expect-error no need type for inner code\n  return isDecimal(info)\n    ? decimalToFraction(info as any)\n    : Array.isArray(info)\n      ? info.map((k) => recursivelyDecimalToFraction(k))\n      : notInnerObject(info)\n        ? Object.fromEntries(Object.entries(info as any).map(([k, v]) => [k, recursivelyDecimalToFraction(v)]))\n        : info;\n}\n","/*\r\n *  decimal.js v10.3.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\n\nimport { BigNumberish, BN_TEN } from \"../common/bignumber\";\nimport { createLogger, Logger } from \"../common/logger\";\n\nimport { parseBigNumberish, Rounding } from \"../common\";\nimport { Currency } from \"./currency\";\nimport toFormat, { WrappedBig } from \"./formatter\";\nimport { Fraction } from \"./fraction\";\nimport { Token } from \"./token\";\n\nconst logger = createLogger(\"Raydium_amount\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nexport function splitNumber(num: string, decimals: number): [string, string] {\n  let integral = \"0\";\n  let fractional = \"0\";\n\n  if (num.includes(\".\")) {\n    const splited = num.split(\".\");\n    if (splited.length === 2) {\n      [integral, fractional] = splited;\n      fractional = fractional.padEnd(decimals, \"0\");\n    } else {\n      logger.logWithError(`invalid number string, num: ${num}`);\n    }\n  } else {\n    integral = num;\n  }\n\n  // fix decimals is 0\n  return [integral, fractional.slice(0, decimals) || fractional];\n}\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token;\n  protected logger: Logger;\n\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\n    let parsedAmount = new BN(0);\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\n\n    if (isRaw) {\n      parsedAmount = parseBigNumberish(amount);\n    } else {\n      let integralAmount = new BN(0);\n      let fractionalAmount = new BN(0);\n\n      // parse fractional string\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\n        integralAmount = parseBigNumberish(integral);\n        fractionalAmount = parseBigNumberish(fractional);\n      }\n\n      integralAmount = integralAmount.mul(multiplier);\n      parsedAmount = integralAmount.add(fractionalAmount);\n    }\n\n    super(parsedAmount, multiplier);\n    this.logger = createLogger(name || \"TokenAmount\");\n    this.token = token;\n  }\n\n  public get raw(): BN {\n    return this.numerator;\n  }\n  public isZero(): boolean {\n    return this.raw.isZero();\n  }\n  public gt(other: TokenAmount): boolean {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\n    return this.raw.gt(other.raw);\n  }\n\n  /**\n   * a less than b\n   */\n  public lt(other: TokenAmount): boolean {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\n    return this.raw.lt(other.raw);\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\n    return new TokenAmount(this.token, this.raw.add(other.raw));\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\n  }\n\n  public toSignificant(\n    significantDigits = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  /**\n   * To fixed\n   *\n   * @example\n   * ```\n   * 1 -> 1.000000000\n   * 1.234 -> 1.234000000\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toFixed(\n    decimalPlaces = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  /**\n   * To exact\n   *\n   * @example\n   * ```\n   * 1 -> 1\n   * 1.234 -> 1.234\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toExact(format: object = { groupSeparator: \"\" }): string {\n    Big.DP = this.token.decimals;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  }\n}\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency;\n  protected logger: Logger;\n\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true, name?: string) {\n    let parsedAmount = new BN(0);\n    const multiplier = BN_TEN.pow(new BN(currency.decimals));\n\n    if (isRaw) {\n      parsedAmount = parseBigNumberish(amount);\n    } else {\n      let integralAmount = new BN(0);\n      let fractionalAmount = new BN(0);\n\n      // parse fractional string\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\n        integralAmount = parseBigNumberish(integral);\n        fractionalAmount = parseBigNumberish(fractional);\n      }\n\n      integralAmount = integralAmount.mul(multiplier);\n      parsedAmount = integralAmount.add(fractionalAmount);\n    }\n\n    super(parsedAmount, multiplier);\n    this.logger = createLogger(name || \"TokenAmount\");\n    this.currency = currency;\n  }\n\n  public get raw(): BN {\n    return this.numerator;\n  }\n\n  public isZero(): boolean {\n    return this.raw.isZero();\n  }\n\n  /**\n   * a greater than b\n   */\n  public gt(other: CurrencyAmount): boolean {\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"gt currency not equals\");\n    return this.raw.gt(other.raw);\n  }\n\n  /**\n   * a less than b\n   */\n  public lt(other: CurrencyAmount): boolean {\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"lt currency not equals\");\n    return this.raw.lt(other.raw);\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"add currency not equals\");\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\n  }\n\n  public sub(other: CurrencyAmount): CurrencyAmount {\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"sub currency not equals\");\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\n  }\n\n  public toSignificant(\n    significantDigits = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  /**\n   * To fixed\n   *\n   * @example\n   * ```\n   * 1 -> 1.000000000\n   * 1.234 -> 1.234000000\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toFixed(\n    decimalPlaces = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    if (decimalPlaces > this.currency.decimals) this.logger.logWithError(\"decimals overflow\");\n\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  /**\n   * To exact\n   *\n   * @example\n   * ```\n   * 1 -> 1\n   * 1.234 -> 1.234\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toExact(format: object = { groupSeparator: \"\" }): string {\n    Big.DP = this.currency.decimals;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  }\n}\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\nimport _toFarmat from \"toformat\";\n\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\ninterface FormatOptions {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n  groupSize?: number;\n  fractionGroupSeparator?: string;\n  fractionGroupSize?: number;\n}\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\n  new (value: BigSource): WrappedBig;\n  (value: BigSource): WrappedBig;\n  (): WrappedBigConstructor;\n\n  format: FormatOptions;\n}\nexport interface WrappedBig extends Big {\n  add(n: BigSource): WrappedBig;\n  abs(): WrappedBig;\n  div(n: BigSource): WrappedBig;\n  minus(n: BigSource): WrappedBig;\n  mod(n: BigSource): WrappedBig;\n  mul(n: BigSource): WrappedBig;\n  plus(n: BigSource): WrappedBig;\n  pow(exp: number): WrappedBig;\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\n  sqrt(): WrappedBig;\n  sub(n: BigSource): WrappedBig;\n  times(n: BigSource): WrappedBig;\n  toFormat(): string;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\ntype DecimalConstructor = typeof Decimal;\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\n  new (value: Numeric): WrappedDecimal;\n  clone(config?: Config): WrappedDecimalConstructor;\n  config(config: Config): WrappedDecimal;\n  set(config: Config): WrappedDecimal;\n  format: FormatOptions;\n}\nexport interface WrappedDecimal extends Decimal {\n  absoluteValue(): WrappedDecimal;\n  abs(): WrappedDecimal;\n  dividedBy(y: Numeric): WrappedDecimal;\n  div(y: Numeric): WrappedDecimal;\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\n  idiv(y: Numeric): WrappedDecimal;\n  logarithm(base?: Numeric): WrappedDecimal;\n  log(base?: Numeric): WrappedDecimal;\n  minus(y: Numeric): WrappedDecimal;\n  sub(y: Numeric): WrappedDecimal;\n  modulo(y: Numeric): WrappedDecimal;\n  mod(y: Numeric): WrappedDecimal;\n  naturalExponetial(): WrappedDecimal;\n  exp(): WrappedDecimal;\n  naturalLogarithm(): WrappedDecimal;\n  ln(): WrappedDecimal;\n  negated(): WrappedDecimal;\n  neg(): WrappedDecimal;\n  plus(y: Numeric): WrappedDecimal;\n  add(y: Numeric): WrappedDecimal;\n  squareRoot(): WrappedDecimal;\n  sqrt(): WrappedDecimal;\n  times(y: Numeric): WrappedDecimal;\n  mul(y: Numeric): WrappedDecimal;\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\n  todp(dp?: number, rm?: number): WrappedDecimal;\n  toInteger(): WrappedDecimal;\n  toint(): WrappedDecimal;\n  toPower(y: Numeric): WrappedDecimal;\n  pow(y: Numeric): WrappedDecimal;\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\n  tosd(sd?: number, rm?: number): WrappedDecimal;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\nconst toFormat: {\n  (fn: BigConstructor): WrappedBigConstructor;\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\n} = _toFarmat;\nexport default toFormat;\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\nimport _Decimal from \"decimal.js-light\";\n\nimport { BigNumberish } from \"../common/bignumber\";\nimport { createLogger } from \"../common/logger\";\n\nimport { parseBigNumberish, Rounding } from \"../common/constant\";\nimport toFormat, { WrappedBig } from \"./formatter\";\n\nconst logger = createLogger(\"module/fraction\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nconst Decimal = toFormat(_Decimal);\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\n  [Rounding.ROUND_UP]: _Big.roundUp,\n};\n\nexport class Fraction {\n  public readonly numerator: BN;\n  public readonly denominator: BN;\n\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = new BN(1)) {\n    this.numerator = parseBigNumberish(numerator);\n    this.denominator = parseBigNumberish(denominator);\n  }\n\n  public get quotient(): BN {\n    return this.numerator.div(this.denominator);\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  public add(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  public sub(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  public mul(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\n  }\n\n  public div(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\n\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding] || 1;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n\n  public isZero(): boolean {\n    return this.numerator.isZero();\n  }\n}\n","import BN from \"bn.js\";\nimport { BigNumberish } from \"./bignumber\";\nimport { createLogger } from \"./logger\";\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\nexport function parseBigNumberish(value: BigNumberish): BN {\n  const logger = createLogger(\"Raydium_parseBigNumberish\");\n  // BN\n  if (value instanceof BN) {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    if (value.match(/^-?[0-9]+$/)) {\n      return new BN(value);\n    }\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\n  }\n\n  if (typeof value === \"number\") {\n    if (value % 1) {\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\n    }\n\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\n    }\n\n    return new BN(String(value));\n  }\n\n  if (typeof value === \"bigint\") {\n    return new BN(value.toString());\n  }\n  logger.error(`invalid BigNumberish value: ${value}`);\n  return new BN(0); // never reach, because logWithError will throw error\n}","import { PublicKey } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { TokenInfo } from \"./type\";\n\nexport const SOL_INFO: TokenInfo = {\n  chainId: 101,\n  address: PublicKey.default.toBase58(),\n  programId: TOKEN_PROGRAM_ID.toBase58(),\n  decimals: 9,\n  symbol: \"SOL\",\n  name: \"solana\",\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\n  tags: [],\n  priority: 2,\n  type: \"raydium\",\n  extensions: {\n    coingeckoId: \"solana\",\n  },\n};\n\nexport const TOKEN_WSOL: TokenInfo = {\n  chainId: 101,\n  address: \"So11111111111111111111111111111111111111112\",\n  programId: TOKEN_PROGRAM_ID.toBase58(),\n  decimals: 9,\n  symbol: \"WSOL\",\n  name: \"Wrapped SOL\",\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\n  tags: [],\n  priority: 2,\n  type: \"raydium\",\n  extensions: {\n    coingeckoId: \"solana\",\n  },\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\n\n/**\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\n */\nexport interface TokenProps {\n  mint: PublicKeyish;\n  decimals: number;\n  symbol?: string;\n  name?: string;\n  skipMint?: boolean;\n  isToken2022?: boolean;\n}\n\nexport class Token {\n  public readonly symbol?: string;\n  public readonly name?: string;\n  public readonly decimals: number;\n  public readonly isToken2022: boolean;\n\n  public readonly mint: PublicKey;\n  public static readonly WSOL: Token = new Token({\n    ...TOKEN_WSOL,\n    mint: TOKEN_WSOL.address,\n  });\n\n  /**\n   *\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\n   */\n  public constructor({ mint, decimals, symbol, name, skipMint = false, isToken2022 = false }: TokenProps) {\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\n      this.decimals = TOKEN_WSOL.decimals;\n      this.symbol = TOKEN_WSOL.symbol;\n      this.name = TOKEN_WSOL.name;\n      this.mint = new PublicKey(TOKEN_WSOL.address);\n      this.isToken2022 = false;\n      return;\n    }\n\n    this.decimals = decimals;\n    this.symbol = symbol || mint.toString().substring(0, 6);\n    this.name = name || mint.toString().substring(0, 6);\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\n    this.isToken2022 = isToken2022;\n  }\n\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n    return this.mint.equals(other.mint);\n  }\n}\n","import { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\ninterface AccountMetaProps {\n  pubkey: PublicKey;\n  isSigner?: boolean;\n  isWritable?: boolean;\n}\n\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\n  return {\n    pubkey,\n    isWritable,\n    isSigner,\n  };\n}\n\nexport const commonSystemAccountMeta = [\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n];\n\nexport type PublicKeyish = PublicKey | string;\n\nexport function validateAndParsePublicKey({\n  publicKey: orgPubKey,\n  transformSol,\n}: {\n  publicKey: PublicKeyish;\n  transformSol?: boolean;\n}): PublicKey {\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\n\n  if (publicKey instanceof PublicKey) {\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\n    return publicKey;\n  }\n\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\n\n  if (typeof publicKey === \"string\") {\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\n    try {\n      const key = new PublicKey(publicKey);\n      return key;\n    } catch {\n      throw new Error(\"invalid public key\");\n    }\n  }\n\n  throw new Error(\"invalid public key\");\n}\n\nexport function tryParsePublicKey(v: string): PublicKey | string {\n  try {\n    return new PublicKey(v);\n  } catch (e) {\n    return v;\n  }\n}\n\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\n\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\nexport const SOLMint = PublicKey.default;\n\nexport function solToWSol(mint: PublicKeyish): PublicKey {\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\n}\n","import { SOL_INFO } from \"../raydium/token/constant\";\n\nimport { Token } from \"./token\";\n\ninterface CurrencyProps {\n  decimals: number;\n  symbol?: string;\n  name?: string;\n}\n/**\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\n * The only instance of the base class `Currency` is SOL.\n */\nexport class Currency {\n  public readonly symbol?: string;\n  public readonly name?: string;\n  public readonly decimals: number;\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly SOL: Currency = new Currency(SOL_INFO);\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\n   * @param decimals - decimals of the currency\n   * @param symbol - symbol of the currency\n   * @param name - name of the currency\n   */\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n  }\n\n  public equals(other: Currency): boolean {\n    return this === other;\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n","import BN from \"bn.js\";\nimport { Rounding } from \"../common\";\nimport { Fraction } from \"./fraction\";\n\nexport const _100_PERCENT = new Fraction(new BN(100));\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import { Rounding } from \"../common\";\nimport { BigNumberish, tenExponential } from \"../common/bignumber\";\nimport { createLogger } from \"../common/logger\";\n\nimport { Fraction } from \"./fraction\";\nimport { Token } from \"./token\";\n\nconst logger = createLogger(\"Raydium_price\");\n\ninterface PriceProps {\n  baseToken: Token;\n  denominator: BigNumberish;\n  quoteToken: Token;\n  numerator: BigNumberish;\n}\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token; // input i.e. denominator\n  public readonly quoteToken: Token; // output i.e. numerator\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n  public readonly scalar: Fraction;\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(params: PriceProps) {\n    const { baseToken, quoteToken, numerator, denominator } = params;\n    super(numerator, denominator);\n\n    this.baseToken = baseToken;\n    this.quoteToken = quoteToken;\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  public get adjusted(): Fraction {\n    return super.mul(this.scalar);\n  }\n\n  public invert(): Price {\n    return new Price({\n      baseToken: this.quoteToken,\n      quoteToken: this.baseToken,\n      denominator: this.numerator,\n      numerator: this.denominator,\n    });\n  }\n\n  public mul(other: Price): Price {\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\n\n    const fraction = super.mul(other);\n    return new Price({\n      baseToken: this.baseToken,\n      quoteToken: other.quoteToken,\n      denominator: fraction.denominator,\n      numerator: fraction.numerator,\n    });\n  }\n\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import { Fraction, Percent, Price, TokenAmount } from \"../module\";\n\nimport { BN_ZERO, Numberish, parseNumberInfo } from \"./bignumber\";\n\nexport default function toFraction(value: Numberish): Fraction {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\n\n  if (value instanceof Price) return value.adjusted;\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount)\n    try {\n      return toFraction(value.toExact());\n    } catch {\n      return new Fraction(BN_ZERO);\n    }\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return value;\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return new Fraction(details.numerator, details.denominator);\n}\n\nexport function toFractionWithDecimals(value: Numberish): { fr: Fraction; decimals?: number } {\n  //  to complete math format(may have decimal), not int\n  if (value instanceof Percent) return { fr: new Fraction(value.numerator, value.denominator) };\n\n  if (value instanceof Price) return { fr: value.adjusted };\n\n  // to complete math format(may have decimal), not BN\n  if (value instanceof TokenAmount) return { fr: toFraction(value.toExact()), decimals: value.token.decimals };\n\n  // do not ideal with other fraction value\n  if (value instanceof Fraction) return { fr: value };\n\n  // wrap to Fraction\n  const n = String(value);\n  const details = parseNumberInfo(n);\n  return { fr: new Fraction(details.numerator, details.denominator), decimals: details.dec?.length };\n}\n\nexport function lt(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  fa.sub(fb).numerator;\n  return fa.sub(fb).numerator.lt(BN_ZERO);\n}\n\nexport function gt(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.gt(BN_ZERO);\n}\n\nexport function lte(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.lte(BN_ZERO);\n}\n\nexport function gte(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.gte(BN_ZERO);\n}\n\nexport function eq(a: Numberish | undefined, b: Numberish | undefined): boolean {\n  if (a == null || b == null) return false;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb).numerator.eq(BN_ZERO);\n}\n\nexport function div(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  try {\n    return fa.div(fb); // if fb is zero , operation will throw error\n  } catch {\n    return fa;\n  }\n}\n\nexport function sub(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.sub(fb);\n}\n\nexport function isMeaningfulNumber(n: Numberish | undefined): n is Numberish {\n  if (n == null) return false;\n  return !eq(n, 0);\n}\n\nexport function getMax(a: Numberish, b: Numberish): Numberish {\n  return gt(b, a) ? b : a;\n}\n\nexport function mul(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.mul(fb);\n}\n\nexport function add(a: Numberish | undefined, b: Numberish | undefined): Fraction | undefined {\n  if (a == null || b == null) return undefined;\n  const fa = toFraction(a);\n  const fb = toFraction(b);\n  return fa.add(fb);\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\nimport { ReplaceType } from \"../raydium/type\";\n\nimport { tryParsePublicKey } from \"./pubKey\";\n\nexport async function sleep(ms: number): Promise<void> {\n  new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function getTimestamp(): number {\n  return new Date().getTime();\n}\n\nexport function notInnerObject(v: unknown): v is Record<string, any> {\n  return (\n    typeof v === \"object\" &&\n    v !== null &&\n    ![Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent].some((o) => typeof o === \"object\" && v instanceof o)\n  );\n}\n\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\n  // @ts-expect-error no need type for inner code\n  return typeof jsonInfo === \"string\"\n    ? tryParsePublicKey(jsonInfo)\n    : Array.isArray(jsonInfo)\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\n    : notInnerObject(jsonInfo)\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\n    : jsonInfo;\n}\n","export type TimeStamp = string | number | Date;\n\nexport const isNumber = (val): boolean => typeof val === \"number\";\nexport type DateParam = string | number | Date | undefined;\n\nexport const getDate = (value?: DateParam): Date => (value ? new Date(value) : new Date());\nexport const getTime = (value?: DateParam): number => getDate(value).getTime();\n\n/** A must be milliseconds */\nexport function isDateBefore(timestampA: TimeStamp, timestampB: TimeStamp, options?: { unit?: \"ms\" | \"s\" }): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() <= realTimestampB;\n}\n\n/** A must be milliseconds */\nexport function isDateAfter(timestampA: TimeStamp, timestampB: TimeStamp, options?: { unit?: \"ms\" | \"s\" }): boolean {\n  const realTimestampB = isNumber(timestampB)\n    ? (timestampB as number) * (options?.unit === \"s\" ? 1000 : 1)\n    : timestampB;\n  return new Date(timestampA).getTime() > realTimestampB;\n}\n\nexport function offsetDateTime(\n  baseDate: DateParam,\n  offset: {\n    days?: number;\n    hours?: number;\n    minutes?: number;\n    seconds?: number;\n    milliseconds?: number;\n  },\n): Date {\n  const timestamp = getTime(baseDate);\n  const offsetedTimestamp =\n    timestamp +\n    (offset.days ? offset.days * 24 * 60 * 60 * 1000 : 0) +\n    (offset.hours ? offset.hours * 60 * 60 * 1000 : 0) +\n    (offset.minutes ? offset.minutes * 60 * 1000 : 0) +\n    (offset.seconds ? offset.seconds * 1000 : 0) +\n    (offset.milliseconds ? offset.milliseconds : 0);\n  return getDate(offsetedTimestamp);\n}\n","/**\n * https://youmightnotneed.com/lodash/\n */\n\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\n  const tmp = [...arr];\n  if (chunkSize <= 0) return cache;\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\n  return cache;\n}\n\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\n}\n\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\n}\n\nexport function uniq<T>(arr: T[]): T[] {\n  return [...new Set(arr)];\n}\n","import { Keypair, PublicKey, Signer } from \"@solana/web3.js\";\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { findProgramAddress } from \"./txTool/txUtils\";\n\nexport function getATAAddress(\n  owner: PublicKey,\n  mint: PublicKey,\n  programId?: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [owner.toBuffer(), (programId ?? TOKEN_PROGRAM_ID).toBuffer(), mint.toBuffer()],\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"),\n  );\n}\n","import {\n  Commitment,\n  ComputeBudgetProgram,\n  Connection,\n  EpochInfo,\n  Keypair,\n  PublicKey,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\n\nimport { createLogger } from \"../logger\";\nimport { CacheLTA } from \"./lookupTable\";\nimport { InstructionType } from \"./txType\";\n\nimport { ComputeBudgetConfig } from \"../../raydium/type\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nconst logger = createLogger(\"Raydium_txUtil\");\n\nexport const MAX_BASE64_SIZE = 1644;\n\nexport function addComputeBudget(config: ComputeBudgetConfig): {\n  instructions: TransactionInstruction[];\n  instructionTypes: string[];\n} {\n  const ins: TransactionInstruction[] = [];\n  const insTypes: string[] = [];\n  if (config.microLamports) {\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\n    insTypes.push(InstructionType.SetComputeUnitPrice);\n  }\n  if (config.units) {\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\n    insTypes.push(InstructionType.SetComputeUnitLimit);\n  }\n\n  return {\n    instructions: ins,\n    instructionTypes: insTypes,\n  };\n}\n\nexport async function getRecentBlockHash(connection: Connection, propsCommitment?: Commitment): Promise<string> {\n  const commitment = propsCommitment ?? \"confirmed\";\n  return (await connection.getLatestBlockhash?.({ commitment }))?.blockhash;\n}\n\nexport async function confirmTransaction(connection: Connection, txId: string): Promise<string> {\n  connection.getSignatureStatuses([txId]);\n  return new Promise((resolve, reject) => {\n    const id = setTimeout(reject, 60 * 1000);\n    connection.onSignature(\n      txId,\n      (signatureResult) => {\n        clearTimeout(id);\n        if (!signatureResult.err) {\n          resolve(\"\");\n          return;\n        }\n        reject(Object.assign(signatureResult.err, { txId }));\n      },\n      \"confirmed\",\n    );\n  });\n}\n\n/**\n * Forecast transaction size\n */\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\n\n  const transaction = new Transaction();\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\n  transaction.feePayer = signers[0];\n  transaction.add(...instructions);\n\n  try {\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Simulates multiple instruction\n */\n/**\n * Simulates multiple instruction\n */\nexport async function simulateMultipleInstruction(\n  connection: Connection,\n  instructions: TransactionInstruction[],\n  keyword: string,\n  batchRequest = true,\n): Promise<string[]> {\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\n\n  const transactions: Transaction[] = [];\n\n  let transaction = new Transaction();\n  transaction.feePayer = feePayer;\n\n  for (const instruction of instructions) {\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\n      transactions.push(transaction);\n      transaction = new Transaction();\n      transaction.feePayer = feePayer;\n    }\n    transaction.add(instruction);\n  }\n  if (transaction.instructions.length > 0) {\n    transactions.push(transaction);\n  }\n\n  let results: SimulatedTransactionResponse[] = [];\n\n  try {\n    results = await simulateTransaction(connection, transactions, batchRequest);\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\n  } catch (error) {\n    if (error instanceof Error) {\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\n        message: error.message,\n      });\n    }\n  }\n\n  const logs: string[] = [];\n  for (const result of results) {\n    logger.debug(\"simulate result:\", result);\n\n    if (result.logs) {\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\n      logger.debug(\"filteredLog:\", logs);\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\n      logs.push(...filteredLog);\n    }\n  }\n\n  return logs;\n}\n\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\n  const results = log.match(/{[\"\\w:,]+}/g);\n  if (!results || results.length !== 1) {\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\n  }\n\n  return results[0];\n}\n\nexport function parseSimulateValue(log: string, key: string): any {\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\n\n  const results = reg.exec(log);\n  if (!results || results.length !== 2) {\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\n  }\n\n  return results[1];\n}\n\nexport interface ProgramAddress {\n  publicKey: PublicKey;\n  nonce: number;\n}\nexport function findProgramAddress(\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\n  return { publicKey, nonce };\n}\n\nexport async function simulateTransaction(\n  connection: Connection,\n  transactions: Transaction[],\n  batchRequest?: boolean,\n): Promise<any[]> {\n  let results: any[] = [];\n  if (batchRequest) {\n    const getLatestBlockhash = await connection.getLatestBlockhash();\n\n    const encodedTransactions: string[] = [];\n    for (const transaction of transactions) {\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const message = transaction._compile();\n      const signData = message.serialize();\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const wireTransaction = transaction._serialize(signData);\n      const encodedTransaction = wireTransaction.toString(\"base64\");\n\n      encodedTransactions.push(encodedTransaction);\n    }\n\n    const batch = encodedTransactions.map((keys) => {\n      const args = connection._buildArgs([keys], undefined, \"base64\");\n      return {\n        methodName: \"simulateTransaction\",\n        args,\n      };\n    });\n\n    const reqData: { methodName: string; args: any[] }[][] = [];\n    const itemReqIndex = 20;\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    results = await (\n      await Promise.all(\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\n      )\n    ).flat();\n  } else {\n    try {\n      results = await Promise.all(\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\n      );\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\n          message: error.message,\n        });\n      }\n    }\n  }\n\n  return results;\n}\n\nexport function checkLegacyTxSize({\n  instructions,\n  payer,\n  signers,\n}: {\n  instructions: TransactionInstruction[];\n  payer: PublicKey;\n  signers: PublicKey[];\n}): boolean {\n  return forecastTransactionSize(instructions, [payer, ...signers]);\n}\n\nexport function checkV0TxSize({\n  instructions,\n  payer,\n  lookupTableAddressAccount,\n  recentBlockhash = Keypair.generate().publicKey.toString(),\n}: {\n  instructions: TransactionInstruction[];\n  payer: PublicKey;\n  lookupTableAddressAccount?: CacheLTA;\n  recentBlockhash?: string;\n}): boolean {\n  const transactionMessage = new TransactionMessage({\n    payerKey: payer,\n    recentBlockhash,\n    instructions,\n  });\n\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\n  try {\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\n    return buildLength < MAX_BASE64_SIZE;\n  } catch (error) {\n    return false;\n  }\n}\n\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\n  time: 0,\n  data: undefined,\n};\n\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\n    const data = await connection.getEpochInfo();\n    epochInfoCache = {\n      time: Date.now(),\n      data,\n    };\n    return data;\n  } else {\n    return epochInfoCache.data;\n  }\n}\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nexport const txToBase64 = (transaction: Transaction | VersionedTransaction): string => {\n  let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\n  if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\n  try {\n    return serialized instanceof Buffer ? serialized.toString(\"base64\") : Buffer.from(serialized).toString(\"base64\");\n  } catch {\n    return serialized.toString(\"base64\");\n  }\n};\n\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\n  const allBase64: string[] = [];\n  transactions.forEach((transaction) => {\n    if (transaction instanceof Transaction) {\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\n    }\n    allBase64.push(txToBase64(transaction));\n  });\n  console.log(\"simulate tx string:\", allBase64);\n\n  return allBase64;\n}\n\nexport function transformTxToBase64(tx: Transaction | VersionedTransaction): string {\n  let serialized = tx.serialize({ requireAllSignatures: false, verifySignatures: false });\n  if (tx instanceof VersionedTransaction) serialized = toBuffer(serialized);\n  return serialized.toString(\"base64\");\n}\n","export enum TxVersion {\n  \"V0\",\n  \"LEGACY\",\n}\n\nexport const InstructionType = {\n  CreateAccount: \"CreateAccount\",\n  InitAccount: \"InitAccount\",\n  CreateATA: \"CreateATA\",\n  CloseAccount: \"CloseAccount\",\n  TransferAmount: \"TransferAmount\",\n  InitMint: \"InitMint\",\n  MintTo: \"MintTo\",\n\n  InitMarket: \"InitMarket\", // create market main ins\n  Util1216OwnerClaim: \"Util1216OwnerClaim\", // owner claim token ins\n\n  SetComputeUnitPrice: \"SetComputeUnitPrice\",\n  SetComputeUnitLimit: \"SetComputeUnitLimit\",\n\n  // CLMM\n  ClmmCreatePool: \"ClmmCreatePool\",\n  ClmmOpenPosition: \"ClmmOpenPosition\",\n  ClmmIncreasePosition: \"ClmmIncreasePosition\",\n  ClmmDecreasePosition: \"ClmmDecreasePosition\",\n  ClmmClosePosition: \"ClmmClosePosition\",\n  ClmmSwapBaseIn: \"ClmmSwapBaseIn\",\n  ClmmSwapBaseOut: \"ClmmSwapBaseOut\",\n  ClmmInitReward: \"ClmmInitReward\",\n  ClmmSetReward: \"ClmmSetReward\",\n  ClmmCollectReward: \"ClmmCollectReward\",\n  ClmmLockPosition: \"ClmmLockPosition\",\n  ClmmHarvestLockPosition: \"ClmmHarvestLockPosition\",\n\n  AmmV4Swap: \"AmmV4Swap\",\n  AmmV4AddLiquidity: \"AmmV4AddLiquidity\",\n  AmmV4RemoveLiquidity: \"AmmV4RemoveLiquidity\",\n  AmmV4SimulatePoolInfo: \"AmmV4SimulatePoolInfo\",\n  AmmV4SwapBaseIn: \"AmmV4SwapBaseIn\",\n  AmmV4SwapBaseOut: \"AmmV4SwapBaseOut\",\n  AmmV4CreatePool: \"AmmV4CreatePool\",\n  AmmV4InitPool: \"AmmV4InitPool\",\n\n  AmmV5AddLiquidity: \"AmmV5AddLiquidity\",\n  AmmV5RemoveLiquidity: \"AmmV5RemoveLiquidity\",\n  AmmV5SimulatePoolInfo: \"AmmV5SimulatePoolInfo\",\n  AmmV5SwapBaseIn: \"AmmV5SwapBaseIn\",\n  AmmV5SwapBaseOut: \"AmmV5SwapBaseOut\",\n\n  RouteSwap: \"RouteSwap\",\n  RouteSwap1: \"RouteSwap1\",\n  RouteSwap2: \"RouteSwap2\",\n\n  FarmV3Deposit: \"FarmV3Deposit\",\n  FarmV3Withdraw: \"FarmV3Withdraw\",\n  FarmV3CreateLedger: \"FarmV3CreateLedger\",\n\n  FarmV4Withdraw: \"FarmV4Withdraw\",\n\n  FarmV5Deposit: \"FarmV5Deposit\",\n  FarmV5Withdraw: \"FarmV5Withdraw\",\n  FarmV5CreateLedger: \"FarmV5CreateLedger\",\n\n  FarmV6Deposit: \"FarmV6Deposit\",\n  FarmV6Withdraw: \"FarmV6Withdraw\",\n  FarmV6Create: \"FarmV6Create\",\n  FarmV6Restart: \"FarmV6Restart\",\n  FarmV6CreatorAddReward: \"FarmV6CreatorAddReward\",\n  FarmV6CreatorWithdraw: \"FarmV6CreatorWithdraw\",\n\n  CpmmCreatePool: \"CpmmCreatePool\",\n  CpmmAddLiquidity: \"CpmmAddLiquidity\",\n  CpmmWithdrawLiquidity: \"CpmmWithdrawLiquidity\",\n  CpmmSwapBaseIn: \"CpmmSwapBaseIn\",\n  CpmmSwapBaseOut: \"CpmmSwapBaseOut\",\n\n  CpmmLockLp: \"CpmmLockLp\",\n  CpmmCollectLockFee: \"CpmmCollectLockFee\",\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\n// raydium\nexport const FARM_PROGRAM_ID_V3 = new PublicKey(\"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\");\n// temp fusion\nexport const FARM_PROGRAM_ID_V4 = new PublicKey(\"CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T\");\n// \"fusion\"\nexport const FARM_PROGRAM_ID_V5 = new PublicKey(\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\");\n// echosystem\nexport const FARM_PROGRAM_ID_V6 = new PublicKey(\"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\");\n\nexport const UTIL1216 = new PublicKey(\"CLaimxFqjHzgTJtAGHU47NPhg6qrc5sCnpC4tBLyABQS\");\n\nexport const OPEN_BOOK_PROGRAM = new PublicKey(\"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\");\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\n\nexport const AMM_V4 = new PublicKey(\"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\");\nexport const AMM_STABLE = new PublicKey(\"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\");\nexport const LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\nexport const CLMM_PROGRAM_ID = new PublicKey(\"CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK\");\nexport const CLMM_LOCK_PROGRAM_ID = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\nexport const CLMM_LOCK_AUTH_ID = new PublicKey(\"kN1kEznaF5Xbd8LYuqtEFcxzWSBk5Fv6ygX6SqEGJVy\");\n\nexport const Router = new PublicKey(\"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\");\nexport const FEE_DESTINATION_ID = new PublicKey(\"7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5\");\n\nexport const IDO_PROGRAM_ID_V1 = new PublicKey(\"6FJon3QE27qgPVggARueB22hLvoh22VzJpXv4rBEoSLF\");\nexport const IDO_PROGRAM_ID_V2 = new PublicKey(\"CC12se5To1CdEuw7fDS27B7Geo5jJyL7t5UK2B44NgiH\");\nexport const IDO_PROGRAM_ID_V3 = new PublicKey(\"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\");\nexport const IDO_PROGRAM_ID_V4 = new PublicKey(\"DropEU8AvevN3UrXWXTMuz3rqnMczQVNjq3kcSdW2SQi\");\n\nexport const CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C\");\nexport const CREATE_CPMM_POOL_AUTH = new PublicKey(\"GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL\");\nexport const CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8\");\n\nexport const DEV_CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMDWBwJDtYax9qW7AyRuVC19Cc4L4Vcy4n2BHAbHkCW\");\nexport const DEV_CREATE_CPMM_POOL_AUTH = new PublicKey(\"7rQ1QFNosMkUCuh7Z7fPbTHvh73b68sQYdirycEzJVuw\");\nexport const DEV_CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"G11FKBRaAkHAKuLCgLM6K6NUc9rTjPAznRCjZifrTQe2\");\n\nexport const LOCK_CPMM_PROGRAM = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\nexport const DEV_LOCK_CPMM_PROGRAM = new PublicKey(\"DLockwT7X7sxtLmGH9g5kmfcjaBtncdbUmi738m5bvQC\");\n\nexport const LOCK_CPMM_AUTH = new PublicKey(\"3f7GcQFG397GAaEnv51zR6tsTVihYRydnydDD1cXekxH\");\nexport const DEV_LOCK_CPMM_AUTH = new PublicKey(\"7AFUeLVRjBfzqK3tTGw8hN48KLQWSk6DTE8xprWdPqix\");\n\nexport const IDO_ALL_PROGRAM = {\n  IDO_PROGRAM_ID_V1,\n  IDO_PROGRAM_ID_V2,\n  IDO_PROGRAM_ID_V3,\n  IDO_PROGRAM_ID_V4,\n};\n\nexport const ALL_PROGRAM_ID = {\n  AMM_V4,\n  AMM_STABLE,\n  CLMM_PROGRAM_ID,\n  CLMM_LOCK_PROGRAM_ID,\n  CLMM_LOCK_AUTH_ID,\n\n  FARM_PROGRAM_ID_V3,\n  FARM_PROGRAM_ID_V5,\n  FARM_PROGRAM_ID_V6,\n\n  OPEN_BOOK_PROGRAM,\n  SERUM_PROGRAM_ID_V3,\n\n  UTIL1216,\n\n  Router,\n\n  CREATE_CPMM_POOL_PROGRAM,\n  CREATE_CPMM_POOL_AUTH,\n  CREATE_CPMM_POOL_FEE_ACC,\n\n  LOCK_CPMM_PROGRAM,\n  LOCK_CPMM_AUTH,\n};\n\nexport type ProgramIdConfig = Partial<typeof ALL_PROGRAM_ID>;\n\nexport const DEVNET_PROGRAM_ID = {\n  SERUM_MARKET: PublicKey.default,\n  OPENBOOK_MARKET: new PublicKey(\"EoTcMgcDRTJVZDMZWBoU6rhYHZfkNTVEAfz3uUJRcYGj\"),\n\n  UTIL1216: PublicKey.default,\n\n  FarmV3: new PublicKey(\"85BFyr98MbCUU9MVTEgzx1nbhWACbJqLzho6zd6DZcWL\"),\n  FarmV5: new PublicKey(\"EcLzTrNg9V7qhcdyXDe2qjtPkiGzDM2UbdRaeaadU5r2\"),\n  FarmV6: new PublicKey(\"Farm2hJLcqPtPg8M4rR6DMrsRNc5TPm5Cs4bVQrMe2T7\"),\n\n  AmmV4: new PublicKey(\"HWy1jotHpo6UqeQxx49dpYYdQB8wj9Qk9MdxwjLvDHB8\"),\n  AmmStable: new PublicKey(\"DDg4VmQaJV9ogWce7LpcjBA9bv22wRp5uaTPa5pGjijF\"),\n\n  CLMM: new PublicKey(\"devi51mZmdwUJGU9hjN27vEz64Gps7uUefqxg27EAtH\"),\n  CLMM_LOCK_PROGRAM_ID: new PublicKey(\"DLockwT7X7sxtLmGH9g5kmfcjaBtncdbUmi738m5bvQC\"),\n  CLMM_LOCK_AUTH_ID: new PublicKey(\"8qmHNvu2Kr2C7U8mJL4Vz1vTDxMhVuXKREwU7TNoaVEo\"),\n\n  Router: new PublicKey(\"BVChZ3XFEwTMUk1o9i3HAf91H6mFxSwa5X2wFAWhYPhU\"),\n\n  CREATE_CPMM_POOL_PROGRAM: DEV_CREATE_CPMM_POOL_PROGRAM,\n  CREATE_CPMM_POOL_AUTH: DEV_CREATE_CPMM_POOL_AUTH,\n  CREATE_CPMM_POOL_FEE_ACC: DEV_CREATE_CPMM_POOL_FEE_ACC,\n\n  FEE_DESTINATION_ID: new PublicKey(\"3XMrhbv989VxAMi3DErLV9eJht1pHppW5LbKxe9fkEFR\"),\n\n  LOCK_CPMM_PROGRAM: DEV_LOCK_CPMM_PROGRAM,\n  LCOK_CPMM_AUTH: DEV_LOCK_CPMM_AUTH,\n};\n","import { EpochInfo } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { TransferFee, TransferFeeConfig } from \"@solana/spl-token\";\n\nimport { TransferFeeDataBaseType } from \"../api/type\";\nimport { GetTransferAmountFee } from \"../raydium/type\";\n\nconst POINT = 10_000;\nexport function getTransferAmountFee(\n  amount: BN,\n  feeConfig: TransferFeeConfig | undefined,\n  epochInfo: EpochInfo,\n  addFee: boolean,\n): GetTransferAmountFee {\n  if (feeConfig === undefined) {\n    return {\n      amount,\n      fee: undefined,\n      expirationTime: undefined,\n    };\n  }\n\n  const nowFeeConfig: TransferFee =\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\n  const expirationTime: number | undefined =\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\n      : undefined;\n\n  if (addFee) {\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\n      return {\n        amount: amount.add(nowMaxFee),\n        fee: nowMaxFee,\n        expirationTime,\n      };\n    } else {\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\n\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\n\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\n      return {\n        amount: TAmount,\n        fee,\n        expirationTime,\n      };\n    }\n  } else {\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\n\n    return {\n      amount,\n      fee,\n      expirationTime,\n    };\n  }\n}\n\nexport function getTransferAmountFeeV2(\n  amount: BN,\n  _feeConfig: TransferFeeDataBaseType | undefined,\n  epochInfo: EpochInfo,\n  addFee: boolean,\n): GetTransferAmountFee {\n  if (_feeConfig === undefined) {\n    return {\n      amount,\n      fee: undefined,\n      expirationTime: undefined,\n    };\n  }\n  const feeConfig = {\n    ..._feeConfig,\n    olderTransferFee: {\n      epoch: BigInt(_feeConfig.olderTransferFee.epoch),\n      maximumFee: BigInt(_feeConfig.olderTransferFee.maximumFee),\n      transferFeeBasisPoints: _feeConfig.olderTransferFee.transferFeeBasisPoints,\n    },\n    newerTransferFee: {\n      epoch: BigInt(_feeConfig.newerTransferFee.epoch),\n      maximumFee: BigInt(_feeConfig.newerTransferFee.maximumFee),\n      transferFeeBasisPoints: _feeConfig.newerTransferFee.transferFeeBasisPoints,\n    },\n  };\n\n  const nowFeeConfig: TransferFee =\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\n  const expirationTime: number | undefined =\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\n      : undefined;\n\n  if (addFee) {\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\n      return {\n        amount: amount.add(nowMaxFee),\n        fee: nowMaxFee,\n        expirationTime,\n      };\n    } else {\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\n\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\n\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\n      return {\n        amount: TAmount,\n        fee,\n        expirationTime,\n      };\n    }\n  } else {\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\n\n    return {\n      amount,\n      fee,\n      expirationTime,\n    };\n  }\n}\n\nexport function minExpirationTime(\n  expirationTime1: number | undefined,\n  expirationTime2: number | undefined,\n): number | undefined {\n  if (expirationTime1 === undefined) return expirationTime2;\n  if (expirationTime2 === undefined) return expirationTime1;\n\n  return Math.min(expirationTime1, expirationTime2);\n}\n\nexport function BNDivCeil(bn1: BN, bn2: BN): BN {\n  const { div, mod } = bn1.divmod(bn2);\n\n  if (mod.gt(new BN(0))) {\n    return div.add(new BN(1));\n  } else {\n    return div;\n  }\n}\n","import { Connection, PublicKey, AddressLookupTableAccount } from \"@solana/web3.js\";\nimport { getMultipleAccountsInfo } from \"../accountInfo\";\n\nexport interface CacheLTA {\n  [key: string]: AddressLookupTableAccount;\n}\n\nexport async function getMultipleLookupTableInfo({\n  connection,\n  address,\n}: {\n  connection: Connection;\n  address: PublicKey[];\n}): Promise<CacheLTA> {\n  const dataInfos = await getMultipleAccountsInfo(\n    connection,\n    [...new Set<string>(address.map((i) => i.toString()))].map((i) => new PublicKey(i)),\n  );\n\n  const outDict: CacheLTA = {};\n  for (let i = 0; i < address.length; i++) {\n    const info = dataInfos[i];\n    const key = address[i];\n    if (!info) continue;\n    const lookupAccount = new AddressLookupTableAccount({\n      key,\n      state: AddressLookupTableAccount.deserialize(info.data),\n    });\n    outDict[key.toString()] = lookupAccount;\n    LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\n  }\n\n  return outDict;\n}\n\nexport const LOOKUP_TABLE_CACHE: CacheLTA = {\n  \"2immgwYNHBbyVQKVGCEkgWpi53bLwWNRMB5G2nbgYV17\": new AddressLookupTableAccount({\n    key: new PublicKey(\"2immgwYNHBbyVQKVGCEkgWpi53bLwWNRMB5G2nbgYV17\"),\n    state: AddressLookupTableAccount.deserialize(\n      Buffer.from(\n        \"AQAAAP//////////d49+DAAAAAAAAQZMWvw7GUNJdaccNBVnb57OKakxL2BHLYvhRwVILRsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMGRm/lIRcy/+ytunLDm+e8jOW7xfcSayxDmzpAAAAABt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKkG3fbh7nWP3hhCXbzkbM3athr8TYO5DSf+vfko2KGL/AVKU1D4XciC1hSlVnJ4iilt3x6rq9CmBniISTL07vagBqfVFxksXFEhjMlMPUrxf1ja7gibof1E49vZigAAAAAGp9UXGMd0yShWY5hpHV62i164o5tLbVxzVVshAAAAAIyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZC3BlsePRfEU4nVJ/awTDzVi4bHMaoP21SbbRvAP4KUbIScv+6Yw2LHF/6K0ZjUPibbSWXCirYPGuuVl7zT789IUPLW4CpHr4JNCatp3ELXDLKMv6JJ+37le50lbBJ2LvDQdRqCgtphMF/imcN7mY5YRx2xE1A3MQ+L4QRaYK9u4GRfZP3LsAd00a+IkCpA22UNQMKdq5BFbJuwuOLqc8zxCTDlqxBG8J0HcxtfogQHDK06ukzfaXiNDKAob1MqBHS9lJxDYCwz8gd5DtFqNSTKG5l1zxIaKpDP/sffi2is1H9aKveyXSu5StXElYRl9SD5As0DHE4N0GLnf84/siiKXVyp4Ez121kLcUui/jLLFZEz/BwZK3Ilf9B9OcsEAeDMKAy2vjGSxQODgBz0QwGA+eP4ZjIjrIAQaXENv31QfLlOdXSRCkaybRniDHF4C8YcwhcvsqrOVuTP4B2Na+9wLdtrB31uz2rtlFI5kahdsnp/d1SrASDInYCtTYtdoke4kX+hoKWcEWM4Tle8pTUkUVv4BxS6fje/EzKBE4Qu9N9LMnrw/JNO0hqMVB4rk/2ou4AB1loQ7FZoPwut2o4KZB+0p9xnbrQKw038qjpHar+PyDwvxBRcu5hpHw3dguezeWv+IwvgW5icu8EGkhGa9AkFPPJT7VMSFb8xowveU=\",\n        \"base64\",\n      ),\n    ),\n  }),\n};\n","import {\n  Commitment,\n  Connection,\n  PublicKey,\n  sendAndConfirmTransaction,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport axios from \"axios\";\n\nimport { Api } from \"../../api\";\nimport { ComputeBudgetConfig, SignAllTransactions } from \"../../raydium/type\";\nimport { Cluster } from \"../../solana\";\nimport { Owner } from \"../owner\";\nimport { CacheLTA, getMultipleLookupTableInfo, LOOKUP_TABLE_CACHE } from \"./lookupTable\";\nimport { TxVersion } from \"./txType\";\nimport {\n  addComputeBudget,\n  checkLegacyTxSize,\n  checkV0TxSize,\n  confirmTransaction,\n  getRecentBlockHash,\n  printSimulate,\n} from \"./txUtils\";\n\ninterface SolanaFeeInfo {\n  min: number;\n  max: number;\n  avg: number;\n  priorityTx: number;\n  nonVotes: number;\n  priorityRatio: number;\n  avgCuPerBlock: number;\n  blockspaceUsageRatio: number;\n}\ntype SolanaFeeInfoJson = {\n  \"1\": SolanaFeeInfo;\n  \"5\": SolanaFeeInfo;\n  \"15\": SolanaFeeInfo;\n};\n\ninterface ExecuteParams {\n  skipPreflight?: boolean;\n  recentBlockHash?: string;\n  sendAndConfirm?: boolean;\n}\n\ninterface TxBuilderInit {\n  connection: Connection;\n  feePayer: PublicKey;\n  cluster: Cluster;\n  owner?: Owner;\n  blockhashCommitment?: Commitment;\n  api?: Api;\n  signAllTransactions?: SignAllTransactions;\n}\n\nexport interface AddInstructionParam {\n  addresses?: Record<string, PublicKey>;\n  instructions?: TransactionInstruction[];\n  endInstructions?: TransactionInstruction[];\n  lookupTableAddress?: string[];\n  signers?: Signer[];\n  instructionTypes?: string[];\n  endInstructionTypes?: string[];\n}\n\nexport interface TxBuildData<T = Record<string, any>> {\n  builder: TxBuilder;\n  transaction: Transaction;\n  instructionTypes: string[];\n  signers: Signer[];\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: Transaction }>;\n  extInfo: T;\n}\n\nexport interface TxV0BuildData<T = Record<string, any>> extends Omit<TxBuildData<T>, \"transaction\" | \"execute\"> {\n  builder: TxBuilder;\n  transaction: VersionedTransaction;\n  buildProps?: {\n    lookupTableCache?: CacheLTA;\n    lookupTableAddress?: string[];\n  };\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: VersionedTransaction }>;\n}\n\ntype TxUpdateParams = {\n  txId: string;\n  status: \"success\" | \"error\" | \"sent\";\n  signedTx: Transaction | VersionedTransaction;\n};\nexport interface MultiTxExecuteParam extends ExecuteParams {\n  sequentially: boolean;\n  skipTxCount?: number;\n  onTxUpdate?: (completeTxs: TxUpdateParams[]) => void;\n}\nexport interface MultiTxBuildData<T = Record<string, any>> {\n  builder: TxBuilder;\n  transactions: Transaction[];\n  instructionTypes: string[];\n  signers: Signer[][];\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: Transaction[] }>;\n  extInfo: T;\n}\n\nexport interface MultiTxV0BuildData<T = Record<string, any>>\n  extends Omit<MultiTxBuildData<T>, \"transactions\" | \"execute\"> {\n  builder: TxBuilder;\n  transactions: VersionedTransaction[];\n  buildProps?: {\n    lookupTableCache?: CacheLTA;\n    lookupTableAddress?: string[];\n  };\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: VersionedTransaction[] }>;\n}\n\nexport type MakeMultiTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\n  ? MultiTxBuildData<O>\n  : MultiTxV0BuildData<O>;\n\nexport type MakeTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\n  ? TxBuildData<O>\n  : TxV0BuildData<O>;\n\nexport class TxBuilder {\n  private connection: Connection;\n  private owner?: Owner;\n  private instructions: TransactionInstruction[] = [];\n  private endInstructions: TransactionInstruction[] = [];\n  private lookupTableAddress: string[] = [];\n  private signers: Signer[] = [];\n  private instructionTypes: string[] = [];\n  private endInstructionTypes: string[] = [];\n  private feePayer: PublicKey;\n  private cluster: Cluster;\n  private signAllTransactions?: SignAllTransactions;\n  private blockhashCommitment?: Commitment;\n\n  constructor(params: TxBuilderInit) {\n    this.connection = params.connection;\n    this.feePayer = params.feePayer;\n    this.signAllTransactions = params.signAllTransactions;\n    this.owner = params.owner;\n    this.cluster = params.cluster;\n    this.blockhashCommitment = params.blockhashCommitment;\n  }\n\n  get AllTxData(): {\n    instructions: TransactionInstruction[];\n    endInstructions: TransactionInstruction[];\n    signers: Signer[];\n    instructionTypes: string[];\n    endInstructionTypes: string[];\n    lookupTableAddress: string[];\n  } {\n    return {\n      instructions: this.instructions,\n      endInstructions: this.endInstructions,\n      signers: this.signers,\n      instructionTypes: this.instructionTypes,\n      endInstructionTypes: this.endInstructionTypes,\n      lookupTableAddress: this.lookupTableAddress,\n    };\n  }\n\n  get allInstructions(): TransactionInstruction[] {\n    return [...this.instructions, ...this.endInstructions];\n  }\n\n  public async getComputeBudgetConfig(): Promise<ComputeBudgetConfig | undefined> {\n    const json = (\n      await axios.get<SolanaFeeInfoJson>(`https://solanacompass.com/api/fees?cacheFreshTime=${5 * 60 * 1000}`)\n    ).data;\n    const { avg } = json?.[15] ?? {};\n    if (!avg) return undefined;\n    return {\n      units: 600000,\n      microLamports: Math.min(Math.ceil((avg * 1000000) / 600000), 25000),\n    };\n  }\n\n  public addCustomComputeBudget(config?: ComputeBudgetConfig): boolean {\n    if (config) {\n      const { instructions, instructionTypes } = addComputeBudget(config);\n      this.instructions.unshift(...instructions);\n      this.instructionTypes.unshift(...instructionTypes);\n      return true;\n    }\n    return false;\n  }\n\n  public async calComputeBudget({\n    config: propConfig,\n    defaultIns,\n  }: {\n    config?: ComputeBudgetConfig;\n    defaultIns?: TransactionInstruction[];\n  }): Promise<void> {\n    try {\n      const config = propConfig || (await this.getComputeBudgetConfig());\n      if (this.addCustomComputeBudget(config)) return;\n      defaultIns && this.instructions.unshift(...defaultIns);\n    } catch {\n      defaultIns && this.instructions.unshift(...defaultIns);\n    }\n  }\n\n  public addInstruction({\n    instructions = [],\n    endInstructions = [],\n    signers = [],\n    instructionTypes = [],\n    endInstructionTypes = [],\n    lookupTableAddress = [],\n  }: AddInstructionParam): TxBuilder {\n    this.instructions.push(...instructions);\n    this.endInstructions.push(...endInstructions);\n    this.signers.push(...signers);\n    this.instructionTypes.push(...instructionTypes);\n    this.endInstructionTypes.push(...endInstructionTypes);\n    this.lookupTableAddress.push(...lookupTableAddress.filter((address) => address !== PublicKey.default.toString()));\n    return this;\n  }\n\n  public async versionBuild<O = Record<string, any>>({\n    txVersion,\n    extInfo,\n  }: {\n    txVersion?: TxVersion;\n    extInfo?: O;\n  }): Promise<MakeTxData<TxVersion.LEGACY, O> | MakeTxData<TxVersion.V0, O>> {\n    if (txVersion === TxVersion.V0) return (await this.buildV0({ ...(extInfo || {}) })) as MakeTxData<TxVersion.V0, O>;\n    return this.build<O>(extInfo) as MakeTxData<TxVersion.LEGACY, O>;\n  }\n\n  public build<O = Record<string, any>>(extInfo?: O): MakeTxData<TxVersion.LEGACY, O> {\n    const transaction = new Transaction();\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\n    transaction.feePayer = this.feePayer;\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\n      this.signers.push(this.owner.signer);\n\n    return {\n      builder: this,\n      transaction,\n      signers: this.signers,\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\n      execute: async (params) => {\n        const { recentBlockHash: propBlockHash, skipPreflight = true, sendAndConfirm } = params || {};\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\n        transaction.recentBlockhash = recentBlockHash;\n        if (this.signers.length) transaction.sign(...this.signers);\n\n        printSimulate([transaction]);\n        if (this.owner?.isKeyPair) {\n          const txId = sendAndConfirm\n            ? await sendAndConfirmTransaction(\n                this.connection,\n                transaction,\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\n                  ? this.signers\n                  : [...this.signers, this.owner.signer!],\n                { skipPreflight },\n              )\n            : await this.connection.sendRawTransaction(transaction.serialize(), { skipPreflight });\n\n          return {\n            txId,\n            signedTx: transaction,\n          };\n        }\n        if (this.signAllTransactions) {\n          const txs = await this.signAllTransactions([transaction]);\n          return {\n            txId: await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight }),\n            signedTx: txs[0],\n          };\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: extInfo || ({} as O),\n    };\n  }\n\n  public buildMultiTx<T = Record<string, any>>(params: {\n    extraPreBuildData?: MakeTxData<TxVersion.LEGACY>[];\n    extInfo?: T;\n  }): MultiTxBuildData {\n    const { extraPreBuildData = [], extInfo } = params;\n    const { transaction } = this.build(extInfo);\n\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\n\n    const allTransactions: Transaction[] = [transaction, ...filterExtraBuildData.map((data) => data.transaction)];\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\n    const allInstructionTypes: string[] = [\n      ...this.instructionTypes,\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\n    ];\n\n    if (this.owner?.signer) {\n      allSigners.forEach((signers) => {\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\n      });\n    }\n\n    return {\n      builder: this,\n      transactions: allTransactions,\n      signers: allSigners,\n      instructionTypes: allInstructionTypes,\n      execute: async (executeParams?: MultiTxExecuteParam) => {\n        const {\n          sequentially,\n          onTxUpdate,\n          skipTxCount = 0,\n          recentBlockHash: propBlockHash,\n          skipPreflight = true,\n        } = executeParams || {};\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\n        if (this.owner?.isKeyPair) {\n          if (sequentially) {\n            const txIds: string[] = [];\n            let i = 0;\n            for (const tx of allTransactions) {\n              ++i;\n              if (i <= skipTxCount) continue;\n              const txId = await sendAndConfirmTransaction(\n                this.connection,\n                tx,\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\n                  ? this.signers\n                  : [...this.signers, this.owner.signer!],\n                { skipPreflight },\n              );\n              txIds.push(txId);\n            }\n\n            return {\n              txIds,\n              signedTxs: allTransactions,\n            };\n          }\n          return {\n            txIds: await await Promise.all(\n              allTransactions.map(async (tx) => {\n                tx.recentBlockhash = recentBlockHash;\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\n              }),\n            ),\n            signedTxs: allTransactions,\n          };\n        }\n\n        if (this.signAllTransactions) {\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\n            tx.recentBlockhash = recentBlockHash;\n            if (allSigners[idx].length) tx.sign(...allSigners[idx]);\n            return tx;\n          });\n          printSimulate(partialSignedTxs);\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\n          if (sequentially) {\n            let i = 0;\n            const processedTxs: TxUpdateParams[] = [];\n            const checkSendTx = async (): Promise<void> => {\n              if (!signedTxs[i]) return;\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\n              onTxUpdate?.([...processedTxs]);\n              i++;\n              this.connection.onSignature(\n                txId,\n                (signatureResult) => {\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\n                  onTxUpdate?.([...processedTxs]);\n                  if (!signatureResult.err) checkSendTx();\n                },\n                \"processed\",\n              );\n              this.connection.getSignatureStatus(txId);\n            };\n            await checkSendTx();\n            return {\n              txIds: processedTxs.map((d) => d.txId),\n              signedTxs,\n            };\n          } else {\n            const txIds: string[] = [];\n            for (let i = 0; i < signedTxs.length; i += 1) {\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\n              txIds.push(txId);\n            }\n            return {\n              txIds,\n              signedTxs,\n            };\n          }\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n\n  public async versionMultiBuild<T extends TxVersion, O = Record<string, any>>({\n    extraPreBuildData,\n    txVersion,\n    extInfo,\n  }: {\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[] | MakeTxData<TxVersion.LEGACY>[];\n    txVersion?: T;\n    extInfo?: O;\n  }): Promise<MakeMultiTxData<T, O>> {\n    if (txVersion === TxVersion.V0)\n      return (await this.buildV0MultiTx({\n        extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.V0>[],\n        buildProps: extInfo || {},\n      })) as MakeMultiTxData<T, O>;\n    return this.buildMultiTx<O>({\n      extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.LEGACY>[],\n      extInfo,\n    }) as MakeMultiTxData<T, O>;\n  }\n\n  public async buildV0<O = Record<string, any>>(\n    props?: O & {\n      lookupTableCache?: CacheLTA;\n      lookupTableAddress?: string[];\n      forerunCreate?: boolean;\n      recentBlockhash?: string;\n    },\n  ): Promise<MakeTxData<TxVersion.V0, O>> {\n    const {\n      lookupTableCache = {},\n      lookupTableAddress = [],\n      forerunCreate,\n      recentBlockhash: propRecentBlockhash,\n      ...extInfo\n    } = props || {};\n    const lookupTableAddressAccount = {\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\n      ...lookupTableCache,\n    };\n    const allLTA = Array.from(new Set<string>([...lookupTableAddress, ...this.lookupTableAddress]));\n    const needCacheLTA: PublicKey[] = [];\n    for (const item of allLTA) {\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\n    }\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\n\n    const recentBlockhash = forerunCreate\n      ? PublicKey.default.toBase58()\n      : propRecentBlockhash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\n\n    const messageV0 = new TransactionMessage({\n      payerKey: this.feePayer,\n      recentBlockhash,\n      instructions: [...this.allInstructions],\n    }).compileToV0Message(Object.values(lookupTableAddressAccount));\n\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\n      this.signers.push(this.owner.signer);\n    const transaction = new VersionedTransaction(messageV0);\n    transaction.sign(this.signers);\n    return {\n      builder: this,\n      transaction,\n      signers: this.signers,\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\n      execute: async (params) => {\n        const { skipPreflight = true, sendAndConfirm } = params || {};\n        printSimulate([transaction]);\n        if (this.owner?.isKeyPair) {\n          const txId = await this.connection.sendTransaction(transaction, { skipPreflight });\n          if (sendAndConfirm) {\n            await confirmTransaction(this.connection, txId);\n          }\n\n          return {\n            txId,\n            signedTx: transaction,\n          };\n        }\n        if (this.signAllTransactions) {\n          const txs = await this.signAllTransactions<VersionedTransaction>([transaction]);\n          return {\n            txId: await this.connection.sendTransaction(txs[0], { skipPreflight }),\n            signedTx: txs[0],\n          };\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: (extInfo || {}) as O,\n    };\n  }\n\n  public async buildV0MultiTx<T = Record<string, any>>(params: {\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[];\n    buildProps?: T & {\n      lookupTableCache?: CacheLTA;\n      lookupTableAddress?: string[];\n      forerunCreate?: boolean;\n      recentBlockhash?: string;\n    };\n  }): Promise<MultiTxV0BuildData> {\n    const { extraPreBuildData = [], buildProps } = params;\n    const { transaction } = await this.buildV0(buildProps);\n\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.builder.instructions.length > 0);\n\n    const allTransactions: VersionedTransaction[] = [\n      transaction,\n      ...filterExtraBuildData.map((data) => data.transaction),\n    ];\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\n    const allInstructionTypes: string[] = [\n      ...this.instructionTypes,\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\n    ];\n\n    if (this.owner?.signer) {\n      allSigners.forEach((signers) => {\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\n      });\n    }\n\n    allTransactions.forEach(async (tx, idx) => {\n      tx.sign(allSigners[idx]);\n    });\n\n    return {\n      builder: this,\n      transactions: allTransactions,\n      signers: allSigners,\n      instructionTypes: allInstructionTypes,\n      buildProps,\n      execute: async (executeParams?: MultiTxExecuteParam) => {\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\n        if (propBlockHash) allTransactions.forEach((tx) => (tx.message.recentBlockhash = propBlockHash));\n        printSimulate(allTransactions);\n        if (this.owner?.isKeyPair) {\n          if (sequentially) {\n            const txIds: string[] = [];\n            for (const tx of allTransactions) {\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\n              await confirmTransaction(this.connection, txId);\n              txIds.push(txId);\n            }\n\n            return { txIds, signedTxs: allTransactions };\n          }\n\n          return {\n            txIds: await Promise.all(\n              allTransactions.map(async (tx) => {\n                return await this.connection.sendTransaction(tx, { skipPreflight });\n              }),\n            ),\n            signedTxs: allTransactions,\n          };\n        }\n\n        if (this.signAllTransactions) {\n          const signedTxs = await this.signAllTransactions(allTransactions);\n\n          if (sequentially) {\n            let i = 0;\n            const processedTxs: TxUpdateParams[] = [];\n            const checkSendTx = async (): Promise<void> => {\n              if (!signedTxs[i]) return;\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\n              onTxUpdate?.([...processedTxs]);\n              i++;\n              this.connection.onSignature(\n                txId,\n                (signatureResult) => {\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\n                  onTxUpdate?.([...processedTxs]);\n                  if (!signatureResult.err) checkSendTx();\n                },\n                \"processed\",\n              );\n              this.connection.getSignatureStatus(txId);\n            };\n            checkSendTx();\n            return {\n              txIds: [],\n              signedTxs,\n            };\n          } else {\n            const txIds: string[] = [];\n            for (let i = 0; i < signedTxs.length; i += 1) {\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\n              txIds.push(txId);\n            }\n            return { txIds, signedTxs };\n          }\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: buildProps || {},\n    };\n  }\n\n  public async sizeCheckBuild(\n    props?: Record<string, any> & { computeBudgetConfig?: ComputeBudgetConfig; splitIns?: TransactionInstruction[] },\n  ): Promise<MultiTxBuildData> {\n    const { splitIns = [], computeBudgetConfig, ...extInfo } = props || {};\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\n      computeBudgetConfig\n        ? addComputeBudget(computeBudgetConfig)\n        : {\n            instructions: [],\n            instructionTypes: [],\n          };\n\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\n      {},\n    );\n\n    const allTransactions: Transaction[] = [];\n    const allSigners: Signer[][] = [];\n\n    let instructionQueue: TransactionInstruction[] = [];\n    let splitInsIdx = 0;\n    this.allInstructions.forEach((item) => {\n      const _itemIns = [...instructionQueue, item];\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\n      const _signerStrs = new Set<string>(\n        _itemIns.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n      );\n      const _signer = [..._signerStrs.values()].map((i) => new PublicKey(i));\n\n      if (\n        item !== splitIns[splitInsIdx] &&\n        instructionQueue.length < 12 &&\n        (checkLegacyTxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, signers: _signer }) ||\n          checkLegacyTxSize({ instructions: _itemIns, payer: this.feePayer, signers: _signer }))\n      ) {\n        // current ins add to queue still not exceed tx size limit\n        instructionQueue.push(item);\n      } else {\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\n        // if add computeBudget still not exceed tx size limit\n        if (\n          checkLegacyTxSize({\n            instructions: computeBudgetConfig\n              ? [...computeBudgetData.instructions, ...instructionQueue]\n              : [...instructionQueue],\n            payer: this.feePayer,\n            signers: _signer,\n          })\n        ) {\n          allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\n        } else {\n          allTransactions.push(new Transaction().add(...instructionQueue));\n        }\n        allSigners.push(\n          Array.from(\n            new Set<string>(\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n            ),\n          )\n            .map((i) => signerKey[i])\n            .filter((i) => i !== undefined),\n        );\n        instructionQueue = [item];\n      }\n    });\n\n    if (instructionQueue.length > 0) {\n      const _signerStrs = new Set<string>(\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n      );\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\n\n      if (\n        checkLegacyTxSize({\n          instructions: computeBudgetConfig\n            ? [...computeBudgetData.instructions, ...instructionQueue]\n            : [...instructionQueue],\n          payer: this.feePayer,\n          signers: _signers.map((s) => s.publicKey),\n        })\n      ) {\n        allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\n      } else {\n        allTransactions.push(new Transaction().add(...instructionQueue));\n      }\n      allSigners.push(_signers);\n    }\n    allTransactions.forEach((tx) => (tx.feePayer = this.feePayer));\n\n    if (this.owner?.signer) {\n      allSigners.forEach((signers) => {\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\n      });\n    }\n\n    return {\n      builder: this,\n      transactions: allTransactions,\n      signers: allSigners,\n      instructionTypes: this.instructionTypes,\n      execute: async (executeParams?: MultiTxExecuteParam) => {\n        const {\n          sequentially,\n          onTxUpdate,\n          skipTxCount = 0,\n          recentBlockHash: propBlockHash,\n          skipPreflight = true,\n        } = executeParams || {};\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\n        allTransactions.forEach(async (tx, idx) => {\n          tx.recentBlockhash = recentBlockHash;\n          if (allSigners[idx].length) tx.sign(...allSigners[idx]);\n        });\n        printSimulate(allTransactions);\n        if (this.owner?.isKeyPair) {\n          if (sequentially) {\n            let i = 0;\n            const txIds: string[] = [];\n            for (const tx of allTransactions) {\n              ++i;\n              if (i <= skipTxCount) {\n                txIds.push(\"tx skipped\");\n                continue;\n              }\n              const txId = await sendAndConfirmTransaction(\n                this.connection,\n                tx,\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\n                  ? this.signers\n                  : [...this.signers, this.owner.signer!],\n                { skipPreflight },\n              );\n              txIds.push(txId);\n            }\n\n            return {\n              txIds,\n              signedTxs: allTransactions,\n            };\n          }\n          return {\n            txIds: await Promise.all(\n              allTransactions.map(async (tx) => {\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\n              }),\n            ),\n            signedTxs: allTransactions,\n          };\n        }\n        if (this.signAllTransactions) {\n          const needSignedTx = await this.signAllTransactions(\n            allTransactions.slice(skipTxCount, allTransactions.length),\n          );\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\n          if (sequentially) {\n            let i = 0;\n            const processedTxs: TxUpdateParams[] = [];\n            const checkSendTx = async (): Promise<void> => {\n              if (!signedTxs[i]) return;\n              if (i < skipTxCount) {\n                // success before, do not send again\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\n                onTxUpdate?.([...processedTxs]);\n                i++;\n                checkSendTx();\n              }\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\n              onTxUpdate?.([...processedTxs]);\n              i++;\n              this.connection.onSignature(\n                txId,\n                (signatureResult) => {\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\n                  onTxUpdate?.([...processedTxs]);\n                  if (!signatureResult.err) checkSendTx();\n                },\n                \"processed\",\n              );\n              this.connection.getSignatureStatus(txId);\n            };\n            await checkSendTx();\n            return {\n              txIds: processedTxs.map((d) => d.txId),\n              signedTxs,\n            };\n          } else {\n            const txIds: string[] = [];\n            for (let i = 0; i < signedTxs.length; i += 1) {\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\n              txIds.push(txId);\n            }\n            return { txIds, signedTxs };\n          }\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n\n  public async sizeCheckBuildV0(\n    props?: Record<string, any> & {\n      computeBudgetConfig?: ComputeBudgetConfig;\n      lookupTableCache?: CacheLTA;\n      lookupTableAddress?: string[];\n      splitIns?: TransactionInstruction[];\n    },\n  ): Promise<MultiTxV0BuildData> {\n    const {\n      computeBudgetConfig,\n      splitIns = [],\n      lookupTableCache = {},\n      lookupTableAddress = [],\n      ...extInfo\n    } = props || {};\n    const lookupTableAddressAccount = {\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\n      ...lookupTableCache,\n    };\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\n    const needCacheLTA: PublicKey[] = [];\n    for (const item of allLTA) {\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\n    }\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\n\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\n      computeBudgetConfig\n        ? addComputeBudget(computeBudgetConfig)\n        : {\n            instructions: [],\n            instructionTypes: [],\n          };\n\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\n\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\n      {},\n    );\n    const allTransactions: VersionedTransaction[] = [];\n    const allSigners: Signer[][] = [];\n\n    let instructionQueue: TransactionInstruction[] = [];\n    let splitInsIdx = 0;\n    this.allInstructions.forEach((item) => {\n      const _itemIns = [...instructionQueue, item];\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\n      if (\n        item !== splitIns[splitInsIdx] &&\n        instructionQueue.length < 12 &&\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\n      ) {\n        // current ins add to queue still not exceed tx size limit\n        instructionQueue.push(item);\n      } else {\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\n        const lookupTableAddress: undefined | CacheLTA = {};\n        for (const item of [...new Set<string>(allLTA)]) {\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\n        }\n        // if add computeBudget still not exceed tx size limit\n        if (\n          computeBudgetConfig &&\n          checkV0TxSize({\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\n            payer: this.feePayer,\n            lookupTableAddressAccount,\n            recentBlockhash: blockHash,\n          })\n        ) {\n          const messageV0 = new TransactionMessage({\n            payerKey: this.feePayer,\n            recentBlockhash: blockHash,\n\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\n          allTransactions.push(new VersionedTransaction(messageV0));\n        } else {\n          const messageV0 = new TransactionMessage({\n            payerKey: this.feePayer,\n            recentBlockhash: blockHash,\n            instructions: [...instructionQueue],\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\n          allTransactions.push(new VersionedTransaction(messageV0));\n        }\n        allSigners.push(\n          Array.from(\n            new Set<string>(\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n            ),\n          )\n            .map((i) => signerKey[i])\n            .filter((i) => i !== undefined),\n        );\n        instructionQueue = [item];\n      }\n    });\n\n    if (instructionQueue.length > 0) {\n      const _signerStrs = new Set<string>(\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\n      );\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\n\n      if (\n        computeBudgetConfig &&\n        checkV0TxSize({\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\n          payer: this.feePayer,\n          lookupTableAddressAccount,\n          recentBlockhash: blockHash,\n        })\n      ) {\n        const messageV0 = new TransactionMessage({\n          payerKey: this.feePayer,\n          recentBlockhash: blockHash,\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\n        allTransactions.push(new VersionedTransaction(messageV0));\n      } else {\n        const messageV0 = new TransactionMessage({\n          payerKey: this.feePayer,\n          recentBlockhash: blockHash,\n          instructions: [...instructionQueue],\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\n        allTransactions.push(new VersionedTransaction(messageV0));\n      }\n      allSigners.push(_signers);\n    }\n\n    if (this.owner?.signer) {\n      allSigners.forEach((signers) => {\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\n      });\n    }\n\n    return {\n      builder: this,\n      transactions: allTransactions,\n      buildProps: props,\n      signers: allSigners,\n      instructionTypes: this.instructionTypes,\n      execute: async (executeParams?: MultiTxExecuteParam) => {\n        const {\n          sequentially,\n          onTxUpdate,\n          skipTxCount = 0,\n          recentBlockHash: propBlockHash,\n          skipPreflight = true,\n        } = executeParams || {};\n        allTransactions.map(async (tx, idx) => {\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\n        });\n        printSimulate(allTransactions);\n        if (this.owner?.isKeyPair) {\n          if (sequentially) {\n            let i = 0;\n            const txIds: string[] = [];\n            for (const tx of allTransactions) {\n              ++i;\n              if (i <= skipTxCount) {\n                console.log(\"skip tx: \", i);\n                txIds.push(\"tx skipped\");\n                continue;\n              }\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\n              await confirmTransaction(this.connection, txId);\n\n              txIds.push(txId);\n            }\n\n            return { txIds, signedTxs: allTransactions };\n          }\n\n          return {\n            txIds: await Promise.all(\n              allTransactions.map(async (tx) => {\n                return await this.connection.sendTransaction(tx, { skipPreflight });\n              }),\n            ),\n            signedTxs: allTransactions,\n          };\n        }\n        if (this.signAllTransactions) {\n          const needSignedTx = await this.signAllTransactions(\n            allTransactions.slice(skipTxCount, allTransactions.length),\n          );\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\n          if (sequentially) {\n            let i = 0;\n            const processedTxs: TxUpdateParams[] = [];\n            const checkSendTx = async (): Promise<void> => {\n              if (!signedTxs[i]) return;\n              if (i < skipTxCount) {\n                // success before, do not send again\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\n                onTxUpdate?.([...processedTxs]);\n                i++;\n                checkSendTx();\n                return;\n              }\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\n              onTxUpdate?.([...processedTxs]);\n              i++;\n              this.connection.onSignature(\n                txId,\n                (signatureResult) => {\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\n                  onTxUpdate?.([...processedTxs]);\n                  if (!signatureResult.err) checkSendTx();\n                },\n                \"processed\",\n              );\n              this.connection.getSignatureStatus(txId);\n            };\n            checkSendTx();\n            return {\n              txIds: [],\n              signedTxs,\n            };\n          } else {\n            const txIds: string[] = [];\n            for (let i = 0; i < signedTxs.length; i += 1) {\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\n              txIds.push(txId);\n            }\n            return { txIds, signedTxs };\n          }\n        }\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\n      },\n      extInfo: extInfo || {},\n    };\n  }\n}\n","import { FarmRewardInfo, FarmVersion } from \"../raydium/farm\";\n\n/* ================= liquidity ================= */\nexport type LiquidityVersion = 4 | 5;\n\nexport interface ApiPoolInfoV4 {\n  id: string;\n  baseMint: string;\n  quoteMint: string;\n  lpMint: string;\n  baseDecimals: number;\n  quoteDecimals: number;\n  lpDecimals: number;\n  version: 4;\n  programId: string;\n  authority: string;\n  openOrders: string;\n  targetOrders: string;\n  baseVault: string;\n  quoteVault: string;\n  withdrawQueue: string;\n  lpVault: string;\n  marketVersion: 3;\n  marketProgramId: string;\n  marketId: string;\n  marketAuthority: string;\n  marketBaseVault: string;\n  marketQuoteVault: string;\n  marketBids: string;\n  marketAsks: string;\n  marketEventQueue: string;\n  lookupTableAccount: string;\n}\n\n/* ================= farm ================= */\nexport interface FarmRewardInfoV6 {\n  rewardMint: string;\n  rewardVault: string;\n  rewardOpenTime: number;\n  rewardEndTime: number;\n  rewardPerSecond: number;\n  rewardSender: string;\n}\n\nexport interface ApiStakePoolInfo {\n  // base\n  id: string;\n  symbol: string;\n  lpMint: string;\n  // version\n  version: FarmVersion;\n  programId: string;\n  // keys\n  authority: string;\n  lpVault: string;\n  rewardInfos: FarmRewardInfo[] | FarmRewardInfoV6[];\n  // status\n  upcoming: boolean;\n}\n\nexport interface ApiClmmConfigInfo {\n  id: string;\n  index: number;\n  protocolFeeRate: number;\n  tradeFeeRate: number;\n  tickSpacing: number;\n  fundFeeRate: number;\n  defaultRange: number;\n  defaultRangePoint: number[];\n}\n\nexport interface ApiCpmmConfigInfo {\n  id: string;\n  index: number;\n  protocolFeeRate: number;\n  tradeFeeRate: number;\n  fundFeeRate: number;\n  createPoolFee: string;\n}\n\nexport interface ApiClmmPoolsItemStatistics {\n  volume: number;\n  volumeFee: number;\n  feeA: number;\n  feeB: number;\n  feeApr: number;\n  rewardApr: {\n    A: number;\n    B: number;\n    C: number;\n  };\n  apr: number;\n  priceMin: number;\n  priceMax: number;\n}\n\nexport interface CpmmLockInfo {\n  name: string;\n  symbol: string;\n  description: string;\n  external_url: string;\n  collection: {\n    name: string;\n    family: string;\n  };\n  image: string;\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\n  positionInfo: {\n    tvlPercentage: number;\n    usdValue: number;\n    amountA: number;\n    amountB: number;\n    unclaimedFee: {\n      lp: number;\n      amountA: number;\n      amountB: number;\n      usdValue: number;\n    };\n  };\n}\n\n/** ====== v3 api types ======= */\nexport interface ApiV3PageIns<T> {\n  count: number;\n  hasNextPage: boolean;\n  data: T[];\n}\n\nexport enum JupTokenType {\n  ALL = \"all\",\n  Strict = \"strict\",\n}\nexport type PoolsApiReturn = ApiV3PageIns<ApiV3PoolInfoItem>;\n\nexport interface TransferFeeDataBaseType {\n  transferFeeConfigAuthority: string;\n  withdrawWithheldAuthority: string;\n  withheldAmount: string;\n  olderTransferFee: {\n    epoch: string;\n    maximumFee: string;\n    transferFeeBasisPoints: number;\n  };\n  newerTransferFee: {\n    epoch: string;\n    maximumFee: string;\n    transferFeeBasisPoints: number;\n  };\n}\n\ntype ExtensionsItem = {\n  coingeckoId?: string;\n  feeConfig?: TransferFeeDataBaseType;\n};\n\nexport type ApiV3Token = {\n  chainId: number;\n  address: string;\n  programId: string;\n  logoURI: string;\n  symbol: string;\n  name: string;\n  decimals: number;\n  tags: string[]; // \"hasFreeze\" | \"hasTransferFee\" | \"token-2022\" | \"community\" | \"unknown\" ..etc\n  extensions: ExtensionsItem;\n  freezeAuthority?: string;\n  mintAuthority?: string;\n};\n\nexport type ApiV3TokenRes = {\n  mintList: ApiV3Token[];\n  blacklist: ApiV3Token[];\n  whiteList: string[];\n};\n\nexport interface ApiV3PoolInfoCountItem {\n  volume: number;\n  volumeQuote: number;\n  volumeFee: number;\n  apr: number;\n  feeApr: number;\n  priceMin: number;\n  priceMax: number;\n  rewardApr: number[];\n}\n\ntype PoolTypeItem = \"StablePool\" | \"OpenBookMarket\";\n\ntype FarmRewardInfoOld = {\n  mint: ApiV3Token;\n  perSecond: number;\n};\n\nexport type PoolFarmRewardInfo = FarmRewardInfoOld & {\n  startTime?: number;\n  endTime?: number;\n};\n\nexport interface PoolRewardInfoItem {\n  mint: ApiV3Token;\n  perSecond?: number;\n  startTime?: number;\n  endTime?: number;\n}\n\nexport interface ApiV3PoolInfoBaseItem {\n  programId: string;\n  id: string;\n  mintA: ApiV3Token;\n  mintB: ApiV3Token;\n  rewardDefaultInfos: PoolFarmRewardInfo[];\n  rewardDefaultPoolInfos: \"Ecosystem\" | \"Fusion\" | \"Raydium\" | \"Clmm\";\n  price: number;\n  mintAmountA: number;\n  mintAmountB: number;\n  feeRate: number;\n  openTime: string;\n  tvl: number;\n\n  day: ApiV3PoolInfoCountItem;\n  week: ApiV3PoolInfoCountItem;\n  month: ApiV3PoolInfoCountItem;\n  pooltype: PoolTypeItem[];\n\n  farmUpcomingCount: number;\n  farmOngoingCount: number;\n  farmFinishedCount: number;\n\n  burnPercent: number;\n}\nexport type ApiV3PoolInfoConcentratedItem = ApiV3PoolInfoBaseItem & {\n  type: \"Concentrated\";\n  config: ApiClmmConfigV3;\n};\nexport type ApiV3PoolInfoStandardItem = ApiV3PoolInfoBaseItem & {\n  type: \"Standard\";\n  marketId: string;\n  configId: string;\n  lpPrice: number;\n  lpAmount: number;\n  lpMint: ApiV3Token;\n};\n\nexport type ApiV3PoolInfoStandardItemCpmm = ApiV3PoolInfoBaseItem & {\n  type: \"Standard\";\n  lpMint: ApiV3Token;\n  lpPrice: number;\n  lpAmount: number;\n  config: ApiCpmmConfigV3;\n};\n\nexport type ApiV3PoolInfoItem =\n  | ApiV3PoolInfoConcentratedItem\n  | ApiV3PoolInfoStandardItem\n  | ApiV3PoolInfoStandardItemCpmm;\n\nexport enum PoolFetchType {\n  All = \"all\",\n  Standard = \"standard\",\n  Concentrated = \"concentrated\",\n  AllFarm = \"allFarm\",\n  StandardFarm = \"standardFarm\",\n  ConcentratedFarm = \"concentratedFarm\",\n}\n\nexport interface FetchPoolParams {\n  type?: PoolFetchType;\n  sort?:\n    | \"liquidity\"\n    | \"volume24h\"\n    | \"volume7d\"\n    | \"volume30d\"\n    | \"fee24h\"\n    | \"fee7d\"\n    | \"fee30d\"\n    | \"apr24h\"\n    | \"apr7d\"\n    | \"apr30d\";\n  order?: \"desc\" | \"asc\";\n  pageSize?: number;\n  page?: number;\n}\n\n// liquidity line\nexport interface Point {\n  time: number;\n  liquidity: number;\n}\nexport interface LiquidityLineApi {\n  count: number;\n  line: Point[];\n}\n\n// pool key\n\ninterface Base {\n  programId: string;\n  id: string;\n  mintA: ApiV3Token;\n  mintB: ApiV3Token;\n  lookupTableAccount?: string;\n  openTime: string;\n  vault: { A: string; B: string };\n}\ninterface _Amm {\n  authority: string;\n  openOrders: string;\n  targetOrders: string;\n  mintLp: ApiV3Token;\n}\n\ninterface ApiCpmmConfigV3 {\n  id: string;\n  index: number;\n  protocolFeeRate: number;\n  tradeFeeRate: number;\n  fundFeeRate: number;\n  createPoolFee: string;\n}\n\ninterface _Cpmm {\n  authority: string;\n  mintLp: ApiV3Token;\n  config: ApiCpmmConfigV3;\n  observationId: string;\n}\ninterface _Market {\n  marketProgramId: string;\n  marketId: string;\n  marketAuthority: string;\n  marketBaseVault: string;\n  marketQuoteVault: string;\n  marketBids: string;\n  marketAsks: string;\n  marketEventQueue: string;\n}\nexport type AmmV4Keys = Base & _Amm & _Market;\nexport type AmmV5Keys = Base & _Amm & _Market & { modelDataAccount: string };\nexport type CpmmKeys = Base & _Cpmm;\nexport interface ClmmRewardType {\n  mint: ApiV3Token;\n  vault: string;\n}\nexport type ClmmKeys = Base & {\n  config: ApiClmmConfigV3;\n  rewardInfos: ClmmRewardType[];\n  observationId: string;\n  exBitmapAccount: string;\n};\nexport type PoolKeys = AmmV4Keys | AmmV5Keys | ClmmKeys | CpmmKeys;\n\n// clmm config\nexport interface ApiClmmConfigV3 {\n  id: string;\n  index: number;\n  protocolFeeRate: number;\n  tradeFeeRate: number;\n  tickSpacing: number;\n  fundFeeRate: number;\n  description: string;\n  defaultRange: number;\n  defaultRangePoint: number[];\n}\n\nexport interface RpcItemA {\n  url: string;\n  weight: number;\n  batch: boolean;\n  name: string;\n}\nexport interface RpcItemB {\n  url: string;\n  batch: boolean;\n  name: string;\n}\n\ntype RpcStrategy = \"speed\" | \"first\";\ntype RpcTypeWeight = { strategy: \"weight\"; rpcs: RpcItemA[] };\ntype RpcTypeOther = { strategy: RpcStrategy; rpcs: RpcItemB[] };\nexport type RpcType = RpcTypeWeight | RpcTypeOther;\n\nexport type FarmRewardTypeV6Key = \"Standard SPL\" | \"Option tokens\";\n\nexport interface RewardKeyInfoV345 {\n  mint: ApiV3Token;\n  vault: string;\n  type: FarmRewardTypeV6Key;\n  perSecond: number;\n  perBlock: number;\n}\nexport interface RewardKeyInfoV6 {\n  mint: ApiV3Token;\n  vault: string;\n  type: FarmRewardTypeV6Key;\n  perSecond: number;\n  openTime: string;\n  endTime: string;\n  sender: string;\n}\ninterface FormatFarmKeyOutBase {\n  programId: string;\n  id: string;\n  symbolMints: ApiV3Token[];\n  lpMint: ApiV3Token;\n  authority: string;\n  lpVault: string;\n}\nexport type FormatFarmKeyOutV345 = FormatFarmKeyOutBase & {\n  rewardInfos: RewardKeyInfoV345[];\n};\nexport type FormatFarmKeyOutV6 = FormatFarmKeyOutBase & {\n  config: {\n    periodMax: number;\n    periodMin: number;\n    periodExtend: number;\n  };\n  rewardInfos: RewardKeyInfoV6[];\n};\nexport type FormatFarmKeyOut = FormatFarmKeyOutV345 | FormatFarmKeyOutV6;\n// item page farm info\n// farm info\nexport interface RewardInfoV345 {\n  mint: ApiV3Token;\n  type: FarmRewardTypeV6Key;\n  apr: number;\n  perSecond: string;\n}\nexport interface RewardInfoV6 {\n  mint: ApiV3Token;\n  type: FarmRewardTypeV6Key;\n  apr: number;\n  perSecond: string;\n  openTime: string;\n  endTime: string;\n}\nexport type FarmTagsItem = \"Ecosystem\" | \"Farm\" | \"Fusion\" | \"Stake\";\nexport interface FormatFarmInfoOutBase {\n  programId: string;\n  id: string;\n  symbolMints: ApiV3Token[];\n  lpMint: ApiV3Token;\n  tvl: number;\n  lpPrice: number;\n  apr: number;\n  tags: FarmTagsItem[];\n}\nexport type FormatFarmInfoOutV345 = FormatFarmInfoOutBase & {\n  rewardInfos: RewardInfoV345[];\n};\nexport type FormatFarmInfoOutV6 = FormatFarmInfoOutBase & {\n  rewardInfos: RewardInfoV6[];\n};\nexport type FormatFarmInfoOut = FormatFarmInfoOutV345 | FormatFarmInfoOutV6;\n\nexport interface AvailabilityCheckAPI3 {\n  all: boolean;\n  swap: boolean;\n  createConcentratedPosition: boolean;\n  addConcentratedPosition: boolean;\n  addStandardPosition: boolean;\n  removeConcentratedPosition: boolean;\n  removeStandardPosition: boolean;\n  addFarm: boolean;\n  removeFarm: boolean;\n}\n\nexport type OwnerCreatedFarmInfo = {\n  farm: { id: string; programId: string }[];\n  clmm: { id: string; programId: string }[];\n};\n\nexport type OwnerIdoInfo = Record<\n  string,\n  {\n    programId: string;\n    poolId: string;\n    coin: string;\n    pc: string;\n  }\n>;\n\nexport type IdoKeysData = {\n  programId: string;\n  id: string;\n  authority: string;\n  projectInfo: {\n    mint: ApiV3Token;\n    vault: string;\n  };\n  buyInfo: {\n    mint: ApiV3Token;\n    vault: string;\n  };\n};\n\nexport interface ApiStakePool {\n  programId: string;\n  id: string;\n  apr: number;\n  lpMint: ApiV3Token;\n  lpPrice: number;\n  symbolMints: ApiV3Token[];\n  tvl: number;\n  tags: FarmTagsItem[];\n  rewardInfos: RewardInfoV345[];\n}\n\nexport type FarmPositionData = Record<\n  string,\n  Record<\n    string,\n    Record<\n      string,\n      {\n        programId: string;\n        lpAmount: string;\n        version: \"V1\" | \"V2\";\n      }\n    >\n  >\n>;\n","export const API_URLS = {\n  BASE_HOST: \"https://api-v3.raydium.io\",\n  OWNER_BASE_HOST: \"https://owner-v1.raydium.io\",\n  SERVICE_BASE_HOST: \"https://service.raydium.io\",\n  MONITOR_BASE_HOST: \"https://monitor.raydium.io\",\n  SERVICE_1_BASE_HOST: \"https://service-v1.raydium.io\",\n\n  SEND_TRANSACTION: \"/send-transaction\",\n  FARM_ARP: \"/main/farm/info\",\n  FARM_ARP_LINE: \"/main/farm-apr-tv\",\n\n  CLMM_CONFIG: \"/main/clmm-config\",\n  CPMM_CONFIG: \"/main/cpmm-config\",\n\n  VERSION: \"/main/version\",\n\n  // api v3\n  CHECK_AVAILABILITY: \"/v3/main/AvailabilityCheckAPI\",\n  RPCS: \"/main/rpcs\",\n  INFO: \"/main/info\",\n  STAKE_POOLS: \"/main/stake-pools\",\n  CHAIN_TIME: \"/main/chain-time\",\n\n  TOKEN_LIST: \"/mint/list\",\n  MINT_INFO_ID: \"/mint/ids\",\n\n  JUP_TOKEN_LIST: \"https://tokens.jup.ag/tokens?tags=lst,community\",\n  /**\n   * poolType: {all, concentrated, standard, allFarm, concentratedFarm, standardFarm}\n   * poolSortField: {liquidity | volume_24h / 7d / 30d | fee_24h / 7d / 30d | apr_24h / 7d / 30d}\n   * sortType: {desc/asc}\n   * page: number\n   * pageSize: number\n   */\n  POOL_LIST: \"/pools/info/list\",\n  /**\n   * ?ids=idList.join(',')\n   */\n  POOL_SEARCH_BY_ID: \"/pools/info/ids\",\n  /**\n   * mint1/mint2: search pool by mint\n   * poolSortField: {liquidity | volume_24h / 7d / 30d | fee_24h / 7d / 30d | apr_24h / 7d / 30d}\n   * poolType: {all, concentrated, standard, allFarm, concentratedFarm, standardFarm}\n   * sortType: {desc/asc}\n   * page: number\n   * pageSize: number\n   */\n  POOL_SEARCH_MINT: \"/pools/info/mint\",\n  /** ?lps=lpList.join(',') */\n  POOL_SEARCH_LP: \"/pools/info/lps\",\n  /** ?ids=idList.join(',') */\n  POOL_KEY_BY_ID: \"/pools/key/ids\",\n  /** ?id=string */\n  POOL_LIQUIDITY_LINE: \"/pools/line/liquidity\",\n  POOL_POSITION_LINE: \"/pools/line/position\",\n\n  FARM_INFO: \"/farms/info/ids\",\n  /** ?lp=string&pageSize=100&page=number */\n  FARM_LP_INFO: \"/farms/info/lp\",\n  FARM_KEYS: \"/farms/key/ids\",\n\n  OWNER_CREATED_FARM: \"/create-pool/{owner}\",\n  OWNER_IDO: \"/main/ido/{owner}\",\n  OWNER_STAKE_FARMS: \"/position/stake/{owner}\",\n  OWNER_LOCK_POSITION: \"/position/clmm-lock/{owner}\",\n  IDO_KEYS: \"/ido/key/ids\",\n  SWAP_HOST: \"https://transaction-v1.raydium.io\",\n  SWAP_COMPUTE: \"/compute/\",\n  SWAP_TX: \"/transaction/\",\n  MINT_PRICE: \"/mint/price\",\n  MIGRATE_CONFIG: \"/main/migrate-lp\",\n  PRIORITY_FEE: \"/main/auto-fee\",\n\n  CPMM_LOCK: \"https://dynamic-ipfs.raydium.io/lock/cpmm/position\",\n};\n\nexport const DEV_API_URLS = {\n  ...API_URLS,\n};\n\nexport type API_URL_CONFIG = Partial<typeof API_URLS>;\n","export const SESSION_KEY = \"ray_tab_hash\";\nexport const STORAGE_KEY = \"ray_req_hash\";\n\nexport const getSessionKey = (): string => {\n  if (typeof window === undefined) return \"\";\n  let key = sessionStorage.getItem(SESSION_KEY);\n\n  // new a session key\n  if (!key) {\n    key = `ray-${Date.now()}`;\n    sessionStorage.setItem(SESSION_KEY, key);\n  }\n  return key;\n};\n\nexport interface ResHistory {\n  status: number;\n  url: string;\n  params?: any;\n  data: any;\n  logCount?: number;\n  time: number;\n  session: string;\n  removeLastLog?: boolean;\n}\n\nexport const updateReqHistory = async ({\n  logCount = 1000,\n  removeLastLog,\n  ...resData\n}: Omit<ResHistory, \"time\" | \"session\">): Promise<void> => {\n  if (typeof window === undefined) return new Promise((resolve) => resolve());\n  const data: ResHistory[] = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\").slice(0, logCount - 1);\n\n  // means retry last save error\n  if (removeLastLog) data.pop();\n\n  // if data > 1kb\n  if (new Blob([JSON.stringify(resData.data)]).size > 1024)\n    resData.data = JSON.stringify(resData.data).substring(0, 200) + \"...\";\n  data.unshift({ ...resData, time: Date.now(), session: getSessionKey() });\n\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  } catch {\n    // if retry failed, empty request data\n    if (removeLastLog) {\n      let success = false;\n      const resStr = JSON.stringify(resData.data).substring(0, 100);\n      data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\n      while (!success) {\n        data.pop();\n        const resStr = JSON.stringify(resData.data).substring(0, 100);\n        data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\n        try {\n          localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n          success = true;\n        } catch {\n          success = false;\n        }\n      }\n      return new Promise((resolve) => resolve());\n    }\n    return updateReqHistory({\n      ...resData,\n      logCount,\n      removeLastLog: true,\n    });\n  }\n};\n","import { Connection, Keypair, PublicKey, EpochInfo, Commitment } from \"@solana/web3.js\";\nimport { merge } from \"lodash\";\n\nimport { Api, API_URL_CONFIG, ApiV3TokenRes, ApiV3Token, JupTokenType, AvailabilityCheckAPI3 } from \"../api\";\nimport { EMPTY_CONNECTION, EMPTY_OWNER } from \"../common/error\";\nimport { createLogger, Logger } from \"../common/logger\";\nimport { Owner } from \"../common/owner\";\nimport { Cluster } from \"../solana\";\n\nimport Account, { TokenAccountDataProp } from \"./account/account\";\nimport Farm from \"./farm/farm\";\nimport Liquidity from \"./liquidity/liquidity\";\nimport { Clmm } from \"./clmm\";\nimport Cpmm from \"./cpmm/cpmm\";\nimport TradeV2 from \"./tradeV2/trade\";\nimport Utils1216 from \"./utils1216\";\nimport MarketV2 from \"./marketV2\";\nimport Ido from \"./ido\";\n\nimport TokenModule from \"./token/token\";\nimport { SignAllTransactions } from \"./type\";\n\nexport interface RaydiumLoadParams extends TokenAccountDataProp, Omit<RaydiumApiBatchRequestParams, \"api\"> {\n  /* ================= solana ================= */\n  // solana web3 connection\n  connection: Connection;\n  // solana cluster/network/env\n  cluster?: Cluster;\n  // user public key\n  owner?: PublicKey | Keypair;\n  /* ================= api ================= */\n  // api request interval in ms, -1 means never request again, 0 means always use fresh data, default is 5 mins (5 * 60 * 1000)\n  apiRequestInterval?: number;\n  // api request timeout in ms, default is 10 secs (10 * 1000)\n  apiRequestTimeout?: number;\n  apiCacheTime?: number;\n  signAllTransactions?: SignAllTransactions;\n  urlConfigs?: API_URL_CONFIG;\n  logRequests?: boolean;\n  logCount?: number;\n  jupTokenType?: JupTokenType;\n  disableFeatureCheck?: boolean;\n  disableLoadToken?: boolean;\n  blockhashCommitment?: Commitment;\n}\n\nexport interface RaydiumApiBatchRequestParams {\n  api: Api;\n  defaultChainTimeOffset?: number;\n  defaultChainTime?: number;\n}\n\nexport type RaydiumConstructorParams = Required<RaydiumLoadParams> & RaydiumApiBatchRequestParams;\n\ninterface DataBase<T> {\n  fetched: number;\n  data: T;\n  extInfo?: Record<string, any>;\n}\ninterface ApiData {\n  tokens?: DataBase<ApiV3Token[]>;\n\n  // v3 data\n  tokenList?: DataBase<ApiV3TokenRes>;\n  jupTokenList?: DataBase<ApiV3Token[]>;\n}\n\nexport class Raydium {\n  public cluster: Cluster;\n  public farm: Farm;\n  public account: Account;\n  public liquidity: Liquidity;\n  public clmm: Clmm;\n  public cpmm: Cpmm;\n  public tradeV2: TradeV2;\n  public utils1216: Utils1216;\n  public marketV2: MarketV2;\n  public ido: Ido;\n  public token: TokenModule;\n  public rawBalances: Map<string, string> = new Map();\n  public apiData: ApiData;\n  public availability: Partial<AvailabilityCheckAPI3>;\n  public blockhashCommitment: Commitment;\n\n  private _connection: Connection;\n  private _owner: Owner | undefined;\n  public api: Api;\n  private _apiCacheTime: number;\n  private _signAllTransactions?: SignAllTransactions;\n  private logger: Logger;\n  private _chainTime?: {\n    fetched: number;\n    value: {\n      chainTime: number;\n      offset: number;\n    };\n  };\n  private _epochInfo?: {\n    fetched: number;\n    value: EpochInfo;\n  };\n\n  constructor(config: RaydiumConstructorParams) {\n    const {\n      connection,\n      cluster,\n      owner,\n      api,\n      defaultChainTime,\n      defaultChainTimeOffset,\n      apiCacheTime,\n      blockhashCommitment = \"confirmed\",\n    } = config;\n\n    this._connection = connection;\n    this.cluster = cluster || \"mainnet\";\n    this._owner = owner ? new Owner(owner) : undefined;\n    this._signAllTransactions = config.signAllTransactions;\n    this.blockhashCommitment = blockhashCommitment;\n\n    this.api = api;\n    this._apiCacheTime = apiCacheTime || 5 * 60 * 1000;\n    this.logger = createLogger(\"Raydium\");\n    this.farm = new Farm({ scope: this, moduleName: \"Raydium_Farm\" });\n    this.account = new Account({\n      scope: this,\n      moduleName: \"Raydium_Account\",\n      tokenAccounts: config.tokenAccounts,\n      tokenAccountRawInfos: config.tokenAccountRawInfos,\n    });\n    this.liquidity = new Liquidity({ scope: this, moduleName: \"Raydium_LiquidityV2\" });\n    this.token = new TokenModule({ scope: this, moduleName: \"Raydium_tokenV2\" });\n    this.tradeV2 = new TradeV2({ scope: this, moduleName: \"Raydium_tradeV2\" });\n    this.clmm = new Clmm({ scope: this, moduleName: \"Raydium_clmm\" });\n    this.cpmm = new Cpmm({ scope: this, moduleName: \"Raydium_cpmm\" });\n    this.utils1216 = new Utils1216({ scope: this, moduleName: \"Raydium_utils1216\" });\n    this.marketV2 = new MarketV2({ scope: this, moduleName: \"Raydium_marketV2\" });\n    this.ido = new Ido({ scope: this, moduleName: \"Raydium_ido\" });\n\n    this.availability = {};\n    const now = new Date().getTime();\n    this.apiData = {};\n\n    if (defaultChainTimeOffset)\n      this._chainTime = {\n        fetched: now,\n        value: {\n          chainTime: defaultChainTime || Date.now() - defaultChainTimeOffset,\n          offset: defaultChainTimeOffset,\n        },\n      };\n  }\n\n  static async load(config: RaydiumLoadParams): Promise<Raydium> {\n    const custom: Required<RaydiumLoadParams> = merge(\n      // default\n      {\n        cluster: \"mainnet\",\n        owner: null,\n        apiRequestInterval: 5 * 60 * 1000,\n        apiRequestTimeout: 10 * 1000,\n      },\n      config,\n    );\n    const { cluster, apiRequestTimeout, logCount, logRequests, urlConfigs } = custom;\n\n    const api = new Api({ cluster, timeout: apiRequestTimeout, urlConfigs, logCount, logRequests });\n    const raydium = new Raydium({\n      ...custom,\n      api,\n    });\n\n    await raydium.fetchAvailabilityStatus(config.disableFeatureCheck ?? true);\n    if (!config.disableLoadToken)\n      await raydium.token.load({\n        type: config.jupTokenType,\n      });\n\n    return raydium;\n  }\n\n  get owner(): Owner | undefined {\n    return this._owner;\n  }\n  get ownerPubKey(): PublicKey {\n    if (!this._owner) throw new Error(EMPTY_OWNER);\n    return this._owner.publicKey;\n  }\n  public setOwner(owner?: PublicKey | Keypair): Raydium {\n    this._owner = owner ? new Owner(owner) : undefined;\n    this.account.resetTokenAccounts();\n    return this;\n  }\n  get connection(): Connection {\n    if (!this._connection) throw new Error(EMPTY_CONNECTION);\n    return this._connection;\n  }\n  public setConnection(connection: Connection): Raydium {\n    this._connection = connection;\n    return this;\n  }\n  get signAllTransactions(): SignAllTransactions | undefined {\n    return this._signAllTransactions;\n  }\n  public setSignAllTransactions(signAllTransactions?: SignAllTransactions): Raydium {\n    this._signAllTransactions = signAllTransactions;\n    return this;\n  }\n\n  public checkOwner(): void {\n    if (!this.owner) {\n      this.logger.error(EMPTY_OWNER);\n      throw new Error(EMPTY_OWNER);\n    }\n  }\n\n  private isCacheInvalidate(time: number): boolean {\n    return new Date().getTime() - time > this._apiCacheTime;\n  }\n\n  public async fetchChainTime(): Promise<void> {\n    try {\n      const data = await this.api.getChainTimeOffset();\n      this._chainTime = {\n        fetched: Date.now(),\n        value: {\n          chainTime: Date.now() + data.offset * 1000,\n          offset: data.offset * 1000,\n        },\n      };\n    } catch {\n      this._chainTime = undefined;\n    }\n  }\n\n  public async fetchV3TokenList(forceUpdate?: boolean): Promise<ApiV3TokenRes> {\n    if (this.apiData.tokenList && !this.isCacheInvalidate(this.apiData.tokenList.fetched) && !forceUpdate)\n      return this.apiData.tokenList.data;\n    try {\n      const raydiumList = await this.api.getTokenList();\n      const dataObject = {\n        fetched: Date.now(),\n        data: raydiumList,\n      };\n      this.apiData.tokenList = dataObject;\n\n      return dataObject.data;\n    } catch (e) {\n      console.error(e);\n      return {\n        mintList: [],\n        blacklist: [],\n        whiteList: [],\n      };\n    }\n  }\n\n  public async fetchJupTokenList(forceUpdate?: boolean): Promise<ApiV3Token[]> {\n    const prevFetched = this.apiData.jupTokenList;\n    if (prevFetched && !this.isCacheInvalidate(prevFetched.fetched) && !forceUpdate) return prevFetched.data;\n    try {\n      const jupList = await this.api.getJupTokenList();\n      this.apiData.jupTokenList = {\n        fetched: Date.now(),\n        data: jupList.map((t) => ({\n          ...t,\n          mintAuthority: t.mint_authority || undefined,\n          freezeAuthority: t.freeze_authority || undefined,\n        })),\n      };\n\n      return this.apiData.jupTokenList.data;\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n\n  get chainTimeData(): { offset: number; chainTime: number } | undefined {\n    return this._chainTime?.value;\n  }\n\n  public async chainTimeOffset(): Promise<number> {\n    if (this._chainTime && Date.now() - this._chainTime.fetched <= 1000 * 60 * 5) return this._chainTime.value.offset;\n    await this.fetchChainTime();\n    return this._chainTime?.value.offset || 0;\n  }\n\n  public async currentBlockChainTime(): Promise<number> {\n    if (this._chainTime && Date.now() - this._chainTime.fetched <= 1000 * 60 * 5)\n      return this._chainTime.value.chainTime;\n    await this.fetchChainTime();\n    return this._chainTime?.value.chainTime || Date.now();\n  }\n\n  public async fetchEpochInfo(): Promise<EpochInfo> {\n    if (this._epochInfo && Date.now() - this._epochInfo.fetched <= 1000 * 30) return this._epochInfo.value;\n    this._epochInfo = {\n      fetched: Date.now(),\n      value: await this.connection.getEpochInfo(),\n    };\n    return this._epochInfo.value;\n  }\n\n  public async fetchAvailabilityStatus(skipCheck?: boolean): Promise<Partial<AvailabilityCheckAPI3>> {\n    if (skipCheck) return {};\n    try {\n      const data = await this.api.fetchAvailabilityStatus();\n      const isAllDisabled = data.all === false;\n      this.availability = {\n        all: data.all,\n        swap: isAllDisabled ? false : data.swap,\n        createConcentratedPosition: isAllDisabled ? false : data.createConcentratedPosition,\n        addConcentratedPosition: isAllDisabled ? false : data.addConcentratedPosition,\n        addStandardPosition: isAllDisabled ? false : data.addStandardPosition,\n        removeConcentratedPosition: isAllDisabled ? false : data.removeConcentratedPosition,\n        removeStandardPosition: isAllDisabled ? false : data.removeStandardPosition,\n        addFarm: isAllDisabled ? false : data.addFarm,\n        removeFarm: isAllDisabled ? false : data.removeFarm,\n      };\n      return data;\n    } catch {\n      return {};\n    }\n  }\n}\n","export const EMPTY_OWNER =\n  \"please provide owner in load() initialization or you can set by calling raydium.setOwner(owner)\";\n\nexport const EMPTY_CONNECTION =\n  \"please provide connection in load() initialization or set it by raydium.setConnection(connection)\";\n","import { Commitment, PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport { BigNumberish, getATAAddress, InstructionType, WSOLMint } from \"@/common\";\nimport {\n  AccountLayout,\n  createAssociatedTokenAccountInstruction,\n  TOKEN_PROGRAM_ID,\n  TOKEN_2022_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\n\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport {\n  closeAccountInstruction,\n  createWSolAccountInstructions,\n  initTokenAccountInstruction,\n  makeTransferInstruction,\n} from \"./instruction\";\nimport { GetOrCreateTokenAccountParams, HandleTokenAccountParams, TokenAccount, TokenAccountRaw } from \"./types\";\nimport { generatePubKey, parseTokenAccountResp } from \"./util\";\n\nexport interface TokenAccountDataProp {\n  tokenAccounts?: TokenAccount[];\n  tokenAccountRawInfos?: TokenAccountRaw[];\n  notSubscribeAccountChange?: boolean;\n}\nexport default class Account extends ModuleBase {\n  private _tokenAccounts: TokenAccount[] = [];\n  private _tokenAccountRawInfos: TokenAccountRaw[] = [];\n  private _accountChangeListenerId?: number;\n  private _accountListener: ((data: TokenAccountDataProp) => void)[] = [];\n  private _clientOwnedToken = false;\n  private _notSubscribeAccountChange = false;\n  private _accountFetchTime = 0;\n\n  constructor(params: TokenAccountDataProp & ModuleBaseProps) {\n    super(params);\n    const { tokenAccounts, tokenAccountRawInfos, notSubscribeAccountChange } = params;\n    this._tokenAccounts = tokenAccounts || [];\n    this._tokenAccountRawInfos = tokenAccountRawInfos || [];\n    this._notSubscribeAccountChange = notSubscribeAccountChange ?? true;\n    this._clientOwnedToken = !!(tokenAccounts || tokenAccountRawInfos);\n  }\n\n  get tokenAccounts(): TokenAccount[] {\n    return this._tokenAccounts;\n  }\n  get tokenAccountRawInfos(): TokenAccountRaw[] {\n    return this._tokenAccountRawInfos;\n  }\n\n  set notSubscribeAccountChange(subscribe: boolean) {\n    this._notSubscribeAccountChange = subscribe;\n  }\n\n  public updateTokenAccount({ tokenAccounts, tokenAccountRawInfos }: TokenAccountDataProp): Account {\n    if (tokenAccounts) this._tokenAccounts = tokenAccounts;\n    if (tokenAccountRawInfos) this._tokenAccountRawInfos = tokenAccountRawInfos;\n    this._accountChangeListenerId && this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\n    this._accountChangeListenerId = undefined;\n    this._clientOwnedToken = true;\n    return this;\n  }\n\n  public addAccountChangeListener(cbk: (data: TokenAccountDataProp) => void): Account {\n    this._accountListener.push(cbk);\n    return this;\n  }\n\n  public removeAccountChangeListener(cbk: (data: TokenAccountDataProp) => void): Account {\n    this._accountListener = this._accountListener.filter((listener) => listener !== cbk);\n    return this;\n  }\n\n  public getAssociatedTokenAccount(mint: PublicKey, programId?: PublicKey): PublicKey {\n    return getATAAddress(this.scope.ownerPubKey, mint, programId).publicKey;\n  }\n\n  public resetTokenAccounts(): void {\n    if (this._clientOwnedToken) return;\n    this._tokenAccounts = [];\n    this._tokenAccountRawInfos = [];\n  }\n\n  public async fetchWalletTokenAccounts(config?: { forceUpdate?: boolean; commitment?: Commitment }): Promise<{\n    tokenAccounts: TokenAccount[];\n    tokenAccountRawInfos: TokenAccountRaw[];\n  }> {\n    if (\n      this._clientOwnedToken ||\n      (!config?.forceUpdate &&\n        this._tokenAccounts.length &&\n        Date.now() - this._accountFetchTime < (this._notSubscribeAccountChange ? 1000 * 5 : 1000 * 60 * 3))\n    ) {\n      return {\n        tokenAccounts: this._tokenAccounts,\n        tokenAccountRawInfos: this._tokenAccountRawInfos,\n      };\n    }\n    this.scope.checkOwner();\n\n    const defaultConfig = {};\n    const customConfig = { ...defaultConfig, ...config };\n\n    const [solAccountResp, ownerTokenAccountResp, ownerToken2022AccountResp] = await Promise.all([\n      this.scope.connection.getAccountInfo(this.scope.ownerPubKey, customConfig.commitment),\n      this.scope.connection.getTokenAccountsByOwner(\n        this.scope.ownerPubKey,\n        { programId: TOKEN_PROGRAM_ID },\n        customConfig.commitment,\n      ),\n      this.scope.connection.getTokenAccountsByOwner(\n        this.scope.ownerPubKey,\n        { programId: TOKEN_2022_PROGRAM_ID },\n        customConfig.commitment,\n      ),\n    ]);\n\n    const { tokenAccounts, tokenAccountRawInfos } = parseTokenAccountResp({\n      owner: this.scope.ownerPubKey,\n      solAccountResp,\n      tokenAccountResp: {\n        context: ownerTokenAccountResp.context,\n        value: [...ownerTokenAccountResp.value, ...ownerToken2022AccountResp.value],\n      },\n    });\n\n    this._tokenAccounts = tokenAccounts;\n    this._tokenAccountRawInfos = tokenAccountRawInfos;\n\n    this._accountFetchTime = Date.now();\n\n    if (!this._notSubscribeAccountChange) {\n      this._accountChangeListenerId && this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\n      this._accountChangeListenerId = this.scope.connection.onAccountChange(\n        this.scope.ownerPubKey,\n        () => {\n          this.fetchWalletTokenAccounts({ forceUpdate: true });\n          this._accountListener.forEach((cb) =>\n            cb({ tokenAccounts: this._tokenAccounts, tokenAccountRawInfos: this._tokenAccountRawInfos }),\n          );\n        },\n        { commitment: config?.commitment },\n      );\n    }\n\n    return { tokenAccounts, tokenAccountRawInfos };\n  }\n\n  public clearAccountChangeCkb(): void {\n    if (this._accountChangeListenerId !== undefined)\n      this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\n  }\n\n  // user token account needed, old _selectTokenAccount\n  public async getCreatedTokenAccount({\n    mint,\n    programId = TOKEN_PROGRAM_ID,\n    associatedOnly = true,\n  }: {\n    mint: PublicKey;\n    programId?: PublicKey;\n    associatedOnly?: boolean;\n  }): Promise<PublicKey | undefined> {\n    await this.fetchWalletTokenAccounts();\n    const tokenAccounts = this._tokenAccounts\n      .filter(({ mint: accountMint }) => accountMint?.equals(mint))\n      // sort by balance\n      .sort((a, b) => (a.amount.lt(b.amount) ? 1 : -1));\n\n    const ata = this.getAssociatedTokenAccount(mint, programId);\n    for (const tokenAccount of tokenAccounts) {\n      const { publicKey } = tokenAccount;\n      if (publicKey) {\n        if (!associatedOnly || (associatedOnly && ata.equals(publicKey))) return publicKey;\n      }\n    }\n  }\n\n  // old _selectOrCreateTokenAccount\n  public async getOrCreateTokenAccount(params: GetOrCreateTokenAccountParams): Promise<{\n    account?: PublicKey;\n    instructionParams?: AddInstructionParam;\n  }> {\n    await this.fetchWalletTokenAccounts();\n    const {\n      mint,\n      createInfo,\n      associatedOnly,\n      owner,\n      notUseTokenAccount = false,\n      skipCloseAccount = false,\n      checkCreateATAOwner = false,\n      assignSeed,\n    } = params;\n    const tokenProgram = new PublicKey(params.tokenProgram || TOKEN_PROGRAM_ID);\n    const ata = this.getAssociatedTokenAccount(mint, new PublicKey(tokenProgram));\n    const accounts = (notUseTokenAccount ? [] : this.tokenAccountRawInfos)\n      .filter((i) => i.accountInfo.mint.equals(mint) && (!associatedOnly || i.pubkey.equals(ata)))\n      .sort((a, b) => (a.accountInfo.amount.lt(b.accountInfo.amount) ? 1 : -1));\n    // find token or don't need create\n    if (createInfo === undefined || accounts.length > 0) {\n      return accounts.length > 0 ? { account: accounts[0].pubkey } : {};\n    }\n\n    const newTxInstructions: AddInstructionParam = {\n      instructions: [],\n      endInstructions: [],\n      signers: [],\n      instructionTypes: [],\n      endInstructionTypes: [],\n    };\n\n    if (associatedOnly) {\n      const _createATAIns = createAssociatedTokenAccountInstruction(owner, ata, owner, mint, tokenProgram);\n      const _ataInTokenAcc = this.tokenAccountRawInfos.find((i) => i.pubkey.equals(ata))\n      if (checkCreateATAOwner) {\n        const ataInfo = await this.scope.connection.getAccountInfo(ata);\n        if (ataInfo === null) {\n          newTxInstructions.instructions?.push(_createATAIns);\n          newTxInstructions.instructionTypes!.push(InstructionType.CreateATA);\n        } else if (\n          ataInfo.owner.equals(tokenProgram) &&\n          AccountLayout.decode(ataInfo.data).mint.equals(mint) &&\n          AccountLayout.decode(ataInfo.data).owner.equals(owner)\n        ) {\n          /* empty */\n        } else {\n          throw Error(`create ata check error -> mint: ${mint.toString()}, ata: ${ata.toString()}`);\n        }\n      } else if (_ataInTokenAcc === undefined) {\n        newTxInstructions.instructions!.push(_createATAIns);\n        newTxInstructions.instructionTypes!.push(InstructionType.CreateATA);\n      }\n      if (mint.equals(WSOLMint) && createInfo.amount) {\n        const txInstruction = await createWSolAccountInstructions({\n          connection: this.scope.connection,\n          owner: this.scope.ownerPubKey,\n          payer: createInfo.payer || this.scope.ownerPubKey,\n          amount: createInfo.amount ?? 0,\n          skipCloseAccount,\n        });\n        newTxInstructions.instructions!.push(...(txInstruction.instructions || []));\n        newTxInstructions.endInstructions!.push(...(txInstruction.endInstructions || []));\n        newTxInstructions.instructionTypes!.push(...(txInstruction.instructionTypes || []));\n        newTxInstructions.endInstructionTypes!.push(...(txInstruction.endInstructionTypes || []));\n\n        if (createInfo.amount) {\n          newTxInstructions.instructions!.push(\n            makeTransferInstruction({\n              source: txInstruction.addresses.newAccount,\n              destination: ata,\n              owner: this.scope.ownerPubKey,\n              amount: createInfo.amount,\n              tokenProgram: TOKEN_PROGRAM_ID,\n            }),\n          );\n          newTxInstructions.instructionTypes!.push(InstructionType.TransferAmount);\n        }\n      }\n\n      if (!skipCloseAccount && _ataInTokenAcc === undefined) {\n        newTxInstructions.endInstructions!.push(\n          closeAccountInstruction({\n            owner,\n            payer: createInfo.payer || owner,\n            tokenAccount: ata,\n            programId: tokenProgram,\n          }),\n        );\n        newTxInstructions.endInstructionTypes!.push(InstructionType.CloseAccount);\n      }\n\n      return { account: ata, instructionParams: newTxInstructions };\n    } else {\n      const newTokenAccount = generatePubKey({ fromPublicKey: owner, programId: tokenProgram, assignSeed });\n      const balanceNeeded = await this.scope.connection.getMinimumBalanceForRentExemption(AccountLayout.span);\n\n      const createAccountIns = SystemProgram.createAccountWithSeed({\n        fromPubkey: owner,\n        basePubkey: owner,\n        seed: newTokenAccount.seed,\n        newAccountPubkey: newTokenAccount.publicKey,\n        lamports: balanceNeeded + Number(createInfo.amount?.toString() ?? 0),\n        space: AccountLayout.span,\n        programId: tokenProgram,\n      });\n\n      newTxInstructions.instructions!.push(\n        createAccountIns,\n        initTokenAccountInstruction({\n          mint,\n          tokenAccount: newTokenAccount.publicKey,\n          owner: this.scope.ownerPubKey,\n          programId: tokenProgram,\n        }),\n      );\n      newTxInstructions.instructionTypes!.push(InstructionType.CreateAccount);\n      newTxInstructions.instructionTypes!.push(InstructionType.InitAccount);\n      if (!skipCloseAccount) {\n        newTxInstructions.endInstructions!.push(\n          closeAccountInstruction({\n            owner,\n            payer: createInfo.payer || owner,\n            tokenAccount: newTokenAccount.publicKey,\n            programId: tokenProgram,\n          }),\n        );\n        newTxInstructions.endInstructionTypes!.push(InstructionType.CloseAccount);\n      }\n      return { account: newTokenAccount.publicKey, instructionParams: newTxInstructions };\n    }\n    // }\n  }\n\n  public async checkOrCreateAta({\n    mint,\n    programId = TOKEN_PROGRAM_ID,\n    autoUnwrapWSOLToSOL,\n  }: {\n    mint: PublicKey;\n    programId?: PublicKey;\n    autoUnwrapWSOLToSOL?: boolean;\n  }): Promise<{ pubKey: PublicKey; newInstructions: AddInstructionParam }> {\n    await this.fetchWalletTokenAccounts();\n    let tokenAccountAddress = this.scope.account.tokenAccounts.find(\n      ({ mint: accountTokenMint }) => accountTokenMint?.toBase58() === mint.toBase58(),\n    )?.publicKey;\n\n    const owner = this.scope.ownerPubKey;\n    const newTxInstructions: AddInstructionParam = {};\n\n    if (!tokenAccountAddress) {\n      const ataAddress = this.getAssociatedTokenAccount(mint, programId);\n      const instruction = await createAssociatedTokenAccountInstruction(owner, ataAddress, owner, mint, programId);\n      newTxInstructions.instructions = [instruction];\n      newTxInstructions.instructionTypes = [InstructionType.CreateATA];\n      tokenAccountAddress = ataAddress;\n    }\n    if (autoUnwrapWSOLToSOL && WSOLMint.toBase58() === mint.toBase58()) {\n      newTxInstructions.endInstructions = [\n        closeAccountInstruction({ owner, payer: owner, tokenAccount: tokenAccountAddress, programId }),\n      ];\n      newTxInstructions.endInstructionTypes = [InstructionType.CloseAccount];\n    }\n\n    return {\n      pubKey: tokenAccountAddress,\n      newInstructions: newTxInstructions,\n    };\n  }\n\n  // old _handleTokenAccount\n  public async handleTokenAccount(\n    params: HandleTokenAccountParams,\n  ): Promise<AddInstructionParam & { tokenAccount: PublicKey }> {\n    const {\n      side,\n      amount,\n      mint,\n      programId = TOKEN_PROGRAM_ID,\n      tokenAccount,\n      payer = this.scope.ownerPubKey,\n      bypassAssociatedCheck,\n      skipCloseAccount,\n      checkCreateATAOwner,\n    } = params;\n\n    const ata = this.getAssociatedTokenAccount(mint, programId);\n\n    if (new PublicKey(WSOLMint).equals(mint)) {\n      const txInstruction = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer,\n        amount,\n        skipCloseAccount,\n      });\n      return { tokenAccount: txInstruction.addresses.newAccount, ...txInstruction };\n    } else if (!tokenAccount || (side === \"out\" && !ata.equals(tokenAccount) && !bypassAssociatedCheck)) {\n      const instructions: TransactionInstruction[] = [];\n      const _createATAIns = createAssociatedTokenAccountInstruction(\n        this.scope.ownerPubKey,\n        ata,\n        this.scope.ownerPubKey,\n        mint,\n        programId,\n      );\n\n      if (checkCreateATAOwner) {\n        const ataInfo = await this.scope.connection.getAccountInfo(ata);\n        if (ataInfo === null) {\n          instructions.push(_createATAIns);\n        } else if (\n          ataInfo.owner.equals(TOKEN_PROGRAM_ID) &&\n          AccountLayout.decode(ataInfo.data).mint.equals(mint) &&\n          AccountLayout.decode(ataInfo.data).owner.equals(this.scope.ownerPubKey)\n        ) {\n          /* empty */\n        } else {\n          throw Error(`create ata check error -> mint: ${mint.toString()}, ata: ${ata.toString()}`);\n        }\n      } else {\n        instructions.push(_createATAIns);\n      }\n\n      return {\n        tokenAccount: ata,\n        instructions,\n        instructionTypes: [InstructionType.CreateATA],\n      };\n    }\n\n    return { tokenAccount };\n  }\n\n  public async processTokenAccount(props: {\n    mint: PublicKey;\n    programId?: PublicKey;\n    amount?: BigNumberish;\n    useSOLBalance?: boolean;\n    handleTokenAccount?: boolean;\n  }): Promise<Promise<AddInstructionParam & { tokenAccount?: PublicKey }>> {\n    const { mint, programId = TOKEN_PROGRAM_ID, amount, useSOLBalance, handleTokenAccount } = props;\n    let tokenAccount: PublicKey | undefined;\n    const txBuilder = this.createTxBuilder();\n\n    if (mint.equals(new PublicKey(WSOLMint)) && useSOLBalance) {\n      // mintA\n      const { tokenAccount: _tokenAccount, ...instructions } = await this.handleTokenAccount({\n        side: \"in\",\n        amount: amount || 0,\n        mint,\n        bypassAssociatedCheck: true,\n        programId,\n      });\n      tokenAccount = _tokenAccount;\n      txBuilder.addInstruction(instructions);\n    } else {\n      tokenAccount = await this.getCreatedTokenAccount({\n        mint,\n        associatedOnly: false,\n        programId,\n      });\n      if (!tokenAccount && handleTokenAccount) {\n        const { tokenAccount: _tokenAccount, ...instructions } = await this.scope.account.handleTokenAccount({\n          side: \"in\",\n          amount: 0,\n          mint,\n          bypassAssociatedCheck: true,\n          programId,\n        });\n        tokenAccount = _tokenAccount;\n        txBuilder.addInstruction(instructions);\n      }\n    }\n\n    return { tokenAccount, ...txBuilder.AllTxData };\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { createLogger, Logger } from \"../common/logger\";\nimport { TxBuilder } from \"../common/txTool/txTool\";\n\nimport { Raydium } from \"./\";\n\nexport interface ModuleBaseProps {\n  scope: Raydium;\n  moduleName: string;\n}\n\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\n  args\n    .map((arg) => {\n      try {\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\n      } catch {\n        return arg;\n      }\n    })\n    .join(\", \");\nexport default class ModuleBase {\n  public scope: Raydium;\n  private disabled = false;\n  protected logger: Logger;\n\n  constructor({ scope, moduleName }: ModuleBaseProps) {\n    this.scope = scope;\n    this.logger = createLogger(moduleName);\n  }\n\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\n    this.scope.checkOwner();\n    return new TxBuilder({\n      connection: this.scope.connection,\n      feePayer: feePayer || this.scope.ownerPubKey,\n      cluster: this.scope.cluster,\n      owner: this.scope.owner,\n      blockhashCommitment: this.scope.blockhashCommitment,\n      api: this.scope.api,\n      signAllTransactions: this.scope.signAllTransactions,\n    });\n  }\n\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\n    this.logger.debug(joinMsg(args));\n  }\n\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\n    this.logger.info(joinMsg(args));\n  }\n\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\n    const message = joinMsg(args);\n    // this.logger.error(message);\n    throw new Error(message);\n  }\n\n  public checkDisabled(): void {\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\n  }\n}\n","import { Commitment, Connection, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { BigNumberish, parseBigNumberish } from \"@/common\";\nimport {\n  createCloseAccountInstruction,\n  createInitializeAccountInstruction,\n  createTransferInstruction,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\nimport { InstructionType } from \"@/common/txTool/txType\";\nimport { TOKEN_WSOL } from \"../token/constant\";\nimport { generatePubKey } from \"./util\";\n\nimport { splAccountLayout } from \"./layout\";\n\nexport function initTokenAccountInstruction(params: {\n  mint: PublicKey;\n  tokenAccount: PublicKey;\n  owner: PublicKey;\n  programId?: PublicKey;\n}): TransactionInstruction {\n  const { mint, tokenAccount, owner, programId = TOKEN_PROGRAM_ID } = params;\n  return createInitializeAccountInstruction(tokenAccount, mint, owner, programId);\n}\n\nexport function closeAccountInstruction(params: {\n  tokenAccount: PublicKey;\n  payer: PublicKey;\n  multiSigners?: Signer[];\n  owner: PublicKey;\n  programId?: PublicKey;\n}): TransactionInstruction {\n  const { tokenAccount, payer, multiSigners = [], owner, programId = TOKEN_PROGRAM_ID } = params;\n  return createCloseAccountInstruction(tokenAccount, payer, owner, multiSigners, programId);\n}\n\ninterface CreateWSolTokenAccount {\n  connection: Connection;\n  payer: PublicKey;\n  owner: PublicKey;\n  amount: BigNumberish;\n  commitment?: Commitment;\n  skipCloseAccount?: boolean;\n}\n/**\n * WrappedNative account = wsol account\n */\nexport async function createWSolAccountInstructions(params: CreateWSolTokenAccount): Promise<\n  AddInstructionParam & {\n    addresses: { newAccount: PublicKey };\n  }\n> {\n  const { connection, amount, commitment, payer, owner, skipCloseAccount } = params;\n\n  const balanceNeeded = await connection.getMinimumBalanceForRentExemption(splAccountLayout.span, commitment);\n  const lamports = parseBigNumberish(amount).add(new BN(balanceNeeded));\n  const newAccount = generatePubKey({ fromPublicKey: payer, programId: TOKEN_PROGRAM_ID });\n\n  return {\n    addresses: { newAccount: newAccount.publicKey },\n    signers: [],\n    instructions: [\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: payer,\n        basePubkey: payer,\n        seed: newAccount.seed,\n        newAccountPubkey: newAccount.publicKey,\n        lamports: lamports.toNumber(),\n        space: splAccountLayout.span,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      initTokenAccountInstruction({\n        mint: new PublicKey(TOKEN_WSOL.address),\n        tokenAccount: newAccount.publicKey,\n        owner,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n    ],\n    instructionTypes: [InstructionType.CreateAccount, InstructionType.InitAccount],\n    endInstructionTypes: skipCloseAccount ? [] : [InstructionType.CloseAccount],\n    endInstructions: skipCloseAccount\n      ? []\n      : [\n          closeAccountInstruction({\n            tokenAccount: newAccount.publicKey,\n            payer,\n            owner,\n          }),\n        ],\n  };\n}\n\nexport function makeTransferInstruction({\n  source,\n  destination,\n  owner,\n  amount,\n  multiSigners = [],\n  tokenProgram = TOKEN_PROGRAM_ID,\n}: {\n  source: PublicKey;\n  destination: PublicKey;\n  owner: PublicKey;\n  amount: BigNumberish;\n  multiSigners?: Signer[];\n  tokenProgram?: PublicKey;\n}): TransactionInstruction {\n  return createTransferInstruction(source, destination, owner, BigInt(String(amount)), multiSigners, tokenProgram);\n}\n","import { AccountInfo, GetProgramAccountsResponse, Keypair, PublicKey, RpcResponseAndContext } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { createLogger, getATAAddress } from \"../../common\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { splAccountLayout } from \"./layout\";\nimport { TokenAccount, TokenAccountRaw } from \"./types\";\n\nconst logger = createLogger(\"Raydium_Util\");\n\nexport interface ParseTokenAccount {\n  owner: PublicKey;\n  solAccountResp?: AccountInfo<Buffer> | null;\n  tokenAccountResp: RpcResponseAndContext<GetProgramAccountsResponse>;\n}\n\nexport function parseTokenAccountResp({ owner, solAccountResp, tokenAccountResp }: ParseTokenAccount): {\n  tokenAccounts: TokenAccount[];\n  tokenAccountRawInfos: TokenAccountRaw[];\n} {\n  const tokenAccounts: TokenAccount[] = [];\n  const tokenAccountRawInfos: TokenAccountRaw[] = [];\n\n  for (const { pubkey, account } of tokenAccountResp.value) {\n    const accountInfo = splAccountLayout.decode(account.data);\n    const { mint, amount } = accountInfo;\n    tokenAccounts.push({\n      publicKey: pubkey,\n      mint,\n      amount,\n      isAssociated: getATAAddress(owner, mint, account.owner).publicKey.equals(pubkey),\n      isNative: false,\n      programId: account.owner,\n    });\n    // todo programId should get from api\n    tokenAccountRawInfos.push({ pubkey, accountInfo, programId: account.owner });\n  }\n\n  if (solAccountResp) {\n    tokenAccounts.push({\n      mint: PublicKey.default,\n      amount: new BN(String(solAccountResp.lamports)),\n      isNative: true,\n      programId: solAccountResp.owner,\n    });\n  }\n\n  return {\n    tokenAccounts,\n    tokenAccountRawInfos,\n  };\n}\n\nexport function generatePubKey({\n  fromPublicKey,\n  programId = TOKEN_PROGRAM_ID,\n  assignSeed,\n}: {\n  fromPublicKey: PublicKey;\n  programId: PublicKey;\n  assignSeed?: string;\n}): { publicKey: PublicKey; seed: string } {\n  const seed = assignSeed ? btoa(assignSeed).slice(0, 32) : Keypair.generate().publicKey.toBase58().slice(0, 32);\n  const publicKey = createWithSeed(fromPublicKey, seed, programId);\n  return { publicKey, seed };\n}\n\nfunction createWithSeed(fromPublicKey: PublicKey, seed: string, programId: PublicKey): PublicKey {\n  const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n  const publicKeyBytes = sha256(buffer);\n  return new PublicKey(publicKeyBytes);\n}\n","unable to read source [project]/node_modules/@raydium-io/raydium-sdk-v2/node_modules/@noble/hashes/src/_assert.ts","unable to read source [project]/node_modules/@raydium-io/raydium-sdk-v2/node_modules/@noble/hashes/src/utils.ts","unable to read source [project]/node_modules/@raydium-io/raydium-sdk-v2/node_modules/@noble/hashes/src/_md.ts","unable to read source [project]/node_modules/@raydium-io/raydium-sdk-v2/node_modules/@noble/hashes/src/sha256.ts","import { PublicKey } from \"@solana/web3.js\";\nimport BN, { isBN } from \"bn.js\";\n\nimport {\n  bits,\n  blob,\n  Blob,\n  Layout,\n  offset as _offset,\n  seq as _seq,\n  Structure as _Structure,\n  u32 as _u32,\n  u8 as _u8,\n  UInt,\n  union as _union,\n  Union as _Union,\n} from \"./buffer-layout\";\n\nexport * from \"./buffer-layout\";\nexport { blob };\n\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\n  blob: Layout<Buffer>;\n  signed: boolean;\n\n  constructor(span: number, signed: boolean, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\n    super(span, property);\n    this.blob = blob(span);\n    this.signed = signed;\n  }\n\n  /** @override */\n  decode(b: Buffer, offset = 0): BN {\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\n    if (this.signed) {\n      return num.fromTwos(this.span * 8).clone();\n    }\n    return num;\n  }\n\n  /** @override */\n  encode(src: BN, b: Buffer, offset = 0): number {\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\n    if (this.signed) {\n      src = src.toTwos(this.span * 8);\n    }\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\n  }\n}\n\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\n  _lower: any;\n  _upper: any;\n  // TODO: unknown\n  constructor(property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(8, property);\n    this._lower = bits(_u32(), false);\n    this._upper = bits(_u32(), false);\n  }\n\n  addBoolean(property: string): void {\n    if (this._lower.fields.length < 32) {\n      this._lower.addBoolean(property);\n    } else {\n      this._upper.addBoolean(property);\n    }\n  }\n\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\n    const lowerDecoded = this._lower.decode(b, offset);\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\n    return { ...lowerDecoded, ...upperDecoded };\n  }\n\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\n  }\n}\n\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(1, property);\n}\n\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(4, property);\n}\n\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, false, property);\n}\n\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, false, property);\n}\n\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(1, true, property);\n}\n\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, true, property);\n}\n\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, true, property);\n}\n\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\n  layout: Layout<T>;\n  decoder: (data: T) => U;\n  encoder: (src: U) => T;\n\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(layout.span, property);\n    this.layout = layout;\n    this.decoder = decoder;\n    this.encoder = encoder;\n  }\n\n  decode(b: Buffer, offset?: number): U {\n    return this.decoder(this.layout.decode(b, offset));\n  }\n\n  encode(src: U, b: Buffer, offset?: number): number {\n    return this.layout.encode(this.encoder(src), b, offset);\n  }\n\n  getSpan(b: Buffer, offset?: number): number {\n    return this.layout.getSpan(b, offset);\n  }\n}\n\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\n  return new WrappedLayout(\n    blob(32),\n    (b: Buffer) => new PublicKey(b),\n    (key: PublicKey) => key.toBuffer(),\n    property,\n  );\n}\n\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\n  layout: Layout<T>;\n  discriminator: Layout<number>;\n\n  constructor(layout: Layout<T>, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(-1, property);\n    this.layout = layout;\n    this.discriminator = _u8();\n  }\n\n  encode(src: T | null, b: Buffer, offset = 0): number {\n    if (src === null || src === undefined) {\n      return this.discriminator.encode(0, b, offset);\n    }\n    this.discriminator.encode(1, b, offset);\n    return this.layout.encode(src, b, offset + 1) + 1;\n  }\n\n  decode(b: Buffer, offset = 0): T | null {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return null;\n    } else if (discriminator === 1) {\n      return this.layout.decode(b, offset + 1);\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n\n  getSpan(b: Buffer, offset = 0): number {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return 1;\n    } else if (discriminator === 1) {\n      return this.layout.getSpan(b, offset + 1) + 1;\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n}\n\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\n  return new OptionLayout<T, P>(layout, property);\n}\n\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\n}\n\nexport function decodeBool(value: number): boolean {\n  if (value === 0) {\n    return false;\n  } else if (value === 1) {\n    return true;\n  }\n  throw new Error(\"Invalid bool: \" + value);\n}\n\nexport function encodeBool(value: boolean): number {\n  return value ? 1 : 0;\n}\n\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ values: T[] }> = struct([\n    length,\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\n  ]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\n\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\n    if (!receivedTag.eq(tag)) {\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\n    }\n    return data;\n  }\n\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\n}\n\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ data }) => data,\n    (data) => ({ data }),\n    property,\n  );\n}\n\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\n  return new WrappedLayout(\n    vecU8(),\n    (data) => data.toString(\"utf-8\"),\n    (s) => Buffer.from(s, \"utf-8\"),\n    property,\n  );\n}\n\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\n  registry: Record<string, Layout<any>>;\n}\n\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\n  const unionLayout = _union(_u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\n}\n\nexport function array<T, P extends string = \"\">(\n  elementLayout: Layout<T>,\n  length: number,\n  property?: P,\n): Layout<T[], P> {\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport class Structure<T, P, D extends { [key: string]: any; }> extends _Structure<T, P, D> {\n  /** @override */\n  decode(b: Buffer, offset?: number): D {\n    return super.decode(b, offset);\n  }\n}\n\nexport function struct<T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n): T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n    Value,\n    P,\n    {\n      [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n      ? V\n      : any;\n    }\n  >\n  : any {\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\n  return new Structure(fields, property, decodePrefixes);\n}\n\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\n  ? S\n  : any;\nexport type GetStructureFromLayoutSchema<S extends { [key: string]: any; }> = Structure<any, any, S>;\n\nexport class Union<Schema extends { [key: string]: any; }> extends _Union<Schema> {\n  encodeInstruction(instruction: any): Buffer {\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\n    const b = Buffer.alloc(instructionMaxSpan);\n    return b.slice(0, this.encode(instruction, b));\n  }\n\n  decodeInstruction(instruction: any): Partial<Schema> {\n    return this.decode(instruction);\n  }\n}\nexport function union<UnionSchema extends { [key: string]: any } = any>(\n  discr: any,\n  defaultLayout?: any,\n  property?: string,\n): Union<UnionSchema> {\n  return new Union(discr, defaultLayout, property);\n}\n\nclass Zeros extends Blob {\n  decode(b: Buffer, offset: number): Buffer {\n    const slice = super.decode(b, offset);\n    if (!slice.every((v) => v === 0)) {\n      throw new Error(\"nonzero padding bytes\");\n    }\n    return slice;\n  }\n}\n\nexport function zeros(length: number): Zeros {\n  return new Zeros(length);\n}\n\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\n  elementLayout: Layout<T, P>,\n  count: number | BN | Layout<BN | number, P>,\n  property?: AnotherP,\n): Layout<T[], AnotherP> {\n  let parsedCount: number;\n  const superCount =\n    typeof count === \"number\"\n      ? count\n      : isBN(count)\n        ? count.toNumber()\n        : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\n          get(target, property): any {\n            if (!parsedCount) {\n              // get count in targetLayout. note that count may be BN\n              const countProperty = Reflect.get(target, \"count\");\n\n              // let targetLayout's  property:count be a number\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\n\n              // record the count\n              Reflect.set(target, \"count\", parsedCount);\n            }\n            return Reflect.get(target, property);\n          },\n          set(target, property, value): any {\n            if (property === \"count\") {\n              parsedCount = value;\n            }\n            return Reflect.set(target, property, value);\n          },\n        });\n\n  // @ts-expect-error force type\n  return _seq(elementLayout, superCount, property);\n}\n","import {\n  bits as _bits,\n  BitStructure as _BitStructure,\n  blob as _blob,\n  Blob as _Blob,\n  cstr as _cstr,\n  f32 as _f32,\n  f32be as _f32be,\n  f64 as _f64,\n  f64be as _f64be,\n  greedy as _greedy,\n  Layout as _Layout,\n  ns64 as _ns64,\n  ns64be as _ns64be,\n  nu64 as _nu64,\n  nu64be as _nu64be,\n  offset as _offset,\n  s16 as _s16,\n  s16be as _s16be,\n  s24 as _s24,\n  s24be as _s24be,\n  s32 as _s32,\n  s32be as _s32be,\n  s40 as _s40,\n  s40be as _s40be,\n  s48 as _s48,\n  s48be as _s48be,\n  s8 as _s8,\n  seq as _seq,\n  struct as _struct,\n  Structure as _Structure,\n  u16 as _u16,\n  u16be as _u16be,\n  u24 as _u24,\n  u24be as _u24be,\n  u32 as _u32,\n  u32be as _u32be,\n  u40 as _u40,\n  u40be as _u40be,\n  u48 as _u48,\n  u48be as _u48be,\n  u8 as _u8,\n  UInt as _UInt,\n  union as _union,\n  Union as _Union,\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\n  utf8 as _utf8,\n} from \"@solana/buffer-layout\";\n\n//#region ------------------- Layout -------------------\nexport interface Layout<T = any, P = \"\"> {\n  span: number;\n  property?: P;\n  decode(b: Buffer, offset?: number): T;\n  encode(src: T, b: Buffer, offset?: number): number;\n  getSpan(b: Buffer, offset?: number): number;\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\n}\nexport interface LayoutConstructor {\n  new <T, P>(): Layout<T, P>; // for class extends syntex\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\n  readonly prototype: Layout;\n}\nexport const Layout = _Layout as unknown as LayoutConstructor;\n//#endregion\n\n//#region ------------------- Structure -------------------\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\n  extends Layout<DecodeSchema, P> {\n  span: number;\n  decode(b: Buffer, offset?: number): DecodeSchema;\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\n  offsetOf<AP extends string>(property: AP): number;\n}\ninterface StructureConstructor {\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\n    fields: T,\n    property?: P,\n    decodePrefixes?: boolean,\n  ): Structure<T, P, DecodeSchema>;\n}\nexport const Structure = _Structure as unknown as StructureConstructor;\n//#endregion\n\n//#region ------------------- Union -------------------\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\n  registry: object;\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\n  addVariant(\n    variant: number,\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\n    property?: string,\n  ): any /* TEMP: code in Layout.js 1809 */;\n}\ninterface UnionConstructor {\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\n  new <UnionSchema extends { [key: string]: any } = any>(\n    discr: Layout<any, any>,\n    defaultLayout: Layout<any, any>,\n    property?: string,\n  ): Union<UnionSchema>;\n}\nexport const Union = _Union as unknown as UnionConstructor;\n//#endregion\n\n//#region ------------------- BitStructure -------------------\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\ninterface BitStructureConstructor {\n  new (...params: any[]): BitStructure;\n}\nexport const BitStructure = _BitStructure as BitStructureConstructor;\n//#endregion\n\n//#region ------------------- UInt -------------------\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\ninterface UIntConstructor {\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\n}\nexport const UInt = _UInt as UIntConstructor;\n//#endregion\n\n//#region ------------------- Blob -------------------\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\ninterface BlobConstructor {\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\n}\nexport const Blob = _Blob as unknown as BlobConstructor;\n//#endregion\n\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\n\nexport const struct = _struct as <T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n) => T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any;\n\nexport const seq = _seq as unknown as <T, P>(\n  elementLayout: Layout<T, string>,\n  count: number | Layout<number, string>,\n  property?: P,\n) => Layout<T[]>;\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\n  discr: Layout<any, any>,\n  defaultLayout?: any,\n  property?: string,\n) => Union<UnionSchema>;\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\n  layout: Layout<any, P>,\n  property?: P,\n) => any;\nexport const blob = _blob as unknown as <P extends string = \"\">(\n  length: number | Layout<number, P>,\n  property?: P,\n) => Blob<P>;\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\n  word: Layout<T>,\n  msb?: boolean,\n  property?: P,\n) => BitStructure<T, P>; // TODO: not quite sure\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\n  layout: Layout<T, P>,\n  offset?: number,\n  property?: P,\n) => Layout<T, P>;\n\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\n\nexport const splAccountLayout = struct([\n  publicKey(\"mint\"),\n  publicKey(\"owner\"),\n  u64(\"amount\"),\n  u32(\"delegateOption\"),\n  publicKey(\"delegate\"),\n  u8(\"state\"),\n  u32(\"isNativeOption\"),\n  u64(\"isNative\"),\n  u64(\"delegatedAmount\"),\n  u32(\"closeAuthorityOption\"),\n  publicKey(\"closeAuthority\"),\n]);\n","import { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport { createAssociatedTokenAccountInstruction } from \"@solana/spl-token\";\nimport { parseBigNumberish } from \"@/common\";\n\nimport { FormatFarmKeyOut } from \"../../api/type\";\nimport { AddInstructionParam, jsonInfo2PoolKeys } from \"@/common\";\nimport { BN_ZERO } from \"@/common/bignumber\";\nimport { getATAAddress } from \"@/common/pda\";\nimport { FARM_PROGRAM_ID_V6 } from \"@/common/programId\";\nimport { SOLMint, solToWSol, WSOLMint } from \"@/common/pubKey\";\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\nimport { generatePubKey } from \"../account/util\";\n\nimport Decimal from \"decimal.js\";\nimport { FormatFarmInfoOut, FormatFarmKeyOutV6 } from \"../../api/type\";\nimport { ComputeBudgetConfig } from \"../../raydium/type\";\nimport { createWSolAccountInstructions } from \"../account/instruction\";\nimport ModuleBase from \"../moduleBase\";\nimport { TOKEN_WSOL } from \"../token/constant\";\nimport {\n  FARM_LOCK_MINT,\n  FARM_LOCK_VAULT,\n  FARM_PROGRAM_TO_VERSION,\n  isValidFarmVersion,\n  poolTypeV6,\n  validateFarmRewards,\n} from \"./config\";\nimport {\n  createAssociatedLedgerAccountInstruction,\n  makeAddNewRewardInstruction,\n  makeCreateFarmInstruction,\n  makeCreatorWithdrawFarmRewardInstruction,\n  makeDepositInstructionV3,\n  makeDepositInstructionV5,\n  makeDepositInstructionV6,\n  makeRestartRewardInstruction,\n  makeWithdrawInstructionV3,\n  makeWithdrawInstructionV4,\n  makeWithdrawInstructionV5,\n  makeWithdrawInstructionV6,\n} from \"./instruction\";\nimport { FarmLedger, farmStateV6Layout } from \"./layout\";\nimport {\n  CreateFarm,\n  CreateFarmExtInfo,\n  FarmDWParam,\n  FarmRewardInfo,\n  FarmRewardInfoConfig,\n  RewardInfoKey,\n  UpdateFarmReward,\n  UpdateFarmRewards,\n} from \"./type\";\nimport {\n  calFarmRewardAmount,\n  farmRewardInfoToConfig,\n  getAssociatedAuthority,\n  getAssociatedLedgerAccount,\n  getAssociatedLedgerPoolAccount,\n  getFarmLedgerLayout,\n} from \"./util\";\n\nexport default class Farm extends ModuleBase {\n  // token account needed\n  private async _getUserRewardInfo({ payer, rewardInfo }: { payer: PublicKey; rewardInfo: FarmRewardInfo }): Promise<{\n    rewardPubKey?: PublicKey;\n    newInstruction?: AddInstructionParam;\n  }> {\n    if (rewardInfo.mint.equals(SOLMint)) {\n      const txInstructions = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer,\n        amount: calFarmRewardAmount({\n          ...rewardInfo,\n          openTime: rewardInfo.openTime.toString(),\n          endTime: rewardInfo.endTime.toString(),\n        }),\n      });\n      return {\n        rewardPubKey: txInstructions.addresses.newAccount,\n        newInstruction: txInstructions,\n      };\n    }\n\n    return {\n      rewardPubKey: await this.scope.account.getCreatedTokenAccount({\n        mint: rewardInfo.mint,\n        associatedOnly: false,\n      })!,\n    };\n  }\n\n  // token account needed\n  public async create<T extends TxVersion>({\n    poolInfo: propPoolInfo,\n    rewardInfos,\n    payer,\n    programId = FARM_PROGRAM_ID_V6,\n    txVersion,\n  }: CreateFarm<T>): Promise<MakeTxData<T, CreateFarmExtInfo>> {\n    this.checkDisabled();\n    this.scope.checkOwner();\n\n    const lpMint = new PublicKey(propPoolInfo.lpMint.address);\n    const poolInfo = {\n      lpMint,\n      lockInfo: { lockMint: FARM_LOCK_MINT, lockVault: FARM_LOCK_VAULT },\n      version: 6,\n      rewardInfos,\n      programId,\n    };\n\n    const txBuilder = this.createTxBuilder();\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const farmKeyPair = generatePubKey({ fromPublicKey: payerPubKey, programId: poolInfo.programId });\n    const lamports = await this.scope.connection.getMinimumBalanceForRentExemption(farmStateV6Layout.span);\n\n    txBuilder.addInstruction({\n      instructions: [\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: payerPubKey,\n          basePubkey: payerPubKey,\n          seed: farmKeyPair.seed,\n          newAccountPubkey: farmKeyPair.publicKey,\n          lamports,\n          space: farmStateV6Layout.span,\n          programId: poolInfo.programId,\n        }),\n      ],\n    });\n\n    const { publicKey: authority, nonce } = getAssociatedAuthority({\n      programId: new PublicKey(poolInfo.programId),\n      poolId: farmKeyPair.publicKey,\n    });\n\n    const lpVault = getAssociatedLedgerPoolAccount({\n      programId: poolInfo.programId,\n      poolId: farmKeyPair.publicKey,\n      mint: poolInfo.lpMint,\n      type: \"lpVault\",\n    });\n\n    const rewardInfoConfig: FarmRewardInfoConfig[] = [];\n    const rewardInfoKey: RewardInfoKey[] = [];\n\n    for (const rewardInfo of poolInfo.rewardInfos) {\n      if (rewardInfo.openTime >= rewardInfo.endTime)\n        this.logAndCreateError(\"start time error\", \"rewardInfo.rewardOpenTime\", rewardInfo.openTime.toString());\n      if (isNaN(poolTypeV6[rewardInfo.rewardType])) this.logAndCreateError(\"rewardType error\", rewardInfo.rewardType);\n      if (Number(rewardInfo.perSecond) <= 0) this.logAndCreateError(\"rewardPerSecond error\", rewardInfo.perSecond);\n\n      rewardInfoConfig.push(farmRewardInfoToConfig(rewardInfo));\n\n      const { rewardPubKey, newInstruction } = await this._getUserRewardInfo({\n        rewardInfo,\n        payer: payerPubKey,\n      });\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n      if (!rewardPubKey) this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n\n      const rewardMint = rewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : rewardInfo.mint;\n      rewardInfoKey.push({\n        rewardMint,\n        rewardVault: getAssociatedLedgerPoolAccount({\n          programId: poolInfo.programId,\n          poolId: farmKeyPair.publicKey,\n          mint: rewardMint,\n          type: \"rewardVault\",\n        }),\n        userRewardToken: rewardPubKey!,\n      });\n    }\n\n    const { account: lockUserAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n      mint: new PublicKey(poolInfo.lockInfo.lockMint),\n      owner: this.scope.ownerPubKey,\n      skipCloseAccount: false,\n      createInfo: {\n        payer: this.scope.ownerPubKey,\n        amount: 0,\n      },\n      associatedOnly: false,\n    });\n    instructionParams && txBuilder.addInstruction(instructionParams);\n    if (!lockUserAccount)\n      this.logAndCreateError(\"cannot found lock vault\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n\n    const { instruction, instructionType } = makeCreateFarmInstruction({\n      farmId: farmKeyPair.publicKey,\n      owner: this.scope.ownerPubKey,\n      farmAuthority: authority,\n      lpVault,\n      lpMint: poolInfo.lpMint,\n      lockVault: poolInfo.lockInfo.lockVault,\n      lockMint: poolInfo.lockInfo.lockMint,\n      lockUserAccount,\n      programId: poolInfo.programId,\n      rewardInfo: rewardInfoKey,\n      rewardInfoConfig,\n      nonce,\n    });\n\n    return txBuilder\n      .addInstruction({\n        instructions: [instruction],\n        instructionTypes: [instructionType],\n      })\n      .versionBuild<CreateFarmExtInfo>({\n        txVersion,\n        extInfo: {\n          farmId: farmKeyPair.publicKey,\n          farmAuthority: authority,\n          lpVault,\n          lockUserAccount: lockUserAccount!,\n          nonce,\n        },\n      }) as Promise<MakeTxData<T, CreateFarmExtInfo>>;\n  }\n\n  public async restartReward<T extends TxVersion>({\n    farmInfo,\n    payer,\n    newRewardInfo,\n    txVersion,\n  }: UpdateFarmReward): Promise<MakeTxData<T>> {\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\n\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\n\n    const farmKeys = {\n      id: farmInfoKeys.id,\n      rewardInfos: farmInfo.rewardInfos,\n      lpVault: farmInfoKeys.lpVault,\n      programId: farmInfoKeys.programId,\n    };\n\n    if (newRewardInfo.openTime >= newRewardInfo.endTime)\n      this.logAndCreateError(\"start time error\", \"newRewardInfo\", newRewardInfo);\n\n    const payerPubKey = payer || this.scope.ownerPubKey;\n\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\n    const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\n      new PublicKey(item.mint.address).equals(rewardMint),\n    );\n    const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\n\n    if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\n\n    const rewardVault = rewardInfo!.vault ?? SOLMint;\n    const txBuilder = this.createTxBuilder();\n\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n      rewardInfo: newRewardInfo,\n      payer: payerPubKey,\n    });\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n    if (!userRewardTokenPub)\n      this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n\n    return txBuilder\n      .addInstruction({\n        instructions: [\n          makeRestartRewardInstruction({\n            payer: this.scope.ownerPubKey,\n            rewardVault,\n            userRewardTokenPub: userRewardTokenPub!,\n            farmKeys,\n            rewardInfo: newRewardInfo,\n          }),\n        ],\n        instructionTypes: [InstructionType.FarmV6Restart],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async restartRewards<T extends TxVersion>({\n    farmInfo,\n    payer,\n    newRewardInfos,\n    txVersion,\n  }: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\n\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\n\n    const farmKeys = {\n      id: farmInfoKeys.id,\n      rewardInfos: farmInfo.rewardInfos,\n      lpVault: farmInfoKeys.lpVault,\n      programId: farmInfoKeys.programId,\n    };\n\n    newRewardInfos.forEach((reward) => {\n      if (reward.openTime >= reward.endTime) this.logAndCreateError(\"start time error\", \"newRewardInfo\", reward);\n    });\n\n    const payerPubKey = payer || this.scope.ownerPubKey;\n    const txBuilder = this.createTxBuilder();\n\n    for (const itemReward of newRewardInfos) {\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\n      const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\n        new PublicKey(item.mint.address).equals(rewardMint),\n      );\n      const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\n      if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\n      const rewardVault = rewardInfo!.vault ?? SOLMint;\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n        rewardInfo: itemReward,\n        payer: payerPubKey,\n      });\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\n      if (!userRewardTokenPub)\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n      const ins = makeRestartRewardInstruction({\n        payer: this.scope.ownerPubKey,\n        rewardVault,\n        userRewardTokenPub: userRewardTokenPub!,\n        farmKeys,\n        rewardInfo: itemReward,\n      });\n      txBuilder.addInstruction({\n        instructions: [ins],\n        instructionTypes: [InstructionType.FarmV6Restart],\n      });\n    }\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async addNewRewardToken<T extends TxVersion>(params: UpdateFarmReward): Promise<MakeTxData<T>> {\n    const { txVersion, farmInfo, newRewardInfo, payer } = params;\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\n\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const txBuilder = this.createTxBuilder();\n\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\n\n    const rewardVault = getAssociatedLedgerPoolAccount({\n      programId: new PublicKey(farmInfo.programId),\n      poolId: new PublicKey(farmInfo.id),\n      mint: rewardMint,\n      type: \"rewardVault\",\n    });\n\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n      rewardInfo: newRewardInfo,\n      payer: payerPubKey,\n    });\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\n\n    if (!userRewardTokenPub)\n      this.logAndCreateError(\"annot found target token accounts\", this.scope.account.tokenAccounts);\n\n    newRewardInfo.mint = rewardMint;\n\n    return txBuilder\n      .addInstruction({\n        instructions: [\n          makeAddNewRewardInstruction({\n            payer: this.scope.ownerPubKey,\n            userRewardTokenPub: userRewardTokenPub!,\n            farmKeys,\n            rewardVault,\n            rewardInfo: newRewardInfo,\n          }),\n        ],\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async addNewRewardsToken<T extends TxVersion>(params: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\n    const { txVersion, farmInfo, newRewardInfos, payer } = params;\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\n\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\n    const txBuilder = this.createTxBuilder();\n\n    for (const itemReward of newRewardInfos) {\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\n      const rewardVault = getAssociatedLedgerPoolAccount({\n        programId: new PublicKey(farmInfo.programId),\n        poolId: new PublicKey(farmInfo.id),\n        mint: rewardMint,\n        type: \"rewardVault\",\n      });\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\n        rewardInfo: itemReward,\n        payer: payerPubKey,\n      });\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\n      if (!userRewardTokenPub)\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\n      const ins = makeAddNewRewardInstruction({\n        payer: this.scope.ownerPubKey,\n        userRewardTokenPub: userRewardTokenPub!,\n        farmKeys,\n        rewardVault,\n        rewardInfo: { ...itemReward, mint: rewardMint },\n      });\n      txBuilder.addInstruction({\n        instructions: [ins],\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\n      });\n    }\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async deposit<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\n    const {\n      txVersion,\n      farmInfo,\n      amount,\n      feePayer,\n      useSOLBalance,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      userAuxiliaryLedgers,\n      computeBudgetConfig,\n    } = params;\n\n    if (this.scope.availability.addFarm === false)\n      this.logAndCreateError(\"farm deposit feature disabled in your region\");\n\n    const { rewardInfos, programId } = farmInfo;\n    const version = FARM_PROGRAM_TO_VERSION[programId];\n    if (version === 4) this.logAndCreateError(\"V4 has suspended deposits:\", farmInfo.programId);\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\n    const [farmProgramId, farmId] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\n\n    const ledger = getAssociatedLedgerAccount({\n      programId: farmProgramId,\n      poolId: farmId,\n      owner: this.scope.ownerPubKey,\n      version: version as 3 | 5 | 6,\n    });\n\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccounts) {\n      if (associatedOnly) {\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint, item.programId).publicKey;\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\n      } else {\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\n      }\n    }\n\n    const lpMint = farmKeys.lpMint;\n    const ownerLpTokenAccount = ownerMintToAccount[lpMint.address];\n    if (!ownerLpTokenAccount) this.logAndCreateError(\"you don't have any lp\", \"lp zero\", ownerMintToAccount);\n\n    const rewardAccounts: PublicKey[] = [];\n    for (const itemReward of rewardInfos) {\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\n\n      if (!ownerRewardAccount) {\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: itemReward.mint.programId,\n          mint: new PublicKey(itemReward.mint.address),\n          notUseTokenAccount: rewardUseSOLBalance,\n          createInfo: {\n            payer: feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !rewardUseSOLBalance,\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerRewardAccount = _ownerRewardAccount!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\n      rewardAccounts.push(ownerRewardAccount);\n    }\n\n    let ledgerInfo: FarmLedger | undefined = undefined;\n    const ledgerData = await this.scope.connection.getAccountInfo(ledger);\n    if (ledgerData) {\n      const ledgerLayout = getFarmLedgerLayout(version)!;\n      ledgerInfo = ledgerLayout.decode(ledgerData.data);\n    }\n\n    if (farmInfo.programId !== FARM_PROGRAM_ID_V6.toString() && !ledgerInfo) {\n      const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\n        id: farmId,\n        programId: farmProgramId,\n        version,\n        ledger,\n        owner: this.scope.ownerPubKey,\n      });\n      txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\n    }\n\n    const errorMsg = validateFarmRewards({\n      version,\n      rewardInfos,\n      rewardTokenAccountsPublicKeys: rewardAccounts,\n    });\n    if (errorMsg) this.logAndCreateError(errorMsg);\n\n    const insParams = {\n      amount: parseBigNumberish(amount),\n      owner: this.scope.ownerPubKey,\n      farmInfo,\n      farmKeys,\n      lpAccount: ownerLpTokenAccount,\n      rewardAccounts,\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\n    };\n\n    const newInstruction =\n      version === 6\n        ? makeDepositInstructionV6(insParams)\n        : version === 5\n        ? makeDepositInstructionV5(insParams)\n        : makeDepositInstructionV3(insParams);\n\n    const insType = {\n      3: InstructionType.FarmV3Deposit,\n      5: InstructionType.FarmV5Deposit,\n      6: InstructionType.FarmV6Deposit,\n    };\n\n    return txBuilder\n      .addInstruction({\n        instructions: [newInstruction],\n        instructionTypes: [insType[version]],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async withdraw<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\n    const {\n      txVersion,\n      farmInfo,\n      amount,\n      deposited,\n      useSOLBalance,\n      feePayer,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      userAuxiliaryLedgers,\n      computeBudgetConfig,\n    } = params;\n    const { rewardInfos } = farmInfo;\n\n    if (this.scope.availability.removeFarm === false)\n      this.logAndCreateError(\"farm withdraw feature disabled in your region\");\n\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\n\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccounts) {\n      if (associatedOnly) {\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\n      } else {\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\n      }\n    }\n\n    if (version !== 4) {\n      const ledger = getAssociatedLedgerAccount({\n        programId: new PublicKey(farmInfo.programId),\n        poolId: new PublicKey(farmInfo.id),\n        owner: this.scope.ownerPubKey,\n        version,\n      });\n      const ledgerData = await this.scope.connection.getAccountInfo(ledger);\n\n      if (!ledgerData) {\n        // user has old none ata farm vault and don't have ata vault\n        if (version !== 6) {\n          const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\n            id: new PublicKey(farmKeys.id),\n            programId: new PublicKey(farmKeys.programId),\n            version,\n            ledger,\n            owner: this.scope.ownerPubKey,\n          });\n          txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\n        }\n      } else {\n        const ledgerLayout = getFarmLedgerLayout(version)!;\n        const ledgerInfo = ledgerLayout.decode(ledgerData!.data);\n        if (ledgerInfo.deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\n      }\n    }\n\n    if (deposited && deposited.isZero() && !(userAuxiliaryLedgers || []).length)\n      this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\n\n    // if (!deposited && version !== 4) {\n    // const ledger = getAssociatedLedgerAccount({\n    //   programId: new PublicKey(farmInfo.programId),\n    //   poolId: new PublicKey(farmInfo.id),\n    //   owner: this.scope.ownerPubKey,\n    //   version,\n    // });\n    // const ledgerData = await this.scope.connection.getAccountInfo(ledger);\n    // if (!ledgerData) {\n    // user has old not ata farm vault and don't have ata vault\n    // if (version !== 6 && (userAuxiliaryLedgers || []).length > 0) {\n    //   const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\n    //     id: new PublicKey(farmKeys.id),\n    //     programId: new PublicKey(farmKeys.programId),\n    //     version,\n    //     ledger,\n    //     owner: this.scope.ownerPubKey,\n    //   });\n    //   txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\n    // } else {\n    //   this.logAndCreateError(\"no lp data\", { farmId: farmInfo.id, version, ledgerData });\n    // }\n    // } else {\n    //   const ledgerLayout = getFarmLedgerLayout(version)!;\n    //   const ledgerInfo = ledgerLayout.decode(ledgerData!.data);\n    //   if (ledgerInfo.deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\n    // }\n    // } else if (deposited) {\n    //   if (deposited.isZero() && !(userAuxiliaryLedgers || []).length)\n    //     this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\n    // }\n\n    const lpMint = farmKeys.lpMint.address;\n    const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\n\n    let ownerLpTokenAccount = ownerMintToAccount[lpMint.toString()];\n    if (!ownerLpTokenAccount) {\n      const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: farmKeys.lpMint.programId,\n        mint: new PublicKey(lpMint),\n        notUseTokenAccount: lpMintUseSOLBalance,\n        createInfo: {\n          payer: feePayer || this.scope.ownerPubKey,\n          amount: 0,\n        },\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: true,\n        associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n      ownerLpTokenAccount = _ownerRewardAccount!;\n      instructionParams && txBuilder.addInstruction(instructionParams);\n    }\n    ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\n\n    const rewardAccounts: PublicKey[] = [];\n    for (const itemReward of rewardInfos) {\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\n      if (!ownerRewardAccount) {\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: itemReward.mint.programId,\n          mint: new PublicKey(itemReward.mint.address),\n          notUseTokenAccount: rewardUseSOLBalance,\n          createInfo: {\n            payer: feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !rewardUseSOLBalance,\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerRewardAccount = _ownerRewardAccount!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\n      rewardAccounts.push(ownerRewardAccount);\n    }\n\n    const errorMsg = validateFarmRewards({\n      version,\n      rewardInfos,\n      rewardTokenAccountsPublicKeys: rewardAccounts,\n    });\n    if (errorMsg) this.logAndCreateError(errorMsg);\n\n    const insParams = {\n      amount: parseBigNumberish(amount),\n      owner: this.scope.ownerPubKey,\n      farmInfo,\n      farmKeys,\n      lpAccount: ownerLpTokenAccount,\n      rewardAccounts,\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\n    };\n\n    const newInstruction =\n      version === 6\n        ? makeWithdrawInstructionV6(insParams)\n        : version === 5\n        ? makeWithdrawInstructionV5(insParams)\n        : version === 4\n        ? makeWithdrawInstructionV4(insParams)\n        : makeWithdrawInstructionV3(insParams);\n\n    const insType = {\n      3: InstructionType.FarmV3Withdraw,\n      4: InstructionType.FarmV4Withdraw,\n      5: InstructionType.FarmV5Withdraw,\n      6: InstructionType.FarmV6Withdraw,\n    };\n\n    return txBuilder\n      .addInstruction({\n        instructions: [newInstruction],\n        instructionTypes: [insType[version]],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  // token account needed\n  public async withdrawFarmReward<T extends TxVersion>({\n    farmInfo,\n    withdrawMint,\n    txVersion,\n    computeBudgetConfig,\n  }: {\n    farmInfo: FormatFarmInfoOut;\n    withdrawMint: PublicKey;\n    payer?: PublicKey;\n    computeBudgetConfig?: ComputeBudgetConfig;\n    txVersion?: T;\n  }): Promise<MakeTxData<T>> {\n    this.scope.checkOwner();\n    const farmKeys = jsonInfo2PoolKeys(\n      (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0] as FormatFarmKeyOutV6,\n    );\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n    if (version !== 6) this.logAndCreateError(\"invalid farm version\", version);\n\n    // const rewardInfoIdx = farmInfo.rewardInfos.findIndex((item) =>\n    //   item.mint.address === SOLMint.toString() ? new PublicKey(TOKEN_WSOL.address) : withdrawMint,\n    // );\n    const rewardInfo = farmKeys.rewardInfos.find((r) => solToWSol(r.mint.address).equals(solToWSol(withdrawMint)));\n    if (!rewardInfo) this.logAndCreateError(\"withdraw mint error\", \"rewardInfos\", farmInfo);\n\n    const rewardVault = rewardInfo?.vault ?? SOLMint;\n    const txBuilder = this.createTxBuilder();\n\n    let userRewardToken: PublicKey;\n\n    if (withdrawMint.equals(SOLMint) || withdrawMint.equals(PublicKey.default)) {\n      const txInstruction = await createWSolAccountInstructions({\n        connection: this.scope.connection,\n        owner: this.scope.ownerPubKey,\n        payer: this.scope.ownerPubKey,\n        amount: calFarmRewardAmount({\n          ...rewardInfo,\n          openTime: rewardInfo!.openTime as unknown as string,\n          endTime: rewardInfo!.endTime as unknown as string,\n          perSecond: new Decimal(rewardInfo!.perSecond).mul(10 ** rewardInfo!.mint.decimals).toString(),\n        }),\n      });\n      userRewardToken = txInstruction.addresses.newAccount;\n      txBuilder.addInstruction(txInstruction);\n    } else {\n      const selectUserRewardToken = await this.scope.account.getCreatedTokenAccount({\n        mint: withdrawMint,\n      });\n\n      if (selectUserRewardToken === null) {\n        userRewardToken = await this.scope.account.getAssociatedTokenAccount(withdrawMint);\n        txBuilder.addInstruction({\n          instructions: [\n            createAssociatedTokenAccountInstruction(\n              this.scope.ownerPubKey,\n              userRewardToken,\n              this.scope.ownerPubKey,\n              withdrawMint,\n            ),\n          ],\n          instructionTypes: [InstructionType.CreateATA],\n        });\n      } else {\n        userRewardToken = selectUserRewardToken!;\n      }\n    }\n\n    const { instruction, instructionType } = makeCreatorWithdrawFarmRewardInstruction({\n      programId: farmKeys.programId,\n      id: farmKeys.id,\n      authority: farmKeys.authority,\n      lpVault: farmKeys.lpVault,\n      rewardVault,\n      userRewardToken,\n      owner: this.scope.ownerPubKey,\n    });\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder\n      .addInstruction({\n        instructions: [instruction],\n        instructionTypes: [instructionType],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>(params: {\n    farmInfoList: Record<string, FormatFarmInfoOut>;\n    feePayer?: PublicKey;\n    useSOLBalance?: boolean;\n    associatedOnly?: boolean;\n    checkCreateATAOwner?: boolean;\n    userAuxiliaryLedgers?: string[];\n    txVersion?: T;\n    computeBudgetConfig?: ComputeBudgetConfig;\n  }): Promise<MakeMultiTxData<T>> {\n    const {\n      farmInfoList,\n      useSOLBalance,\n      feePayer,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      userAuxiliaryLedgers,\n      txVersion,\n      computeBudgetConfig,\n    } = params;\n\n    const txBuilder = this.createTxBuilder();\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccounts) {\n      if (associatedOnly) {\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\n      } else {\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\n      }\n    }\n\n    const allFarmKeys = await this.scope.api.fetchFarmKeysById({\n      ids: Object.values(farmInfoList)\n        .map((f) => f.id)\n        .join(\",\"),\n    });\n    const farmKeyMap: { [key: string]: FormatFarmKeyOut } = allFarmKeys.reduce(\n      (acc, cur) => ({ ...acc, [cur.id]: cur }),\n      {},\n    );\n    for (const farmInfo of Object.values(farmInfoList)) {\n      const { programId, lpMint: farmLpMint, rewardInfos, id } = farmInfo;\n      const version = FARM_PROGRAM_TO_VERSION[programId];\n\n      const lpMint = farmLpMint.address;\n      const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\n      let ownerLpTokenAccount = ownerMintToAccount[lpMint];\n\n      if (!ownerLpTokenAccount) {\n        const { account: _ownerLpAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: farmLpMint.programId,\n          mint: new PublicKey(lpMint),\n          notUseTokenAccount: lpMintUseSOLBalance,\n          createInfo: {\n            payer: feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: true,\n          associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerLpTokenAccount = _ownerLpAccount!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n      ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\n\n      const rewardAccounts: PublicKey[] = [];\n      for (const itemReward of rewardInfos) {\n        const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\n        if (!ownerRewardAccount) {\n          const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n            tokenProgram: itemReward.mint.programId,\n            mint: new PublicKey(itemReward.mint.address),\n            notUseTokenAccount: rewardUseSOLBalance,\n            createInfo: {\n              payer: feePayer || this.scope.ownerPubKey,\n              amount: 0,\n            },\n            owner: this.scope.ownerPubKey,\n            skipCloseAccount: !rewardUseSOLBalance,\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n            checkCreateATAOwner,\n          });\n          ownerRewardAccount = _ownerRewardAccount!;\n          instructionParams && txBuilder.addInstruction(instructionParams);\n        }\n\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\n        rewardAccounts.push(ownerRewardAccount);\n      }\n\n      const farmKeys = farmKeyMap[id];\n      const insParams = {\n        amount: BN_ZERO,\n        owner: this.scope.ownerPubKey,\n        farmInfo,\n        farmKeys,\n        lpAccount: ownerLpTokenAccount,\n        rewardAccounts,\n        userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\n      };\n\n      const withdrawInstruction =\n        version === 6\n          ? makeWithdrawInstructionV6(insParams)\n          : version === 5\n          ? makeWithdrawInstructionV5(insParams)\n          : makeWithdrawInstructionV3(insParams);\n\n      const insType = {\n        3: InstructionType.FarmV3Withdraw,\n        5: InstructionType.FarmV5Withdraw,\n        6: InstructionType.FarmV6Withdraw,\n      };\n\n      txBuilder.addInstruction({\n        instructions: [withdrawInstruction],\n        instructionTypes: [insType[version]],\n      });\n    }\n\n    if (txVersion === TxVersion.LEGACY)\n      return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\n    return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { ApiV3Token } from \"../../api/type\";\nimport { createLogger } from \"../../common/logger\";\nimport { FARM_PROGRAM_ID_V3, FARM_PROGRAM_ID_V4, FARM_PROGRAM_ID_V5, FARM_PROGRAM_ID_V6 } from \"../../common/programId\";\n\nimport {\n  FarmLedgerLayout,\n  farmLedgerLayoutV3_2,\n  farmLedgerLayoutV5_2,\n  farmLedgerLayoutV6_1,\n  FarmStateLayout,\n  farmStateV3Layout,\n  farmStateV5Layout,\n  farmStateV6Layout,\n} from \"./layout\";\n\nconst logger = createLogger(\"Raydium_farm_config\");\n\nexport type FarmVersion = 3 | 4 | 5 | 6;\nexport const FARM_LOCK_MINT = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\nexport const FARM_LOCK_VAULT = new PublicKey(\"FrspKwj8i3pNmKwXreTveC4fu7KL5ZbGeXdZBe2XViu1\");\n\n/* ================= index ================= */\n// version => farm state layout\nexport const FARM_VERSION_TO_STATE_LAYOUT: {\n  [version in FarmVersion]?: FarmStateLayout;\n} = {\n  3: farmStateV3Layout,\n  5: farmStateV5Layout,\n  6: farmStateV6Layout,\n};\n\n// version => farm ledger layout\nexport const FARM_VERSION_TO_LEDGER_LAYOUT: {\n  [version in FarmVersion]?: FarmLedgerLayout;\n} = {\n  3: farmLedgerLayoutV3_2,\n  5: farmLedgerLayoutV5_2,\n  6: farmLedgerLayoutV6_1,\n};\n\nexport const isValidFarmVersion = (version: number): boolean => [3, 4, 5, 6].indexOf(version) !== -1;\n\nexport const validateFarmRewards = (params: {\n  version: number;\n  rewardInfos: { mint: ApiV3Token }[];\n  rewardTokenAccountsPublicKeys: PublicKey[];\n}): (() => string | undefined) => {\n  const { version, rewardInfos, rewardTokenAccountsPublicKeys } = params;\n\n  const infoMsg = `rewardInfo:${JSON.stringify(rewardInfos)}, rewardAccount:${JSON.stringify(\n    rewardTokenAccountsPublicKeys,\n  )}`;\n\n  const validator = {\n    3: (): string | undefined => {\n      if (rewardInfos.length !== 1 || rewardTokenAccountsPublicKeys.length !== 1) {\n        return `rewardInfos or rewardTokenAccounts lengths not equal 1: ${infoMsg}`;\n      }\n    },\n    5: (): string | undefined => {\n      if (rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\n        return `rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\n      }\n    },\n    6: (): string | undefined => {\n      if (!rewardTokenAccountsPublicKeys.length || rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\n        return `no rewardTokenAccounts or rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\n      }\n    },\n  };\n\n  return validator[version]?.();\n};\n\nexport const poolTypeV6 = { \"Standard SPL\": 0, \"Option tokens\": 1 };\n\nexport const FARM_PROGRAM_TO_VERSION: Record<string, 3 | 4 | 5 | 6> = {\n  [FARM_PROGRAM_ID_V3.toString()]: 3,\n  [FARM_PROGRAM_ID_V4.toString()]: 4,\n  [FARM_PROGRAM_ID_V5.toString()]: 5,\n  [FARM_PROGRAM_ID_V6.toString()]: 6,\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport {\n  blob,\n  bool,\n  GetLayoutSchemaFromStructure,\n  GetStructureFromLayoutSchema,\n  GetStructureSchema,\n  i64,\n  i8,\n  publicKey,\n  seq,\n  struct,\n  u128,\n  u64,\n  u8,\n} from \"../../marshmallow\";\n\nimport { poolTypeV6 } from \"./config\";\nimport { RewardType } from \"./type\";\n\nexport const associatedLedgerAccountLayout = struct([u8(\"instruction\")]);\nexport const withdrawRewardLayout = struct([u8(\"instruction\")]);\n\nconst farmStateRewardInfoV6Layout = struct([\n  u64(\"rewardState\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardLastUpdateTime\"),\n  u64(\"totalReward\"),\n  u64(\"totalRewardEmissioned\"),\n  u64(\"rewardClaimed\"),\n  u64(\"rewardPerSecond\"),\n  u128(\"accRewardPerShare\"),\n  publicKey(\"rewardVault\"),\n  publicKey(\"rewardMint\"),\n  publicKey(\"rewardSender\"),\n  u64(\"rewardType\"),\n  seq(u64(), 15, \"padding\"),\n]);\n\nexport const realFarmStateV3Layout = struct([\n  u64(\"state\"),\n  u64(\"nonce\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"rewardVault\"),\n  publicKey(),\n  publicKey(),\n  u64(),\n  u64(),\n  u64(\"totalReward\"),\n  u128(\"perShareReward\"),\n  u64(\"lastSlot\"),\n  u64(\"perSlotReward\"),\n]);\n\nexport const realFarmStateV5Layout = struct([\n  u64(\"state\"),\n  u64(\"nonce\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"rewardVaultA\"),\n  u64(\"totalRewardA\"),\n  u128(\"perShareRewardA\"),\n  u64(\"perSlotRewardA\"),\n  u8(\"option\"),\n  publicKey(\"rewardVaultB\"),\n  blob(7),\n  u64(\"totalRewardB\"),\n  u128(\"perShareRewardB\"),\n  u64(\"perSlotRewardB\"),\n  u64(\"lastSlot\"),\n  publicKey(),\n]);\n\nexport const realFarmV6Layout = struct([\n  u64(),\n  u64(\"state\"),\n  u64(\"nonce\"),\n  u64(\"validRewardTokenNum\"),\n  u128(\"rewardMultiplier\"),\n  u64(\"rewardPeriodMax\"),\n  u64(\"rewardPeriodMin\"),\n  u64(\"rewardPeriodExtend\"),\n  publicKey(\"lpMint\"),\n  publicKey(\"lpVault\"),\n  seq(farmStateRewardInfoV6Layout, 5, \"rewardInfos\"),\n  publicKey(\"creator\"),\n  publicKey(),\n  seq(u64(), 32, \"padding\"),\n]);\n\nexport const farmStateV3Layout = new Proxy(\n  realFarmStateV3Layout as GetStructureFromLayoutSchema<\n    {\n      version: 3;\n      rewardInfos: {\n        rewardVault: PublicKey;\n        totalReward: BN;\n        perSlotReward: BN;\n        perShareReward: BN;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV3Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 3,\n            rewardInfos: [\n              {\n                rewardVault: originalResult.rewardVault,\n                totalReward: originalResult.totalReward,\n                perSlotReward: originalResult.perSlotReward,\n                perShareReward: originalResult.perShareReward,\n              },\n            ],\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmStateV5Layout = new Proxy(\n  realFarmStateV5Layout as GetStructureFromLayoutSchema<\n    {\n      version: 5;\n      rewardInfos: {\n        rewardVault: PublicKey;\n        totalReward: BN;\n        perSlotReward: BN;\n        perShareReward: BN;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV5Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 5,\n            rewardInfos: [\n              {\n                rewardVault: originalResult.rewardVaultA,\n                totalReward: originalResult.totalRewardA,\n                perSlotReward: originalResult.perSlotRewardA,\n                perShareReward: originalResult.perShareRewardA,\n              },\n              {\n                rewardVault: originalResult.rewardVaultB,\n                totalReward: originalResult.totalRewardB,\n                perSlotReward: originalResult.perSlotRewardB,\n                perShareReward: originalResult.perShareRewardB,\n              },\n            ],\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmStateV6Layout = new Proxy(\n  realFarmV6Layout as GetStructureFromLayoutSchema<\n    {\n      version: 6;\n      rewardInfos: {\n        rewardState: BN;\n        rewardOpenTime: BN;\n        rewardEndTime: BN;\n        rewardLastUpdateTime: BN;\n        totalReward: BN;\n        totalRewardEmissioned: BN;\n        rewardClaimed: BN;\n        rewardPerSecond: BN;\n        accRewardPerShare: BN;\n        rewardVault: PublicKey;\n        rewardMint: PublicKey;\n        rewardSender: PublicKey;\n        rewardType: RewardType;\n      }[];\n    } & GetLayoutSchemaFromStructure<typeof realFarmV6Layout>\n  >,\n  {\n    get(target, p, receiver): any {\n      if (p === \"decode\")\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\n          const originalResult = target.decode(...decodeParams);\n          return {\n            ...originalResult,\n            version: 6,\n            rewardInfos: originalResult.rewardInfos.map((item) => ({\n              ...item,\n              rewardType: (Object.entries(poolTypeV6).find((i) => String(i[1]) === item.rewardType.toString()) ?? [\n                \"Standard SPL\",\n              ])[0],\n            })),\n          };\n        };\n      else return Reflect.get(target, p, receiver);\n    },\n  },\n);\n\nexport const farmRewardTimeInfoLayout = struct([\n  u64(\"isSet\"),\n  u64(\"rewardPerSecond\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardType\"),\n]);\n\nexport const farmRewardLayout = struct([\n  u8(\"instruction\"),\n  u64(\"nonce\"),\n  seq(farmRewardTimeInfoLayout, 5, \"rewardTimeInfo\"),\n]);\n\nexport const farmRewardRestartLayout = struct([\n  u8(\"instruction\"),\n  u64(\"rewardReopenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardPerSecond\"),\n]);\n\nexport const farmAddRewardLayout = struct([\n  u8(\"instruction\"),\n  u64(\"isSet\"),\n  u64(\"rewardPerSecond\"),\n  u64(\"rewardOpenTime\"),\n  u64(\"rewardEndTime\"),\n  u64(\"rewardType\"),\n]);\n\nexport type FarmStateLayoutV3 = typeof farmStateV3Layout;\nexport type FarmStateLayoutV5 = typeof farmStateV5Layout;\nexport type FarmStateLayoutV6 = typeof farmStateV6Layout;\n\nexport type FarmStateV3 = GetStructureSchema<FarmStateLayoutV3>;\nexport type FarmStateV5 = GetStructureSchema<FarmStateLayoutV5>;\nexport type FarmStateV6 = GetStructureSchema<FarmStateLayoutV6>;\n\nexport type FarmState = FarmStateV3 | FarmStateV5 | FarmStateV6;\n// farmStateLayoutV3\nexport type FarmStateLayout = FarmStateLayoutV3 | FarmStateLayoutV5 | FarmStateLayoutV6;\n\n/* ================= ledger layouts ================= */\nexport const farmLedgerLayoutV3_1 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u64(), 1, \"rewardDebts\"),\n]);\n\nexport const farmLedgerLayoutV3_2 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 1, \"rewardDebts\"),\n  u64(\"\"),\n  u64(\"voteLockedBalance\"),\n  seq(u64(), 15),\n]);\n\nexport const farmLedgerLayoutV5_1 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u64(), 2, \"rewardDebts\"),\n]);\n\nexport const farmLedgerLayoutV5_2 = struct([\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 2, \"rewardDebts\"),\n  seq(u64(), 17),\n]);\n\nexport const farmLedgerLayoutV6_1 = struct([\n  u64(),\n  u64(\"state\"),\n  publicKey(\"id\"),\n  publicKey(\"owner\"),\n  u64(\"deposited\"),\n  seq(u128(), 5, \"rewardDebts\"),\n  seq(u64(), 16),\n]);\n\nexport type FarmLedgerLayoutV3_1 = typeof farmLedgerLayoutV3_1;\nexport type FarmLedgerLayoutV3_2 = typeof farmLedgerLayoutV3_2;\nexport type FarmLedgerLayoutV5_1 = typeof farmLedgerLayoutV5_1;\nexport type FarmLedgerLayoutV5_2 = typeof farmLedgerLayoutV5_2;\nexport type FarmLedgerLayoutV6_1 = typeof farmLedgerLayoutV6_1;\nexport type FarmLedgerLayout =\n  | FarmLedgerLayoutV3_1\n  | FarmLedgerLayoutV3_2\n  | FarmLedgerLayoutV5_1\n  | FarmLedgerLayoutV5_2\n  | FarmLedgerLayoutV6_1;\n\nexport type FarmLedgerV3_1 = GetStructureSchema<FarmLedgerLayoutV3_1>;\nexport type FarmLedgerV3_2 = GetStructureSchema<FarmLedgerLayoutV3_2>;\nexport type FarmLedgerV5_1 = GetStructureSchema<FarmLedgerLayoutV5_1>;\nexport type FarmLedgerV5_2 = GetStructureSchema<FarmLedgerLayoutV5_2>;\nexport type FarmLedgerV6_1 = GetStructureSchema<FarmLedgerLayoutV6_1>;\nexport type FarmLedger = FarmLedgerV3_1 | FarmLedgerV3_2 | FarmLedgerV5_1 | FarmLedgerV5_2 | FarmLedgerV6_1;\n\nexport const dwLayout = struct([u8(\"instruction\"), u64(\"amount\")]);\n\nexport const VoterVotingMintConfig = struct([\n  publicKey(\"mint\"),\n  publicKey(\"grantAuthority\"),\n  u64(\"baselineVoteWeightScaledFactor\"),\n  u64(\"maxExtraLockupVoteWeightScaledFactor\"),\n  u64(\"lockupSaturationSecs\"),\n\n  i8(\"digitShift\"), // TODO\n  seq(u8(), 7, \"reserved1\"),\n  seq(u64(), 7, \"reserved2\"),\n]);\n\nexport const VoterRegistrar = struct([\n  blob(8),\n  publicKey(\"governanceProgramId\"),\n  publicKey(\"realm\"),\n  publicKey(\"realmGoverningTokenMint\"),\n  publicKey(\"realmAuthority\"),\n\n  seq(u8(), 32, \"reserved1\"),\n  seq(VoterVotingMintConfig, 4, \"votingMints\"),\n\n  i64(\"timeOffset\"),\n  u8(\"bump\"),\n  seq(u8(), 7, \"reserved2\"),\n  seq(u64(), 11, \"reserved3\"),\n]);\n\nexport const VoterLockup = struct([i64(\"startTime\"), i64(\"endTime\"), u8(\"kind\"), seq(u8(), 15, \"reserved\")]);\n\nexport const VoterDepositEntry = struct([\n  seq(VoterLockup, 1, \"lockup\"),\n  u64(\"amountDeposited_native\"),\n  u64(\"amountInitiallyLockedNative\"),\n  bool(\"isUsed\"),\n  bool(\"allowClawback\"),\n  u8(\"votingMintConfigIdx\"),\n  seq(u8(), 29, \"reserved\"),\n]);\n\nexport const Voter = struct([\n  blob(8),\n  publicKey(\"voterAuthority\"),\n  publicKey(\"registrar\"),\n\n  seq(VoterDepositEntry, 32, \"deposits\"),\n\n  u8(\"voterBump\"),\n  u8(\"voterWweightRecordBump\"),\n  seq(u8(), 94, \"reserved\"),\n]);\n","import {\n  Connection,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\nimport { FormatFarmKeyOut } from \"@/api/type\";\nimport { parseBigNumberish } from \"@/common\";\nimport { createLogger } from \"@/common/logger\";\nimport { getATAAddress } from \"@/common/pda\";\nimport {\n  accountMeta,\n  commonSystemAccountMeta,\n  INSTRUCTION_PROGRAM_ID,\n  RENT_PROGRAM_ID,\n  SOLMint,\n} from \"@/common/pubKey\";\nimport { InstructionType } from \"@/common/txTool/txType\";\nimport { bool, struct, u32, u64, u8 } from \"../../marshmallow\";\nimport { InstructionReturn } from \"../type\";\nimport { poolTypeV6 } from \"./config\";\nimport {\n  associatedLedgerAccountLayout,\n  dwLayout,\n  farmAddRewardLayout,\n  farmLedgerLayoutV3_2,\n  farmRewardLayout,\n  farmRewardRestartLayout,\n  withdrawRewardLayout,\n} from \"./layout\";\nimport {\n  getRegistrarAddress,\n  getTokenOwnerRecordAddress,\n  getVoterAddress,\n  getVoterWeightRecordAddress,\n  getVotingMintAuthority,\n  getVotingTokenMint,\n} from \"./pda\";\nimport { FarmRewardInfoConfig, RewardInfoKey, RewardType } from \"./type\";\nimport { getAssociatedLedgerAccount, getDepositEntryIndex } from \"./util\";\n\nconst logger = createLogger(\"Raydium_farm_instruction\");\n\nconst anchorDataBuf = {\n  voterStakeRegistryCreateVoter: Buffer.from([6, 24, 245, 52, 243, 255, 148, 25]), // CreateVoter\n  voterStakeRegistryCreateDepositEntry: Buffer.from([185, 131, 167, 186, 159, 125, 19, 67]), // CreateDepositEntry\n  voterStakeRegistryDeposit: Buffer.from([242, 35, 198, 137, 82, 225, 242, 182]), // Deposit\n  voterStakeRegistryWithdraw: Buffer.from([183, 18, 70, 156, 148, 109, 161, 34]), // Withdraw\n  voterStakeRegistryUpdateVoterWeightRecord: Buffer.from([45, 185, 3, 36, 109, 190, 115, 169]), // UpdateVoterWeightRecord\n};\n\nexport function createAssociatedLedgerAccountInstruction(params: {\n  version: number;\n  id: PublicKey;\n  programId: PublicKey;\n  ledger: PublicKey;\n  owner: PublicKey;\n}): InstructionReturn {\n  const { version, id, ledger, programId, owner } = params;\n  const instruction = { 3: 9, 5: 10 }[version];\n  if (!instruction) logger.logWithError(`invalid farm pool version: ${version}`);\n\n  const data = Buffer.alloc(associatedLedgerAccountLayout.span);\n  associatedLedgerAccountLayout.encode(\n    {\n      instruction: instruction!,\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: ledger }),\n    accountMeta({ pubkey: owner, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n  ];\n\n  return {\n    instruction: new TransactionInstruction({\n      programId,\n      keys,\n      data,\n    }),\n    instructionType: InstructionType.FarmV3CreateLedger,\n  };\n}\n\ninterface CreateFarmInstruction {\n  farmId: PublicKey;\n  farmAuthority: PublicKey;\n  lpVault: PublicKey;\n  lpMint: PublicKey;\n  lockVault: PublicKey;\n  lockMint: PublicKey;\n  lockUserAccount?: PublicKey;\n  programId: PublicKey;\n  owner: PublicKey;\n  rewardInfo: RewardInfoKey[];\n  rewardInfoConfig: FarmRewardInfoConfig[];\n  nonce: number;\n}\nexport function makeCreateFarmInstruction(params: CreateFarmInstruction): InstructionReturn {\n  const data = Buffer.alloc(farmRewardLayout.span);\n  farmRewardLayout.encode(\n    {\n      instruction: 0,\n      nonce: new BN(params.nonce),\n      rewardTimeInfo: params.rewardInfoConfig,\n    },\n    data,\n  );\n\n  const keys = [\n    ...commonSystemAccountMeta,\n    accountMeta({ pubkey: params.farmId }),\n    accountMeta({ pubkey: params.farmAuthority, isWritable: false }),\n    accountMeta({ pubkey: params.lpVault }),\n    accountMeta({ pubkey: params.lpMint, isWritable: false }),\n    accountMeta({ pubkey: params.lockVault }),\n    accountMeta({ pubkey: params.lockMint, isWritable: false }),\n    accountMeta({ pubkey: params.lockUserAccount ?? SOLMint }),\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\n  ];\n\n  for (const item of params.rewardInfo) {\n    keys.push(\n      ...[\n        accountMeta({ pubkey: item.rewardMint, isWritable: false }),\n        accountMeta({ pubkey: item.rewardVault }),\n        accountMeta({ pubkey: item.userRewardToken }),\n      ],\n    );\n  }\n\n  return {\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\n    instructionType: InstructionType.FarmV6Create,\n  };\n}\n\ninterface CreatorWithdrawFarmRewardInstruction {\n  id: PublicKey;\n  programId: PublicKey;\n  authority: PublicKey;\n  lpVault: PublicKey;\n  rewardVault: PublicKey;\n  userRewardToken: PublicKey;\n  owner: PublicKey;\n}\n\nexport function makeCreatorWithdrawFarmRewardInstruction(\n  params: CreatorWithdrawFarmRewardInstruction,\n): InstructionReturn {\n  const data = Buffer.alloc(withdrawRewardLayout.span);\n  withdrawRewardLayout.encode({ instruction: 5 }, data);\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: params.id }),\n    accountMeta({ pubkey: params.authority, isWritable: false }),\n    accountMeta({ pubkey: params.lpVault, isWritable: false }),\n    accountMeta({ pubkey: params.rewardVault }),\n    accountMeta({ pubkey: params.userRewardToken }),\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\n  ];\n\n  return {\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\n    instructionType: InstructionType.FarmV6CreatorWithdraw,\n  };\n}\n\nexport function voterStakeRegistryDeposit(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterVault: PublicKey,\n  depositToken: PublicKey,\n  depositAuthority: PublicKey,\n\n  userStakerInfoV2: PublicKey,\n  pool: PublicKey,\n  votingMint: PublicKey,\n  votingMintAuthority: PublicKey,\n  stakeProgramId: PublicKey,\n\n  depositEntryIndex: number,\n  amount: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: true },\n    { pubkey: voterVault, isSigner: false, isWritable: true },\n    { pubkey: depositToken, isSigner: false, isWritable: true },\n    { pubkey: depositAuthority, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\n    { pubkey: pool, isSigner: false, isWritable: false },\n    { pubkey: votingMint, isSigner: false, isWritable: true },\n\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      depositEntryIndex,\n      amount,\n    },\n    data,\n  );\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryDeposit, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function voterStakeRegistryUpdateVoterWeightRecord(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterWeightRecord: PublicKey,\n): TransactionInstruction {\n  const dataLayout = struct([]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: false },\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({}, data);\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryUpdateVoterWeightRecord, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function voterStakeRegistryWithdraw(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterAuthority: PublicKey,\n  tokenOwnerRecord: PublicKey,\n  voterWeightRecord: PublicKey,\n  vault: PublicKey,\n  destination: PublicKey,\n\n  userStakerInfoV2: PublicKey,\n  pool: PublicKey,\n  votingMint: PublicKey,\n  votingMintAuthority: PublicKey,\n  stakeProgramId: PublicKey,\n\n  depositEntryIndex: number,\n  amount: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: true },\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\n    { pubkey: tokenOwnerRecord, isSigner: false, isWritable: false },\n\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\n    { pubkey: vault, isSigner: false, isWritable: true },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\n    { pubkey: pool, isSigner: false, isWritable: false },\n    { pubkey: votingMint, isSigner: false, isWritable: true },\n\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      depositEntryIndex,\n      amount,\n    },\n    data,\n  );\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryWithdraw, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function governanceCreateTokenOwnerRecord(\n  programId: PublicKey,\n  realm: PublicKey,\n  governingTokenOwner: PublicKey,\n  governingTokenMint: PublicKey,\n  payer: PublicKey,\n  tokenOwnerRecordAddress: PublicKey,\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"ins\")]);\n\n  const keys = [\n    { pubkey: realm, isSigner: false, isWritable: false },\n    { pubkey: governingTokenOwner, isSigner: false, isWritable: false },\n\n    { pubkey: tokenOwnerRecordAddress, isSigner: false, isWritable: true },\n\n    { pubkey: governingTokenMint, isSigner: false, isWritable: false },\n\n    { pubkey: payer, isSigner: true, isWritable: true },\n\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({ ins: 23 }, data);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nexport function voterStakeRegistryCreateVoter(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterWeightRecord: PublicKey,\n  voterAuthority: PublicKey,\n  payer: PublicKey,\n\n  voterBump: number,\n  voterWeightRecordBump: number,\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"voterBump\"), u8(\"voterWeightRecordBump\")]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: true },\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({ voterBump, voterWeightRecordBump }, data);\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateVoter, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function voterStakeRegistryCreateDepositEntry(\n  programId: PublicKey,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterVault: PublicKey,\n  voterAuthority: PublicKey,\n  payer: PublicKey,\n  depositMint: PublicKey,\n\n  depositEntryIndex: number,\n  kind: number,\n  startTs: BN | undefined,\n  periods: number,\n  allowClawback: boolean,\n): TransactionInstruction {\n  const dataLayout = struct([\n    u8(\"depositEntryIndex\"),\n    u8(\"kind\"),\n    u8(\"option\"),\n    u64(\"startTs\"),\n    u32(\"periods\"),\n    bool(\"allowClawback\"),\n  ]);\n\n  const keys = [\n    { pubkey: registrar, isSigner: false, isWritable: false },\n    { pubkey: voter, isSigner: false, isWritable: true },\n    { pubkey: voterVault, isSigner: false, isWritable: true },\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: depositMint, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      depositEntryIndex,\n      kind,\n      option: startTs === undefined ? 0 : 1,\n      startTs: startTs!,\n      periods,\n      allowClawback,\n    },\n    data,\n  );\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateDepositEntry, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport async function makeDepositTokenInstruction({\n  connection,\n  programId,\n  governanceProgramId,\n  voteWeightAddinProgramId,\n  realm,\n  communityTokenMint,\n  owner,\n  poolId,\n  tokenProgram,\n}: {\n  connection: Connection;\n  programId: PublicKey;\n  governanceProgramId: PublicKey;\n  voteWeightAddinProgramId: PublicKey;\n  realm: PublicKey;\n  communityTokenMint: PublicKey;\n  owner: PublicKey;\n  poolId: PublicKey;\n  tokenProgram?: PublicKey;\n}): Promise<TransactionInstruction[]> {\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\n  if (ownerAccountInfo === null) {\n    throw Error(\"user is not staker\");\n  }\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\n  const mintAmount = ownerInfo.deposited.sub(ownerInfo.voteLockedBalance);\n  console.log(\"amount\", mintAmount.toString());\n  if (mintAmount.eq(new BN(0))) {\n    throw Error(\"user do not has new stake amount\");\n  }\n\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\n  const { publicKey: voter, nonce: voterBump } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\n\n  const { publicKey: voterWeightRecord, nonce: voterWeightRecordBump } = getVoterWeightRecordAddress(\n    voteWeightAddinProgramId,\n    registrar,\n    owner,\n  );\n\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\n    governanceProgramId,\n    realm,\n    communityTokenMint,\n    owner,\n  ).publicKey;\n\n  const instructions: TransactionInstruction[] = [];\n\n  const depositToken = getATAAddress(owner, votingMint, tokenProgram).publicKey;\n  const depositTokenAccountInfo = await connection.getAccountInfo(depositToken);\n  if (depositTokenAccountInfo === null) {\n    instructions.push(createAssociatedTokenAccountInstruction(owner, depositToken, owner, votingMint));\n  }\n  const voterAccountInfo = await connection.getAccountInfo(voter);\n  if (voterAccountInfo === null) {\n    const createTokenOwnerRecodeIns = governanceCreateTokenOwnerRecord(\n      governanceProgramId,\n      realm,\n      owner,\n      communityTokenMint,\n      owner,\n      tokenOwnerRecordAddress,\n    );\n\n    instructions.push(\n      createTokenOwnerRecodeIns,\n      voterStakeRegistryCreateVoter(\n        voteWeightAddinProgramId,\n        registrar,\n        voter,\n        voterWeightRecord,\n        owner,\n        owner,\n        voterBump,\n        voterWeightRecordBump,\n      ),\n    );\n  }\n\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\n    connection,\n    registrar,\n    voter,\n    votingMint,\n  );\n  if (!depositEntryInit) {\n    instructions.push(\n      voterStakeRegistryCreateDepositEntry(\n        voteWeightAddinProgramId,\n        registrar,\n        voter,\n        voterVault,\n        owner,\n        owner,\n        votingMint,\n\n        depositEntryIndex,\n        0,\n        undefined,\n        0,\n        false,\n      ),\n    );\n  }\n\n  instructions.push(\n    voterStakeRegistryDeposit(\n      voteWeightAddinProgramId,\n      registrar,\n      voter,\n      voterVault,\n      depositToken,\n      owner,\n\n      ownerPda,\n      poolId,\n      votingMint,\n      votingMintAuthority,\n      programId,\n\n      depositEntryIndex,\n      mintAmount,\n    ),\n    voterStakeRegistryUpdateVoterWeightRecord(voteWeightAddinProgramId, registrar, voter, voterWeightRecord),\n  );\n\n  return instructions;\n}\n\nexport async function makeWithdrawTokenInstruction({\n  connection,\n  programId,\n  governanceProgramId,\n  voteWeightAddinProgramId,\n  realm,\n  communityTokenMint,\n  owner,\n  poolId,\n  tokenProgram,\n}: {\n  connection: Connection;\n  programId: PublicKey;\n\n  governanceProgramId: PublicKey;\n  voteWeightAddinProgramId: PublicKey;\n  realm: PublicKey;\n  communityTokenMint: PublicKey;\n  owner: PublicKey;\n  poolId: PublicKey;\n  tokenProgram?: PublicKey;\n}): Promise<TransactionInstruction[]> {\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\n  if (ownerAccountInfo === null) {\n    throw Error(\"user is not staker\");\n  }\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\n  if (ownerInfo.voteLockedBalance.eq(new BN(0))) {\n    throw Error(\"user has vote locked balance = 0\");\n  }\n\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\n  const { publicKey: voter } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\n  const { publicKey: voterWeightRecord } = getVoterWeightRecordAddress(voteWeightAddinProgramId, registrar, owner);\n\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\n    governanceProgramId,\n    realm,\n    communityTokenMint,\n    owner,\n  ).publicKey;\n\n  const instructions: TransactionInstruction[] = [];\n\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\n    connection,\n    registrar,\n    voter,\n    votingMint,\n  );\n  if (!depositEntryInit) throw Error(\"deposit entry index check error\");\n\n  instructions.push(\n    voterStakeRegistryWithdraw(\n      voteWeightAddinProgramId,\n      registrar,\n      voter,\n      owner,\n      tokenOwnerRecordAddress,\n      voterWeightRecord,\n      voterVault,\n      getATAAddress(owner, votingMint, tokenProgram).publicKey,\n      ownerPda,\n      poolId,\n      votingMint,\n      votingMintAuthority,\n      programId,\n\n      depositEntryIndex,\n      ownerInfo.voteLockedBalance,\n    ),\n  );\n\n  return instructions;\n}\n\nexport function makeRestartRewardInstruction({\n  payer,\n  rewardVault,\n  userRewardTokenPub,\n  farmKeys,\n  rewardInfo,\n}: {\n  payer: PublicKey;\n  rewardVault: PublicKey;\n  userRewardTokenPub: PublicKey;\n  farmKeys: {\n    id: PublicKey;\n    programId: PublicKey;\n    lpVault: PublicKey;\n  };\n  rewardInfo: {\n    openTime: number;\n    endTime: number;\n    perSecond: string;\n  };\n}): TransactionInstruction {\n  const data = Buffer.alloc(farmRewardRestartLayout.span);\n  farmRewardRestartLayout.encode(\n    {\n      instruction: 3,\n      rewardReopenTime: parseBigNumberish(rewardInfo.openTime),\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: farmKeys.id }),\n    accountMeta({ pubkey: farmKeys.lpVault, isWritable: false }),\n    accountMeta({ pubkey: rewardVault }),\n    accountMeta({ pubkey: userRewardTokenPub! }),\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\n  ];\n\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\n}\n\nexport function makeAddNewRewardInstruction({\n  payer,\n  userRewardTokenPub,\n  farmKeys,\n  rewardVault,\n  rewardInfo,\n}: {\n  payer: PublicKey;\n  userRewardTokenPub: PublicKey;\n  rewardVault: PublicKey;\n  farmKeys: {\n    id: PublicKey;\n    programId: PublicKey;\n    authority: PublicKey;\n  };\n  rewardInfo: {\n    mint: PublicKey;\n    openTime: number;\n    endTime: number;\n    perSecond: string;\n    rewardType: RewardType;\n  };\n}): TransactionInstruction {\n  const data = Buffer.alloc(farmAddRewardLayout.span);\n  farmAddRewardLayout.encode(\n    {\n      instruction: 4,\n      isSet: new BN(1),\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\n      rewardOpenTime: parseBigNumberish(rewardInfo.openTime),\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\n      rewardType: parseBigNumberish(poolTypeV6[rewardInfo.rewardType]),\n    },\n    data,\n  );\n\n  const keys = [\n    ...commonSystemAccountMeta,\n    accountMeta({ pubkey: farmKeys.id }),\n    accountMeta({ pubkey: farmKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: rewardInfo.mint, isWritable: false }),\n    accountMeta({ pubkey: rewardVault }),\n    accountMeta({ pubkey: userRewardTokenPub! }),\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\n  ];\n\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\n}\n\nexport function makeDepositWithdrawInstruction(params: {\n  instruction: number;\n  amount: BN;\n  farmInfo: { id: string; programId: string };\n  farmKeys: FormatFarmKeyOut;\n  lpAccount: PublicKey;\n  owner: PublicKey;\n  rewardAccounts: PublicKey[];\n  deposit?: boolean;\n  version: 3 | 5 | 6;\n}): TransactionInstruction {\n  const { farmInfo, farmKeys, version, lpAccount, rewardAccounts, owner, instruction, amount, deposit } = params;\n\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction,\n      amount,\n    },\n    data,\n  );\n\n  const keys =\n    version === 6\n      ? [\n          accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n          ...(deposit ? [accountMeta({ pubkey: SystemProgram.programId, isWritable: false })] : []),\n          accountMeta({ pubkey: id }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n          accountMeta({ pubkey: ledgerAddress }),\n          accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n          accountMeta({ pubkey: lpAccount }),\n        ]\n      : [\n          accountMeta({ pubkey: id }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n          accountMeta({ pubkey: ledgerAddress }),\n          accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n          accountMeta({ pubkey: lpAccount }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n          accountMeta({ pubkey: rewardAccounts[0] }),\n          accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n          // system\n          accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n          accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n        ];\n\n  if (version === 5) {\n    for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n    }\n  }\n\n  if (version === 6) {\n    for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\ninterface DepositWithdrawParams {\n  amount: BN;\n  farmInfo: { id: string; programId: string };\n  farmKeys: FormatFarmKeyOut;\n  lpAccount: PublicKey;\n  owner: PublicKey;\n  rewardAccounts: PublicKey[];\n  userAuxiliaryLedgers?: PublicKey[];\n}\n\nexport function makeWithdrawInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 6,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 2,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n\n    accountMeta({ pubkey: id }),\n\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n  ];\n\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeWithdrawInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 5,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 12,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: rewardAccounts[0] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n    // system\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  ];\n\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n  }\n\n  if (userAuxiliaryLedgers) {\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeWithdrawInstructionV4(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const dataLayout = struct([u8('instruction'), u64('amount')])\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: userAuxiliaryLedgers![0] }),\n    accountMeta({ pubkey: owner, isSigner: true, isWritable: false }),\n    accountMeta({ pubkey: lpAccount }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: rewardAccounts[0] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: rewardAccounts[1] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[1].vault) }),\n  ]\n\n  const data = Buffer.alloc(dataLayout.span)\n  dataLayout.encode(\n    {\n      instruction: 2,\n      amount\n    },\n    data\n  )\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  })\n}\n\nexport function makeWithdrawInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 3,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 11,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: rewardAccounts[0] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n    // system\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  ];\n\n  if (userAuxiliaryLedgers) {\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeDepositInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 3,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 10,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: rewardAccounts[0] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n    // system\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  ];\n\n  if (userAuxiliaryLedgers) {\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeDepositInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 5,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 11,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: rewardAccounts[0] }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\n    // system\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n  ];\n\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n  }\n\n  if (userAuxiliaryLedgers) {\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\n    }\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n\nexport function makeDepositInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\n\n  const ledgerAddress = getAssociatedLedgerAccount({\n    programId,\n    poolId: id,\n    owner,\n    version: 6,\n  });\n\n  const data = Buffer.alloc(dwLayout.span);\n  dwLayout.encode(\n    {\n      instruction: 1,\n      amount: parseBigNumberish(amount),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: id }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\n    accountMeta({ pubkey: ledgerAddress }),\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: lpAccount }),\n  ];\n\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\n  }\n\n  return new TransactionInstruction({ programId, keys, data });\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { findProgramAddress } from \"../../common/txTool/txUtils\";\n\nexport function getRegistrarAddress(\n  programId: PublicKey,\n  realm: PublicKey,\n  communityTokenMint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [realm.toBuffer(), Buffer.from(\"registrar\", \"utf8\"), communityTokenMint.toBuffer()],\n    programId,\n  );\n}\n\nexport function getVotingTokenMint(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([poolId.toBuffer(), Buffer.from(\"voting_mint_seed\", \"utf8\")], programId);\n}\n\nexport function getVotingMintAuthority(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([poolId.toBuffer()], programId);\n}\n\nexport function getVoterAddress(\n  programId: PublicKey,\n  registrar: PublicKey,\n  authority: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([registrar.toBuffer(), Buffer.from(\"voter\", \"utf8\"), authority.toBuffer()], programId);\n}\n\nexport function getVoterWeightRecordAddress(\n  programId: PublicKey,\n  registrar: PublicKey,\n  authority: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [registrar.toBuffer(), Buffer.from(\"voter-weight-record\", \"utf8\"), authority.toBuffer()],\n    programId,\n  );\n}\n\nexport function getTokenOwnerRecordAddress(\n  programId: PublicKey,\n  realm: PublicKey,\n  governingTokenMint: PublicKey,\n  governingTokenOwner: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [\n      Buffer.from(\"governance\", \"utf8\"),\n      realm.toBuffer(),\n      governingTokenMint.toBuffer(),\n      governingTokenOwner.toBuffer(),\n    ],\n    programId,\n  );\n}\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { RewardInfoV6 } from \"../../api/type\";\nimport { parseBigNumberish } from \"../../common\";\nimport { GetMultipleAccountsInfoConfig, getMultipleAccountsInfoWithCustomFlags } from \"../../common/accountInfo\";\nimport { DateParam, isDateAfter, isDateBefore } from \"../../common/date\";\nimport { createLogger } from \"../../common/logger\";\nimport { findProgramAddress, ProgramAddress } from \"../../common/txTool/txUtils\";\nimport { jsonInfo2PoolKeys } from \"../../common/utility\";\n\nimport { splAccountLayout } from \"../account/layout\";\nimport { SplAccount } from \"../account/types\";\nimport { FARM_VERSION_TO_LEDGER_LAYOUT, FARM_VERSION_TO_STATE_LAYOUT, poolTypeV6 } from \"./config\";\nimport { FarmLedger, FarmLedgerLayout, FarmState, FarmStateLayout } from \"./layout\";\nimport { FarmRewardInfo, FarmRewardInfoConfig } from \"./type\";\n\nimport { Voter, VoterRegistrar } from \"./layout\";\n\nconst logger = createLogger(\"Raydium.farm.util\");\ninterface AssociatedLedgerPoolAccount {\n  programId: PublicKey;\n  poolId: PublicKey;\n  mint: PublicKey;\n  type: \"lpVault\" | \"rewardVault\";\n}\n\nexport function getAssociatedLedgerPoolAccount({\n  programId,\n  poolId,\n  mint,\n  type,\n}: AssociatedLedgerPoolAccount): PublicKey {\n  const { publicKey } = findProgramAddress(\n    [\n      poolId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from(\n        type === \"lpVault\" ? \"lp_vault_associated_seed\" : type === \"rewardVault\" ? \"reward_vault_associated_seed\" : \"\",\n        \"utf-8\",\n      ),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\nexport function getAssociatedLedgerAccount({\n  programId,\n  poolId,\n  owner,\n  version,\n}: {\n  programId: PublicKey;\n  poolId: PublicKey;\n  owner: PublicKey;\n  version: 6 | 5 | 3;\n}): PublicKey {\n  const { publicKey } = findProgramAddress(\n    [\n      poolId.toBuffer(),\n      owner.toBuffer(),\n      Buffer.from(version === 6 ? \"farmer_info_associated_seed\" : \"staker_info_v2_associated_seed\", \"utf-8\"),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\nexport const getAssociatedAuthority = ({\n  programId,\n  poolId,\n}: {\n  programId: PublicKey;\n  poolId: PublicKey;\n}): ProgramAddress => findProgramAddress([poolId.toBuffer()], programId);\n\nexport function farmRewardInfoToConfig(data: FarmRewardInfo): FarmRewardInfoConfig {\n  return {\n    isSet: new BN(1),\n    rewardPerSecond: parseBigNumberish(data.perSecond),\n    rewardOpenTime: parseBigNumberish(data.openTime),\n    rewardEndTime: parseBigNumberish(data.endTime),\n    rewardType: parseBigNumberish(poolTypeV6[data.rewardType]),\n  };\n}\n\nexport function calFarmRewardAmount(data: Pick<RewardInfoV6, \"openTime\" | \"endTime\"> & { perSecond: string }): BN {\n  return parseBigNumberish(data.endTime).sub(parseBigNumberish(data.openTime)).mul(parseBigNumberish(data.perSecond));\n}\n\nexport function getFarmLedgerLayout(version: number): FarmLedgerLayout | undefined {\n  const ledgerLayout = FARM_VERSION_TO_LEDGER_LAYOUT[version];\n  if (!ledgerLayout) logger.logWithError(\"invalid version\", version);\n  return ledgerLayout;\n}\n\nexport function getFarmStateLayout(version: number): FarmStateLayout | undefined {\n  const stateLayout = FARM_VERSION_TO_STATE_LAYOUT[version];\n  if (!stateLayout) logger.logWithError(\"invalid version\", version);\n  return stateLayout;\n}\n\nexport function updateFarmPoolInfo(\n  poolInfo: FarmState,\n  lpVault: SplAccount,\n  slot: number,\n  chainTime: number,\n): FarmState {\n  if (poolInfo.version === 3 || poolInfo.version === 5) {\n    if (poolInfo.lastSlot.gte(new BN(slot))) return poolInfo;\n\n    const spread = new BN(slot).sub(poolInfo.lastSlot);\n    poolInfo.lastSlot = new BN(slot);\n\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\n      if (lpVault.amount.eq(new BN(0))) continue;\n\n      const reward = itemRewardInfo.perSlotReward.mul(spread);\n      itemRewardInfo.perShareReward = itemRewardInfo.perShareReward.add(\n        reward.mul(new BN(10).pow(new BN(poolInfo.version === 3 ? 9 : 15))).div(lpVault.amount),\n      );\n      itemRewardInfo.totalReward = itemRewardInfo.totalReward.add(reward);\n    }\n  } else if (poolInfo.version === 6) {\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\n      if (itemRewardInfo.rewardState.eq(new BN(0))) continue;\n      const updateTime = BN.min(new BN(chainTime), itemRewardInfo.rewardEndTime);\n      if (itemRewardInfo.rewardOpenTime.gte(updateTime)) continue;\n      const spread = updateTime.sub(itemRewardInfo.rewardLastUpdateTime);\n      let reward = spread.mul(itemRewardInfo.rewardPerSecond);\n      const leftReward = itemRewardInfo.totalReward.sub(itemRewardInfo.totalRewardEmissioned);\n      if (leftReward.lt(reward)) {\n        reward = leftReward;\n        itemRewardInfo.rewardLastUpdateTime = itemRewardInfo.rewardLastUpdateTime.add(\n          leftReward.div(itemRewardInfo.rewardPerSecond),\n        );\n      } else {\n        itemRewardInfo.rewardLastUpdateTime = updateTime;\n      }\n      if (lpVault.amount.eq(new BN(0))) continue;\n      itemRewardInfo.accRewardPerShare = itemRewardInfo.accRewardPerShare.add(\n        reward.mul(poolInfo.rewardMultiplier).div(lpVault.amount),\n      );\n      itemRewardInfo.totalRewardEmissioned = itemRewardInfo.totalRewardEmissioned.add(reward);\n    }\n  }\n  return poolInfo;\n}\n\ninterface FarmPoolsInfo {\n  [id: string]: {\n    state: FarmState;\n    lpVault: SplAccount;\n    ledger?: FarmLedger;\n    wrapped?: { pendingRewards: BN[] };\n  };\n}\n\nexport interface FarmFetchMultipleInfoParams {\n  connection: Connection;\n  farmPools: any[];\n  owner?: PublicKey;\n  config?: GetMultipleAccountsInfoConfig;\n  chainTime: number;\n}\n\nexport async function fetchMultipleFarmInfoAndUpdate({\n  connection,\n  farmPools,\n  owner,\n  config,\n  chainTime,\n}: FarmFetchMultipleInfoParams): Promise<FarmPoolsInfo> {\n  let hasNotV6Pool = false;\n  let hasV6Pool = false;\n  const tenBN = new BN(10);\n\n  const publicKeys: {\n    pubkey: PublicKey;\n    version: number;\n    key: \"state\" | \"lpVault\" | \"ledger\";\n    poolId: PublicKey;\n  }[] = [];\n\n  for (const poolInfo of farmPools) {\n    const pool = jsonInfo2PoolKeys(poolInfo);\n    if (pool.version === 6) hasV6Pool = true;\n    else hasNotV6Pool = true;\n\n    publicKeys.push(\n      {\n        pubkey: pool.id,\n        version: pool.version,\n        key: \"state\",\n        poolId: pool.id,\n      },\n      {\n        pubkey: pool.lpVault,\n        version: pool.version,\n        key: \"lpVault\",\n        poolId: pool.id,\n      },\n    );\n\n    if (owner) {\n      publicKeys.push({\n        pubkey: getAssociatedLedgerAccount({\n          programId: pool.programId,\n          poolId: pool.id,\n          owner,\n          version: poolInfo.version as 6 | 5 | 3,\n        }),\n        version: pool.version,\n        key: \"ledger\",\n        poolId: pool.id,\n      });\n    }\n  }\n\n  const poolsInfo: FarmPoolsInfo = {};\n  const accountsInfo = await getMultipleAccountsInfoWithCustomFlags(connection, publicKeys, config);\n  for (const { pubkey, version, key, poolId, accountInfo } of accountsInfo) {\n    const _poolId = poolId.toBase58();\n    poolsInfo[_poolId] = { ...poolsInfo[_poolId] };\n    if (key === \"state\") {\n      const stateLayout = getFarmStateLayout(version);\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== stateLayout!.span)\n        logger.logWithError(`invalid farm state account info, pools.id, ${pubkey}`);\n      poolsInfo[_poolId].state = stateLayout!.decode(accountInfo!.data);\n    } else if (key === \"lpVault\") {\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== splAccountLayout.span)\n        logger.logWithError(`invalid farm lp vault account info, pools.lpVault, ${pubkey}`);\n      poolsInfo[_poolId].lpVault = splAccountLayout.decode(accountInfo!.data);\n    } else if (key === \"ledger\") {\n      const legerLayout = getFarmLedgerLayout(version)!;\n      if (accountInfo && accountInfo.data) {\n        if (accountInfo.data.length !== legerLayout.span)\n          logger.logWithError(`invalid farm ledger account info, ledger, ${pubkey}`);\n        poolsInfo[_poolId].ledger = legerLayout.decode(accountInfo.data);\n      }\n    }\n  }\n\n  const slot = hasV6Pool || hasNotV6Pool ? await connection.getSlot() : 0;\n\n  for (const poolId of Object.keys(poolsInfo)) {\n    if (poolsInfo[poolId] === undefined) continue;\n    poolsInfo[poolId].state = updateFarmPoolInfo(poolsInfo[poolId].state, poolsInfo[poolId].lpVault, slot, chainTime);\n  }\n\n  for (const [poolId, { state, ledger }] of Object.entries(poolsInfo)) {\n    if (ledger) {\n      const multiplier =\n        state.version === 6\n          ? state.rewardMultiplier\n          : state.rewardInfos.length === 1\n            ? tenBN.pow(new BN(9))\n            : tenBN.pow(new BN(15));\n\n      const pendingRewards = state.rewardInfos.map((rewardInfo, index) => {\n        const rewardDebt = ledger.rewardDebts[index];\n        const pendingReward = ledger.deposited\n          .mul(state.version === 6 ? rewardInfo.accRewardPerShare : rewardInfo.perShareReward)\n          .div(multiplier)\n          .sub(rewardDebt);\n\n        return pendingReward;\n      });\n\n      poolsInfo[poolId].wrapped = {\n        ...poolsInfo[poolId].wrapped,\n        pendingRewards,\n      };\n    }\n  }\n\n  return poolsInfo;\n}\n/** deprecated */\nexport function judgeFarmType(\n  info: any,\n  currentTime: DateParam = Date.now(),\n): \"closed pool\" | \"normal fusion pool\" | \"dual fusion pool\" | undefined | \"upcoming pool\" {\n  if (info.version === 6) {\n    const rewardInfos = info.state.rewardInfos;\n    if (rewardInfos.every(({ rewardOpenTime }) => isDateBefore(currentTime, rewardOpenTime.toNumber(), { unit: \"s\" })))\n      return \"upcoming pool\";\n    if (rewardInfos.every(({ rewardEndTime }) => isDateAfter(currentTime, rewardEndTime.toNumber(), { unit: \"s\" })))\n      return \"closed pool\";\n  } else {\n    const perSlotRewards = info.state.rewardInfos.map(({ perSlotReward }) => perSlotReward);\n    if (perSlotRewards.length === 2) {\n      // v5\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) !== \"0\") {\n        return \"normal fusion pool\"; // reward xxx token\n      }\n      if (String(perSlotRewards[0]) !== \"0\" && String(perSlotRewards[1]) !== \"0\") {\n        return \"dual fusion pool\"; // reward ray and xxx token\n      }\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) === \"0\") {\n        return \"closed pool\";\n      }\n    } else if (perSlotRewards.length === 1) {\n      // v3\n      if (String(perSlotRewards[0]) === \"0\") {\n        return \"closed pool\";\n      }\n    }\n  }\n}\n\nexport async function getDepositEntryIndex(\n  connection: Connection,\n  registrar: PublicKey,\n  voter: PublicKey,\n  voterMint: PublicKey,\n): Promise<{ index: number; isInit: boolean }> {\n  const registrarAccountData = await connection.getAccountInfo(registrar);\n  if (registrarAccountData === null) throw Error(\"registrar info check error\");\n  const registrarData = VoterRegistrar.decode(registrarAccountData.data);\n\n  const votingMintConfigIndex = registrarData.votingMints.findIndex((i) => i.mint.equals(voterMint));\n\n  if (votingMintConfigIndex === -1) throw Error(\"find voter mint error\");\n\n  const voterAccountData = await connection.getAccountInfo(voter);\n  if (voterAccountData === null) return { index: votingMintConfigIndex, isInit: false }; // throw Error('voter info check error')\n\n  const voterData = Voter.decode(voterAccountData.data);\n\n  const depositEntryIndex = voterData.deposits.findIndex(\n    (i) => i.isUsed && i.votingMintConfigIdx === votingMintConfigIndex,\n  );\n  if (depositEntryIndex === -1) return { index: votingMintConfigIndex, isInit: false };\n  else return { index: depositEntryIndex, isInit: true };\n}\n","import { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport {\n  AmmV4Keys,\n  AmmV5Keys,\n  ApiV3PoolInfoConcentratedItem,\n  ApiV3PoolInfoStandardItem,\n  FormatFarmInfoOutV6,\n} from \"../../api/type\";\nimport { AccountLayout, NATIVE_MINT, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { getMultipleAccountsInfoWithCustomFlags } from \"@/common/accountInfo\";\nimport { BN_ZERO, divCeil } from \"@/common/bignumber\";\nimport { getATAAddress } from \"@/common/pda\";\nimport { BNDivCeil } from \"@/common/transfer\";\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\nimport { Percent, Token, TokenAmount } from \"../../module\";\nimport {\n  FARM_PROGRAM_TO_VERSION,\n  FarmLedger,\n  createAssociatedLedgerAccountInstruction,\n  getAssociatedLedgerAccount,\n  getFarmLedgerLayout,\n  makeWithdrawInstructionV3,\n  makeWithdrawInstructionV5,\n  makeWithdrawInstructionV6,\n} from \"../../raydium/farm\";\nimport { ClmmInstrument } from \"../clmm/instrument\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { toToken } from \"../token\";\nimport { ComputeBudgetConfig } from \"../type\";\nimport { LIQUIDITY_FEES_DENOMINATOR, LIQUIDITY_FEES_NUMERATOR } from \"./constant\";\nimport {\n  createPoolV4InstructionV2,\n  makeAMMSwapInstruction,\n  makeAddLiquidityInstruction,\n  removeLiquidityInstruction,\n} from \"./instruction\";\nimport { createPoolFeeLayout, liquidityStateV4Layout } from \"./layout\";\nimport { StableLayout, getDxByDyBaseIn, getDyByDxBaseIn, getStablePrice } from \"./stable\";\nimport {\n  AddLiquidityParams,\n  AmmRpcData,\n  AmountSide,\n  ComputeAmountInParam,\n  ComputeAmountOutParam,\n  CreatePoolAddress,\n  CreatePoolParam,\n  CreateMarketAndPoolParam,\n  RemoveParams,\n  SwapParam,\n} from \"./type\";\nimport { getAssociatedConfigId, getAssociatedPoolKeys, toAmmComputePoolInfo } from \"./utils\";\n\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport { AMM_V4, FEE_DESTINATION_ID, OPEN_BOOK_PROGRAM, WSOLMint } from \"@/common\";\nimport { generatePubKey } from \"../account\";\nimport { makeCreateMarketInstruction, MarketExtInfo } from \"../marketV2\";\n\nexport default class LiquidityModule extends ModuleBase {\n  public stableLayout: StableLayout;\n\n  constructor(params: ModuleBaseProps) {\n    super(params);\n    this.stableLayout = new StableLayout({ connection: this.scope.connection });\n  }\n\n  public async initLayout(): Promise<void> {\n    await this.stableLayout.initStableModelLayout();\n  }\n\n  public async load(): Promise<void> {\n    this.checkDisabled();\n  }\n\n  public computePairAmount({\n    poolInfo,\n    amount,\n    // anotherToken,\n    slippage,\n    baseIn,\n  }: {\n    poolInfo: ApiV3PoolInfoStandardItem;\n    amount: string | Decimal;\n    slippage: Percent;\n    baseIn?: boolean;\n  }): { anotherAmount: TokenAmount; maxAnotherAmount: TokenAmount; minAnotherAmount: TokenAmount; liquidity: BN } {\n    const inputAmount = new BN(new Decimal(amount).mul(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals).toFixed(0));\n    const _anotherToken = toToken(poolInfo[baseIn ? \"mintB\" : \"mintA\"]);\n\n    const [baseReserve, quoteReserve] = [\n      new BN(new Decimal(poolInfo.mintAmountA).mul(10 ** poolInfo.mintA.decimals).toString()),\n      new BN(new Decimal(poolInfo.mintAmountB).mul(10 ** poolInfo.mintB.decimals).toString()),\n    ];\n    const lpAmount = new BN(\n      new Decimal(poolInfo.lpAmount).mul(10 ** poolInfo.lpMint.decimals).toFixed(0, Decimal.ROUND_DOWN),\n    );\n    this.logDebug(\"baseReserve:\", baseReserve.toString(), \"quoteReserve:\", quoteReserve.toString());\n\n    this.logDebug(\n      \"tokenIn:\",\n      baseIn ? poolInfo.mintA.symbol : poolInfo.mintB.symbol,\n      \"amountIn:\",\n      inputAmount.toString(),\n      \"anotherToken:\",\n      baseIn ? poolInfo.mintB.symbol : poolInfo.mintA.symbol,\n      \"slippage:\",\n      `${slippage.toSignificant()}%`,\n      \"baseReserve\",\n      baseReserve.toString(),\n      \"quoteReserve\",\n      quoteReserve.toString(),\n    );\n\n    // input is fixed\n    const input = baseIn ? \"base\" : \"quote\";\n    this.logDebug(\"input side:\", input);\n\n    // round up\n    let amountRaw = BN_ZERO;\n    if (!inputAmount.isZero()) {\n      amountRaw =\n        input === \"base\"\n          ? divCeil(inputAmount.mul(quoteReserve), baseReserve)\n          : divCeil(inputAmount.mul(baseReserve), quoteReserve);\n    }\n\n    this.logDebug(\"amountRaw:\", amountRaw.toString(), \"lpAmount:\", lpAmount.toString());\n\n    const liquidity = divCeil(inputAmount.mul(lpAmount), input === \"base\" ? baseReserve : quoteReserve);\n\n    this.logDebug(\"liquidity:\", liquidity.toString());\n\n    const _slippage = new Percent(new BN(1)).add(slippage);\n    const _slippageMin = new Percent(new BN(1)).sub(slippage);\n    const slippageAdjustedAmount = _slippage.mul(amountRaw).quotient;\n    const slippageAdjustedMinAmount = _slippageMin.mul(amountRaw).quotient;\n\n    const _anotherAmount = new TokenAmount(_anotherToken, amountRaw);\n    const _maxAnotherAmount = new TokenAmount(_anotherToken, slippageAdjustedAmount);\n    const _minAnotherAmount = new TokenAmount(_anotherToken, slippageAdjustedMinAmount);\n    this.logDebug(\"anotherAmount:\", _anotherAmount.toFixed(), \"maxAnotherAmount:\", _maxAnotherAmount.toFixed());\n\n    return {\n      anotherAmount: _anotherAmount,\n      maxAnotherAmount: _maxAnotherAmount,\n      minAnotherAmount: _minAnotherAmount,\n      liquidity,\n    };\n  }\n\n  public async getAmmPoolKeys(poolId: string): Promise<AmmV4Keys | AmmV5Keys> {\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as (AmmV4Keys | AmmV5Keys)[])[0];\n  }\n\n  public async addLiquidity<T extends TxVersion>(params: AddLiquidityParams<T>): Promise<MakeTxData<T>> {\n    const {\n      poolInfo,\n      poolKeys: propPoolKeys,\n      amountInA,\n      amountInB,\n      otherAmountMin,\n      fixedSide,\n      config,\n      txVersion,\n      computeBudgetConfig,\n    } = params;\n\n    if (this.scope.availability.addStandardPosition === false)\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\n\n    this.logDebug(\"amountInA:\", amountInA, \"amountInB:\", amountInB);\n    if (amountInA.isZero() || amountInB.isZero())\n      this.logAndCreateError(\"amounts must greater than zero\", \"amountInA & amountInB\", {\n        amountInA: amountInA.toFixed(),\n        amountInB: amountInB.toFixed(),\n      });\n    const { account } = this.scope;\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\n      // default\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\n      // custom\n      ...config,\n    };\n    const [tokenA, tokenB] = [amountInA.token, amountInB.token];\n    const tokenAccountA = await account.getCreatedTokenAccount({\n      mint: tokenA.mint,\n      associatedOnly: false,\n    });\n    const tokenAccountB = await account.getCreatedTokenAccount({\n      mint: tokenB.mint,\n      associatedOnly: false,\n    });\n    if (!tokenAccountA && !tokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\n\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: new PublicKey(poolInfo.lpMint.address),\n    });\n\n    const tokens = [tokenA, tokenB];\n    const _tokenAccounts = [tokenAccountA, tokenAccountB];\n    const rawAmounts = [amountInA.raw, amountInB.raw];\n\n    // handle amount a & b and direction\n    const sideA = amountInA.token.mint.toBase58() === poolInfo.mintA.address ? \"base\" : \"quote\";\n    let _fixedSide: AmountSide = \"base\";\n    if (![\"quote\", \"base\"].includes(sideA)) this.logAndCreateError(\"invalid fixedSide\", \"fixedSide\", fixedSide);\n    if (sideA === \"quote\") {\n      tokens.reverse();\n      _tokenAccounts.reverse();\n      rawAmounts.reverse();\n      _fixedSide = fixedSide === \"a\" ? \"quote\" : \"base\";\n    } else if (sideA === \"base\") {\n      _fixedSide = fixedSide === \"a\" ? \"base\" : \"quote\";\n    }\n\n    const [baseToken, quoteToken] = tokens;\n    const [baseTokenAccount, quoteTokenAccount] = _tokenAccounts;\n    const [baseAmountRaw, quoteAmountRaw] = rawAmounts;\n\n    const poolKeys = propPoolKeys ?? (await this.getAmmPoolKeys(poolInfo.id));\n\n    const txBuilder = this.createTxBuilder();\n\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: baseAmountRaw,\n      mint: baseToken.mint,\n      tokenAccount: baseTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(baseInstruction);\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\n      side: \"in\",\n      amount: quoteAmountRaw,\n      mint: quoteToken.mint,\n      tokenAccount: quoteTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(quoteInstruction);\n    const { tokenAccount: _lpTokenAccount, ...lpInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: new PublicKey(poolInfo.lpMint.address),\n      tokenAccount: lpTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(lpInstruction);\n    txBuilder.addInstruction({\n      instructions: [\n        makeAddLiquidityInstruction({\n          poolInfo,\n          poolKeys: poolKeys as AmmV4Keys | AmmV5Keys,\n          userKeys: {\n            baseTokenAccount: _baseTokenAccount!,\n            quoteTokenAccount: _quoteTokenAccount!,\n            lpTokenAccount: _lpTokenAccount!,\n            owner: this.scope.ownerPubKey,\n          },\n          baseAmountIn: baseAmountRaw,\n          quoteAmountIn: quoteAmountRaw,\n          otherAmountMin: otherAmountMin.raw,\n          fixedSide: _fixedSide,\n        }),\n      ],\n      instructionTypes: [\n        poolInfo.pooltype.includes(\"StablePool\")\n          ? InstructionType.AmmV5AddLiquidity\n          : InstructionType.AmmV4AddLiquidity,\n      ],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    });\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    if (txVersion === TxVersion.V0) (await txBuilder.buildV0()) as MakeTxData<T>;\n    return txBuilder.build() as MakeTxData<T>;\n  }\n\n  public async removeLiquidity<T extends TxVersion>(params: RemoveParams<T>): Promise<Promise<MakeTxData<T>>> {\n    if (this.scope.availability.removeStandardPosition === false)\n      this.logAndCreateError(\"remove liquidity feature disabled in your region\");\n    const {\n      poolInfo,\n      poolKeys: propPoolKeys,\n      lpAmount,\n      baseAmountMin,\n      quoteAmountMin,\n      config,\n      txVersion,\n      computeBudgetConfig,\n    } = params;\n    const poolKeys = propPoolKeys ?? (await this.getAmmPoolKeys(poolInfo.id));\n    const [baseMint, quoteMint, lpMint] = [\n      new PublicKey(poolInfo.mintA.address),\n      new PublicKey(poolInfo.mintB.address),\n      new PublicKey(poolInfo.lpMint.address),\n    ];\n    this.logDebug(\"lpAmount:\", lpAmount);\n    this.logDebug(\"baseAmountMin:\", baseAmountMin);\n    this.logDebug(\"quoteAmountMin:\", quoteAmountMin);\n    if (lpAmount.isZero()) this.logAndCreateError(\"amount must greater than zero\", \"lpAmount\", lpAmount.toString());\n\n    const { account } = this.scope;\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: lpMint,\n      associatedOnly: false,\n    });\n    if (!lpTokenAccount) this.logAndCreateError(\"cannot found lpTokenAccount\", \"tokenAccounts\", account.tokenAccounts);\n\n    const baseTokenAccount = await account.getCreatedTokenAccount({\n      mint: baseMint,\n    });\n    const quoteTokenAccount = await account.getCreatedTokenAccount({\n      mint: quoteMint,\n    });\n\n    const txBuilder = this.createTxBuilder();\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\n      // default\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\n      // custom\n      ...config,\n    };\n\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: baseMint,\n      tokenAccount: baseTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(baseInstruction);\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: quoteMint,\n      tokenAccount: quoteTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(quoteInstruction);\n\n    txBuilder.addInstruction({\n      instructions: [\n        removeLiquidityInstruction({\n          poolInfo,\n          poolKeys,\n          userKeys: {\n            lpTokenAccount: lpTokenAccount!,\n            baseTokenAccount: _baseTokenAccount!,\n            quoteTokenAccount: _quoteTokenAccount!,\n            owner: this.scope.ownerPubKey,\n          },\n          lpAmount,\n          baseAmountMin,\n          quoteAmountMin,\n        }),\n      ],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n      instructionTypes: [\n        poolInfo.pooltype.includes(\"StablePool\")\n          ? InstructionType.AmmV5RemoveLiquidity\n          : InstructionType.AmmV4RemoveLiquidity,\n      ],\n    });\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    if (txVersion === TxVersion.V0) return (await txBuilder.buildV0()) as MakeTxData<T>;\n    return txBuilder.build() as MakeTxData<T>;\n  }\n\n  public async removeAllLpAndCreateClmmPosition<T extends TxVersion>({\n    poolInfo,\n    clmmPoolInfo,\n    removeLpAmount,\n    createPositionInfo,\n    farmInfo,\n    userFarmLpAmount,\n    base,\n    computeBudgetConfig,\n    payer,\n    userAuxiliaryLedgers,\n    tokenProgram = TOKEN_PROGRAM_ID,\n    checkCreateATAOwner = true,\n    getEphemeralSigners,\n    txVersion,\n  }: {\n    poolInfo: ApiV3PoolInfoStandardItem;\n    clmmPoolInfo: ApiV3PoolInfoConcentratedItem;\n    removeLpAmount: BN;\n    createPositionInfo: {\n      tickLower: number;\n      tickUpper: number;\n      baseAmount: BN;\n      otherAmountMax: BN;\n    };\n    farmInfo?: FormatFarmInfoOutV6;\n    userFarmLpAmount?: BN;\n    userAuxiliaryLedgers?: PublicKey[];\n    base: \"MintA\" | \"MintB\";\n    payer?: PublicKey;\n    computeBudgetConfig?: ComputeBudgetConfig;\n    tokenProgram?: PublicKey;\n    checkCreateATAOwner?: boolean;\n    txVersion?: T;\n    getEphemeralSigners?: (k: number) => any;\n  }): Promise<MakeMultiTxData<T>> {\n    if (\n      this.scope.availability.removeStandardPosition === false ||\n      this.scope.availability.createConcentratedPosition === false\n    )\n      this.logAndCreateError(\"remove liquidity or create position feature disabled in your region\");\n\n    if (\n      !(poolInfo.mintA.address === clmmPoolInfo.mintA.address || poolInfo.mintA.address === clmmPoolInfo.mintB.address)\n    )\n      throw Error(\"mint check error\");\n    if (\n      !(poolInfo.mintB.address === clmmPoolInfo.mintA.address || poolInfo.mintB.address === clmmPoolInfo.mintB.address)\n    )\n      throw Error(\"mint check error\");\n\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    const mintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccountRawInfos) {\n      if (\n        mintToAccount[item.accountInfo.mint.toString()] === undefined ||\n        getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, TOKEN_PROGRAM_ID).publicKey.equals(item.pubkey)\n      ) {\n        mintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\n      }\n    }\n\n    const lpTokenAccount = mintToAccount[poolInfo.lpMint.address];\n    if (lpTokenAccount === undefined) throw Error(\"find lp account error in trade accounts\");\n\n    const amountIn = removeLpAmount.add(userFarmLpAmount ?? new BN(0));\n    const mintBaseUseSOLBalance = poolInfo.mintA.address === Token.WSOL.mint.toString();\n    const mintQuoteUseSOLBalance = poolInfo.mintB.address === Token.WSOL.mint.toString();\n\n    const { account: baseTokenAccount, instructionParams: ownerTokenAccountBaseInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: TOKEN_PROGRAM_ID,\n        mint: new PublicKey(poolInfo.mintA.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo: mintBaseUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey,\n            }\n          : undefined,\n        skipCloseAccount: !mintBaseUseSOLBalance,\n        notUseTokenAccount: mintBaseUseSOLBalance,\n        associatedOnly: true,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\n    if (baseTokenAccount === undefined) throw new Error(\"base token account not found\");\n\n    const { account: quoteTokenAccount, instructionParams: ownerTokenAccountQuoteInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: TOKEN_PROGRAM_ID,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n        createInfo: mintQuoteUseSOLBalance\n          ? {\n              payer: this.scope.ownerPubKey!,\n              amount: 0,\n            }\n          : undefined,\n        skipCloseAccount: !mintQuoteUseSOLBalance,\n        notUseTokenAccount: mintQuoteUseSOLBalance,\n        associatedOnly: true,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\n    if (quoteTokenAccount === undefined) throw new Error(\"quote token account not found\");\n\n    mintToAccount[poolInfo.mintA.address] = baseTokenAccount;\n    mintToAccount[poolInfo.mintB.address] = quoteTokenAccount;\n\n    if (farmInfo !== undefined && !userFarmLpAmount?.isZero()) {\n      const farmVersion = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n      const ledger = getAssociatedLedgerAccount({\n        programId: new PublicKey(farmInfo.programId),\n        poolId: new PublicKey(farmInfo.id),\n        owner: this.scope.ownerPubKey,\n        version: farmVersion as 3 | 5 | 6,\n      });\n      let ledgerInfo: FarmLedger | undefined = undefined;\n      const ledgerData = await this.scope.connection.getAccountInfo(ledger);\n      if (ledgerData) {\n        const ledgerLayout = getFarmLedgerLayout(farmVersion)!;\n        ledgerInfo = ledgerLayout.decode(ledgerData.data);\n      }\n      if (farmVersion !== 6 && !ledgerInfo) {\n        const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\n          id: new PublicKey(farmInfo.id),\n          programId: new PublicKey(farmInfo.programId),\n          version: farmVersion,\n          ledger,\n          owner: this.scope.ownerPubKey,\n        });\n        txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\n      }\n\n      const rewardTokenAccounts: PublicKey[] = [];\n      for (const item of farmInfo.rewardInfos) {\n        const rewardIsWsol = item.mint.address === Token.WSOL.mint.toString();\n        if (mintToAccount[item.mint.address]) rewardTokenAccounts.push(mintToAccount[item.mint.address]);\n        else {\n          const { account: farmRewardAccount, instructionParams: ownerTokenAccountFarmInstruction } =\n            await this.scope.account.getOrCreateTokenAccount({\n              mint: new PublicKey(item.mint.address),\n              tokenProgram,\n              owner: this.scope.ownerPubKey,\n              skipCloseAccount: !rewardIsWsol,\n              createInfo: {\n                payer: payer || this.scope.ownerPubKey,\n              },\n              associatedOnly: true,\n              checkCreateATAOwner,\n            });\n          if (!farmRewardAccount) this.logAndCreateError(\"farm reward account not found:\", item.mint.address);\n          ownerTokenAccountFarmInstruction && txBuilder.addInstruction(ownerTokenAccountFarmInstruction);\n          rewardTokenAccounts.push(farmRewardAccount!);\n        }\n      }\n      const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\n      const insParams = {\n        userAuxiliaryLedgers,\n        amount: userFarmLpAmount!,\n        owner: this.scope.ownerPubKey,\n        farmInfo,\n        farmKeys,\n        lpAccount: lpTokenAccount,\n        rewardAccounts: rewardTokenAccounts,\n      };\n      const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\n      const newInstruction =\n        version === 6\n          ? makeWithdrawInstructionV6(insParams)\n          : version === 5\n          ? makeWithdrawInstructionV5(insParams)\n          : makeWithdrawInstructionV3(insParams);\n      const insType = {\n        3: InstructionType.FarmV3Withdraw,\n        5: InstructionType.FarmV5Withdraw,\n        6: InstructionType.FarmV6Withdraw,\n      };\n      txBuilder.addInstruction({\n        instructions: [newInstruction],\n        instructionTypes: [insType[version]],\n      });\n    }\n\n    const poolKeys = await this.getAmmPoolKeys(poolInfo.id);\n\n    const removeIns = removeLiquidityInstruction({\n      poolInfo,\n      poolKeys,\n      userKeys: {\n        lpTokenAccount,\n        baseTokenAccount,\n        quoteTokenAccount,\n        owner: this.scope.ownerPubKey,\n      },\n      lpAmount: amountIn,\n      baseAmountMin: 0,\n      quoteAmountMin: 0,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [removeIns],\n      instructionTypes: [\n        !poolInfo.pooltype.includes(\"StablePool\")\n          ? InstructionType.AmmV4RemoveLiquidity\n          : InstructionType.AmmV5RemoveLiquidity,\n      ],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    });\n\n    const [tokenAccountA, tokenAccountB] =\n      poolInfo.mintA.address === clmmPoolInfo.mintA.address\n        ? [baseTokenAccount, quoteTokenAccount]\n        : [quoteTokenAccount, baseTokenAccount];\n\n    const clmmPoolKeys = await this.scope.clmm.getClmmPoolKeys(clmmPoolInfo.id);\n\n    const createPositionIns = await ClmmInstrument.openPositionFromBaseInstructions({\n      poolInfo: clmmPoolInfo,\n      poolKeys: clmmPoolKeys,\n      ownerInfo: {\n        feePayer: this.scope.ownerPubKey,\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA,\n        tokenAccountB,\n      },\n      withMetadata: \"create\",\n      ...createPositionInfo,\n      base,\n      getEphemeralSigners,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [...createPositionIns.instructions],\n      signers: createPositionIns.signers,\n      instructionTypes: [...createPositionIns.instructionTypes],\n      lookupTableAddress: clmmPoolKeys.lookupTableAccount ? [clmmPoolKeys.lookupTableAccount] : [],\n    });\n\n    if (txVersion === TxVersion.V0) return txBuilder.sizeCheckBuildV0() as Promise<MakeMultiTxData<T>>;\n    return txBuilder.sizeCheckBuild() as Promise<MakeMultiTxData<T>>;\n  }\n\n  public async createPoolV4<T extends TxVersion>({\n    programId,\n    marketInfo,\n    baseMintInfo,\n    quoteMintInfo,\n    baseAmount,\n    quoteAmount,\n    startTime,\n    ownerInfo,\n    associatedOnly = false,\n    checkCreateATAOwner = false,\n    tokenProgram,\n    txVersion,\n    feeDestinationId,\n    computeBudgetConfig,\n  }: CreatePoolParam<T>): Promise<MakeTxData<T, { address: CreatePoolAddress }>> {\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && baseMintInfo.mint.equals(NATIVE_MINT);\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && quoteMintInfo.mint.equals(NATIVE_MINT);\n\n    const txBuilder = this.createTxBuilder();\n\n    const { account: ownerTokenAccountBase, instructionParams: ownerTokenAccountBaseInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: baseMintInfo.mint,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintAUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: baseAmount,\n            }\n          : undefined,\n        notUseTokenAccount: mintAUseSOLBalance,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\n\n    const { account: ownerTokenAccountQuote, instructionParams: ownerTokenAccountQuoteInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: quoteMintInfo.mint,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintBUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: quoteAmount,\n            }\n          : undefined,\n\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\n\n    if (ownerTokenAccountBase === undefined || ownerTokenAccountQuote === undefined)\n      throw Error(\"you don't has some token account\");\n\n    const poolInfo = getAssociatedPoolKeys({\n      version: 4,\n      marketVersion: 3,\n      marketId: marketInfo.marketId,\n      baseMint: baseMintInfo.mint,\n      quoteMint: quoteMintInfo.mint,\n      baseDecimals: baseMintInfo.decimals,\n      quoteDecimals: quoteMintInfo.decimals,\n      programId,\n      marketProgramId: marketInfo.programId,\n    });\n\n    const createPoolKeys = {\n      programId,\n      ammId: poolInfo.id,\n      ammAuthority: poolInfo.authority,\n      ammOpenOrders: poolInfo.openOrders,\n      lpMint: poolInfo.lpMint,\n      coinMint: poolInfo.baseMint,\n      pcMint: poolInfo.quoteMint,\n      coinVault: poolInfo.baseVault,\n      pcVault: poolInfo.quoteVault,\n      withdrawQueue: poolInfo.withdrawQueue,\n      ammTargetOrders: poolInfo.targetOrders,\n      poolTempLp: poolInfo.lpVault,\n      marketProgramId: poolInfo.marketProgramId,\n      marketId: poolInfo.marketId,\n      ammConfigId: poolInfo.configId,\n      feeDestinationId,\n    };\n\n    const { instruction, instructionType } = createPoolV4InstructionV2({\n      ...createPoolKeys,\n      userWallet: this.scope.ownerPubKey,\n      userCoinVault: ownerTokenAccountBase,\n      userPcVault: ownerTokenAccountQuote,\n      userLpVault: getATAAddress(this.scope.ownerPubKey, poolInfo.lpMint, tokenProgram).publicKey,\n\n      nonce: poolInfo.nonce,\n      openTime: startTime,\n      coinAmount: baseAmount,\n      pcAmount: quoteAmount,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [instruction],\n      instructionTypes: [instructionType],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({\n      txVersion,\n      extInfo: {\n        address: createPoolKeys,\n      },\n    }) as Promise<MakeTxData<T, { address: CreatePoolAddress }>>;\n  }\n\n  public async createMarketAndPoolV4<T extends TxVersion>({\n    programId = AMM_V4,\n    marketProgram = OPEN_BOOK_PROGRAM,\n    feeDestinationId = FEE_DESTINATION_ID,\n    tokenProgram,\n\n    baseMintInfo,\n    quoteMintInfo,\n    baseAmount,\n    quoteAmount,\n    startTime,\n\n    ownerInfo,\n    lowestFeeMarket,\n    assignSeed,\n\n    associatedOnly = false,\n    checkCreateATAOwner = false,\n\n    lotSize = 1,\n    tickSize = 0.01,\n\n    txVersion,\n    computeBudgetConfig,\n  }: CreateMarketAndPoolParam<T>): Promise<\n    MakeMultiTxData<T, { address: CreatePoolAddress & MarketExtInfo[\"address\"] }>\n  > {\n    const wallet = this.scope.ownerPubKey;\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && baseMintInfo.mint.equals(NATIVE_MINT);\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && quoteMintInfo.mint.equals(NATIVE_MINT);\n\n    const seed = assignSeed\n      ? `${baseMintInfo.mint.toBase58().slice(0, 7)}-${quoteMintInfo.mint.toBase58().slice(0, 7)}-${assignSeed}`\n      : undefined;\n\n    const market = generatePubKey({\n      fromPublicKey: wallet,\n      programId: marketProgram,\n      assignSeed: seed ? `${seed}-market` : seed,\n    });\n    const requestQueue = generatePubKey({\n      fromPublicKey: wallet,\n      programId: marketProgram,\n      assignSeed: seed ? `${seed}-request` : seed,\n    });\n    const eventQueue = generatePubKey({\n      fromPublicKey: wallet,\n      programId: marketProgram,\n      assignSeed: seed ? `${seed}-event` : seed,\n    });\n    const bids = generatePubKey({\n      fromPublicKey: wallet,\n      programId: marketProgram,\n      assignSeed: seed ? `${seed}-bids` : seed,\n    });\n    const asks = generatePubKey({\n      fromPublicKey: wallet,\n      programId: marketProgram,\n      assignSeed: seed ? `${seed}-asks` : seed,\n    });\n    const baseVault = generatePubKey({\n      fromPublicKey: wallet,\n      programId: TOKEN_PROGRAM_ID,\n      assignSeed: seed ? `${seed}-baseVault` : seed,\n    });\n    const quoteVault = generatePubKey({\n      fromPublicKey: wallet,\n      programId: TOKEN_PROGRAM_ID,\n      assignSeed: seed ? `${seed}-quoteVault` : seed,\n    });\n\n    const feeRateBps = 0;\n    const quoteDustThreshold = new BN(100);\n    function getVaultOwnerAndNonce() {\n      const vaultSignerNonce = new BN(0);\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        try {\n          const vaultOwner = PublicKey.createProgramAddressSync(\n            [market.publicKey.toBuffer(), vaultSignerNonce.toArrayLike(Buffer, \"le\", 8)],\n            marketProgram,\n          );\n          return { vaultOwner, vaultSignerNonce };\n        } catch (e) {\n          vaultSignerNonce.iaddn(1);\n          if (vaultSignerNonce.gt(new BN(25555))) throw Error(\"find vault owner error\");\n        }\n      }\n    }\n    const { vaultOwner, vaultSignerNonce } = getVaultOwnerAndNonce();\n    const baseLotSize = new BN(Math.round(10 ** baseMintInfo.decimals * lotSize));\n    const quoteLotSize = new BN(Math.round(lotSize * 10 ** quoteMintInfo.decimals * tickSize));\n\n    if (baseLotSize.eq(BN_ZERO)) throw Error(\"lot size is too small\");\n    if (quoteLotSize.eq(BN_ZERO)) throw Error(\"tick size or lot size is too small\");\n    const allTxArr = await makeCreateMarketInstruction({\n      connection: this.scope.connection,\n      wallet: this.scope.ownerPubKey,\n      marketInfo: {\n        programId: marketProgram,\n        vaultOwner,\n        baseMint: baseMintInfo.mint,\n        quoteMint: quoteMintInfo.mint,\n\n        id: market,\n        baseVault,\n        quoteVault,\n        requestQueue,\n        eventQueue,\n        bids,\n        asks,\n\n        feeRateBps,\n        quoteDustThreshold,\n        vaultSignerNonce,\n        baseLotSize,\n        quoteLotSize,\n        lowestFeeMarket,\n      },\n    });\n\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addInstruction({\n      instructions: allTxArr[0].transaction.instructions,\n      signers: allTxArr[0].signer,\n    });\n\n    for await (const txData of allTxArr.slice(1, allTxArr.length)) {\n      txBuilder.addInstruction({\n        instructions: txData.transaction.instructions,\n        signers: txData.signer,\n        instructionTypes: txData.instructionTypes,\n      });\n    }\n\n    const { account: ownerTokenAccountBase, instructionParams: ownerTokenAccountBaseInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: baseMintInfo.mint,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintAUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: baseAmount,\n            }\n          : undefined,\n        notUseTokenAccount: mintAUseSOLBalance,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n        assignSeed: mintAUseSOLBalance && seed ? `${seed}-wsol` : undefined,\n      });\n\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\n\n    const { account: ownerTokenAccountQuote, instructionParams: ownerTokenAccountQuoteInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: quoteMintInfo.mint,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintBUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: quoteAmount,\n            }\n          : undefined,\n\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n        assignSeed: mintBUseSOLBalance && seed ? `${seed}-wsol` : undefined,\n      });\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\n\n    if (ownerTokenAccountBase === undefined) throw Error(\"you don't has base token account\");\n    if (ownerTokenAccountQuote === undefined) throw Error(\"you don't has quote token account\");\n\n    // create pool ins\n    const poolInfo = getAssociatedPoolKeys({\n      version: 4,\n      marketVersion: 3,\n      marketId: market.publicKey,\n      baseMint: baseMintInfo.mint,\n      quoteMint: quoteMintInfo.mint,\n      baseDecimals: baseMintInfo.decimals,\n      quoteDecimals: quoteMintInfo.decimals,\n      programId,\n      marketProgramId: marketProgram,\n    });\n\n    const createPoolKeys = {\n      programId,\n      ammId: poolInfo.id,\n      ammAuthority: poolInfo.authority,\n      ammOpenOrders: poolInfo.openOrders,\n      lpMint: poolInfo.lpMint,\n      coinMint: poolInfo.baseMint,\n      pcMint: poolInfo.quoteMint,\n      coinVault: poolInfo.baseVault,\n      pcVault: poolInfo.quoteVault,\n      withdrawQueue: poolInfo.withdrawQueue,\n      ammTargetOrders: poolInfo.targetOrders,\n      poolTempLp: poolInfo.lpVault,\n      marketProgramId: poolInfo.marketProgramId,\n      marketId: poolInfo.marketId,\n      ammConfigId: poolInfo.configId,\n      feeDestinationId,\n    };\n\n    const { instruction, instructionType } = createPoolV4InstructionV2({\n      ...createPoolKeys,\n      userWallet: this.scope.ownerPubKey,\n      userCoinVault: ownerTokenAccountBase,\n      userPcVault: ownerTokenAccountQuote,\n      userLpVault: getATAAddress(this.scope.ownerPubKey, poolInfo.lpMint, tokenProgram).publicKey,\n\n      nonce: poolInfo.nonce,\n      openTime: startTime,\n      coinAmount: baseAmount,\n      pcAmount: quoteAmount,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [instruction],\n      instructionTypes: [instructionType],\n    });\n\n    const splitIns =\n      mintAUseSOLBalance || mintBUseSOLBalance\n        ? ([\n            ownerTokenAccountBaseInstruction?.instructions?.[0] || ownerTokenAccountQuoteInstruction?.instructions?.[0],\n          ].filter((i) => !!i) as TransactionInstruction[])\n        : undefined;\n\n    if (txVersion === TxVersion.V0)\n      return txBuilder.sizeCheckBuildV0({\n        computeBudgetConfig,\n        splitIns,\n        address: {\n          requestQueue: requestQueue.publicKey,\n          eventQueue: eventQueue.publicKey,\n          bids: bids.publicKey,\n          asks: asks.publicKey,\n          baseVault: baseVault.publicKey,\n          quoteVault: quoteVault.publicKey,\n          baseMint: new PublicKey(baseMintInfo.mint),\n          quoteMint: new PublicKey(quoteMintInfo.mint),\n          ...createPoolKeys,\n        },\n      }) as Promise<MakeMultiTxData<T, { address: CreatePoolAddress & MarketExtInfo[\"address\"] }>>;\n\n    return txBuilder.sizeCheckBuild({\n      computeBudgetConfig,\n      splitIns,\n      address: {\n        requestQueue: requestQueue.publicKey,\n        eventQueue: eventQueue.publicKey,\n        bids: bids.publicKey,\n        asks: asks.publicKey,\n        baseVault: baseVault.publicKey,\n        quoteVault: quoteVault.publicKey,\n        baseMint: new PublicKey(baseMintInfo.mint),\n        quoteMint: new PublicKey(quoteMintInfo.mint),\n        ...createPoolKeys,\n      },\n    }) as Promise<MakeMultiTxData<T, { address: CreatePoolAddress & MarketExtInfo[\"address\"] }>>;\n  }\n\n  public async getCreatePoolFee({ programId }: { programId: PublicKey }): Promise<BN> {\n    const configId = getAssociatedConfigId({ programId });\n\n    const account = await this.scope.connection.getAccountInfo(configId, { dataSlice: { offset: 536, length: 8 } });\n    if (account === null) throw Error(\"get config account error\");\n\n    return createPoolFeeLayout.decode(account.data).fee;\n  }\n\n  public computeAmountOut({\n    poolInfo,\n    amountIn,\n    mintIn: propMintIn,\n    mintOut: propMintOut,\n    slippage,\n  }: ComputeAmountOutParam): {\n    amountOut: BN;\n    minAmountOut: BN;\n    currentPrice: Decimal;\n    executionPrice: Decimal;\n    priceImpact: Decimal;\n    fee: BN;\n  } {\n    const [mintIn, mintOut] = [propMintIn.toString(), propMintOut.toString()];\n    if (mintIn !== poolInfo.mintA.address && mintIn !== poolInfo.mintB.address) throw new Error(\"toke not match\");\n    if (mintOut !== poolInfo.mintA.address && mintOut !== poolInfo.mintB.address) throw new Error(\"toke not match\");\n\n    const { baseReserve, quoteReserve } = poolInfo;\n\n    const reserves = [baseReserve, quoteReserve];\n    const mintDecimals = [poolInfo.mintA.decimals, poolInfo.mintB.decimals];\n\n    // input is fixed\n    const input = mintIn == poolInfo.mintA.address ? \"base\" : \"quote\";\n    if (input === \"quote\") {\n      reserves.reverse();\n      mintDecimals.reverse();\n    }\n\n    const [reserveIn, reserveOut] = reserves;\n    const [mintInDecimals, mintOutDecimals] = mintDecimals;\n    const isVersion4 = poolInfo.version === 4;\n    let currentPrice: Decimal;\n    if (isVersion4) {\n      currentPrice = new Decimal(reserveOut.toString())\n        .div(10 ** mintOutDecimals)\n        .div(new Decimal(reserveIn.toString()).div(10 ** mintInDecimals));\n    } else {\n      const p = getStablePrice(\n        this.stableLayout.stableModelData,\n        baseReserve.toNumber(),\n        quoteReserve.toNumber(),\n        false,\n      );\n      if (input === \"quote\") currentPrice = new Decimal(1e6).div(p * 1e6);\n      else currentPrice = new Decimal(p * 1e6).div(1e6);\n    }\n\n    const amountInRaw = amountIn;\n    let amountOutRaw = new BN(0);\n    let feeRaw = new BN(0);\n\n    if (!amountInRaw.isZero()) {\n      if (isVersion4) {\n        feeRaw = BNDivCeil(amountInRaw.mul(LIQUIDITY_FEES_NUMERATOR), LIQUIDITY_FEES_DENOMINATOR);\n        const amountInWithFee = amountInRaw.sub(feeRaw);\n\n        const denominator = reserveIn.add(amountInWithFee);\n        amountOutRaw = reserveOut.mul(amountInWithFee).div(denominator);\n      } else {\n        feeRaw = amountInRaw.mul(new BN(2)).div(new BN(10000));\n        const amountInWithFee = amountInRaw.sub(feeRaw);\n        if (input === \"quote\")\n          amountOutRaw = new BN(\n            getDyByDxBaseIn(\n              this.stableLayout.stableModelData,\n              quoteReserve.toNumber(),\n              baseReserve.toNumber(),\n              amountInWithFee.toNumber(),\n            ),\n          );\n        else {\n          amountOutRaw = new BN(\n            getDxByDyBaseIn(\n              this.stableLayout.stableModelData,\n              quoteReserve.toNumber(),\n              baseReserve.toNumber(),\n              amountInWithFee.toNumber(),\n            ),\n          );\n        }\n      }\n    }\n\n    const minAmountOutRaw = new BN(new Decimal(amountOutRaw.toString()).mul(1 - slippage).toFixed(0));\n\n    const amountOut = amountOutRaw;\n    const minAmountOut = minAmountOutRaw;\n\n    let executionPrice = new Decimal(amountOutRaw.toString()).div(\n      new Decimal(amountInRaw.sub(feeRaw).toString()).toFixed(0),\n    );\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\n      executionPrice = new Decimal(amountOutRaw.toString())\n        .div(10 ** mintOutDecimals)\n        .div(new Decimal(amountInRaw.sub(feeRaw).toString()).div(10 ** mintInDecimals));\n    }\n\n    const priceImpact = currentPrice.sub(executionPrice).div(currentPrice).mul(100);\n\n    const fee = feeRaw;\n\n    return {\n      amountOut,\n      minAmountOut,\n      currentPrice,\n      executionPrice,\n      priceImpact,\n      fee,\n    };\n  }\n\n  public computeAmountIn({ poolInfo, amountOut, mintIn, mintOut, slippage }: ComputeAmountInParam): {\n    amountIn: BN;\n    maxAmountIn: BN;\n    currentPrice: Decimal;\n    executionPrice: Decimal | null;\n    priceImpact: Decimal;\n  } {\n    const { baseReserve, quoteReserve } = poolInfo;\n    if (mintIn.toString() !== poolInfo.mintA.address && mintIn.toString() !== poolInfo.mintB.address)\n      this.logAndCreateError(\"mintIn does not match pool\");\n    if (mintOut.toString() !== poolInfo.mintA.address && mintOut.toString() !== poolInfo.mintB.address)\n      this.logAndCreateError(\"mintOut does not match pool\");\n    this.logDebug(\"baseReserve:\", baseReserve.toString());\n    this.logDebug(\"quoteReserve:\", quoteReserve.toString());\n\n    const baseIn = mintIn.toString() === poolInfo.mintA.address;\n    const [tokenIn, tokenOut] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\n\n    this.logDebug(\"currencyOut:\", tokenOut.symbol || tokenOut.address);\n    this.logDebug(\n      \"amountOut:\",\n      new Decimal(amountOut.toString())\n        .div(10 ** tokenOut.decimals)\n        .toDecimalPlaces(tokenOut.decimals)\n        .toString(),\n      tokenIn.symbol || tokenIn.address,\n    );\n    this.logDebug(\"slippage:\", `${slippage * 100}%`);\n\n    const reserves = [baseReserve, quoteReserve];\n\n    // output is fixed\n    const output = !baseIn ? \"base\" : \"quote\";\n    if (output === \"base\") {\n      reserves.reverse();\n    }\n    this.logDebug(\"output side:\", output);\n\n    const [reserveIn, reserveOut] = reserves;\n\n    const currentPrice = new Decimal(reserveOut.toString())\n      .div(10 ** poolInfo[baseIn ? \"mintB\" : \"mintA\"].decimals)\n      .div(new Decimal(reserveIn.toString()).div(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals));\n    this.logDebug(\n      \"currentPrice:\",\n      `1 ${tokenIn.symbol || tokenIn.address} ≈ ${currentPrice.toString()} ${tokenOut.symbol || tokenOut.address}`,\n    );\n    this.logDebug(\n      \"currentPrice invert:\",\n      `1 ${tokenOut.symbol || tokenOut.address} ≈ ${new Decimal(1).div(currentPrice).toString()} ${\n        tokenIn.symbol || tokenIn.address\n      }`,\n    );\n\n    let amountInRaw = new BN(0);\n    let amountOutRaw = amountOut;\n    if (!amountOutRaw.isZero()) {\n      // if out > reserve, out = reserve - 1\n      if (amountOutRaw.gt(reserveOut)) {\n        amountOutRaw = reserveOut.sub(new BN(1));\n      }\n\n      const denominator = reserveOut.sub(amountOutRaw);\n      const amountInWithoutFee = reserveIn.mul(amountOutRaw).div(denominator);\n\n      amountInRaw = amountInWithoutFee\n        .mul(LIQUIDITY_FEES_DENOMINATOR)\n        .div(LIQUIDITY_FEES_DENOMINATOR.sub(LIQUIDITY_FEES_NUMERATOR));\n    }\n\n    const maxAmountInRaw = new BN(new Decimal(amountInRaw.toString()).mul(1 + slippage).toFixed(0));\n\n    const amountIn = amountInRaw;\n    const maxAmountIn = maxAmountInRaw;\n    this.logDebug(\n      \"amountIn:\",\n      new Decimal(amountIn.toString())\n        .div(10 ** tokenIn.decimals)\n        .toDecimalPlaces(tokenIn.decimals)\n        .toString(),\n    );\n    this.logDebug(\n      \"maxAmountIn:\",\n      new Decimal(maxAmountIn.toString())\n        .div(10 ** tokenIn.decimals)\n        .toDecimalPlaces(tokenIn.decimals)\n        .toString(),\n    );\n\n    let executionPrice: Decimal | null = null;\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\n      executionPrice = new Decimal(amountOutRaw.toString())\n        .div(10 ** tokenOut.decimals)\n        .div(new Decimal(amountInRaw.toString()).div(10 ** tokenIn.decimals));\n      this.logDebug(\n        \"executionPrice:\",\n        `1 ${tokenOut.symbol || tokenOut.address} ≈ ${executionPrice\n          .toDecimalPlaces(Math.max(poolInfo.mintA.decimals, poolInfo.mintB.decimals))\n          .toString()} ${tokenIn.symbol || tokenIn.address}`,\n      );\n      this.logDebug(\n        \"executionPrice invert:\",\n        `1 ${tokenOut.symbol || tokenOut.address} ≈ ${new Decimal(1)\n          .div(executionPrice)\n          .toDecimalPlaces(Math.max(poolInfo.mintA.decimals, poolInfo.mintB.decimals))\n          .toString()} ${tokenIn.symbol || tokenIn.address}`,\n      );\n    }\n\n    const exactQuote = currentPrice.mul(amountIn.toString());\n    const priceImpact = exactQuote.sub(amountOut.toString()).abs().div(exactQuote);\n    this.logDebug(\"priceImpact:\", `${priceImpact.toString()}%`);\n\n    return {\n      amountIn,\n      maxAmountIn,\n      currentPrice,\n      executionPrice,\n      priceImpact,\n    };\n  }\n\n  public async swap<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    amountIn,\n    amountOut,\n    inputMint,\n    fixedSide,\n    txVersion,\n    config,\n    computeBudgetConfig,\n  }: SwapParam<T>): Promise<MakeTxData<T>> {\n    const txBuilder = this.createTxBuilder();\n    const { associatedOnly = true, inputUseSolBalance = true, outputUseSolBalance = true } = config || {};\n\n    const [tokenIn, tokenOut] =\n      inputMint === poolInfo.mintA.address ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\n\n    const inputTokenUseSolBalance = inputUseSolBalance && tokenIn.address === WSOLMint.toBase58();\n    const outputTokenUseSolBalance = outputUseSolBalance && tokenOut.address === WSOLMint.toBase58();\n\n    const { account: _tokenAccountIn, instructionParams: ownerTokenAccountBaseInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: TOKEN_PROGRAM_ID,\n        mint: new PublicKey(tokenIn.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo: inputTokenUseSolBalance\n          ? {\n              payer: this.scope.ownerPubKey,\n              amount: amountIn,\n            }\n          : undefined,\n        skipCloseAccount: !inputTokenUseSolBalance,\n        notUseTokenAccount: inputTokenUseSolBalance,\n        associatedOnly,\n      });\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\n\n    if (!_tokenAccountIn)\n      this.logAndCreateError(\"input token account not found\", {\n        token: tokenIn.symbol || tokenIn.address,\n        tokenAccountIn: _tokenAccountIn,\n        inputTokenUseSolBalance,\n        associatedOnly,\n      });\n\n    const { account: _tokenAccountOut, instructionParams: ownerTokenAccountQuoteInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: TOKEN_PROGRAM_ID,\n        mint: new PublicKey(tokenOut.address),\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey!,\n          amount: 0,\n        },\n        skipCloseAccount: !outputTokenUseSolBalance,\n        notUseTokenAccount: outputTokenUseSolBalance,\n        associatedOnly: outputTokenUseSolBalance ? false : associatedOnly,\n      });\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\n    if (_tokenAccountOut === undefined)\n      this.logAndCreateError(\"output token account not found\", {\n        token: tokenOut.symbol || tokenOut.address,\n        tokenAccountOut: _tokenAccountOut,\n        outputTokenUseSolBalance,\n        associatedOnly,\n      });\n\n    const poolKeys = propPoolKeys || (await this.getAmmPoolKeys(poolInfo.id));\n    let version = 4;\n    if (poolInfo.pooltype.includes(\"StablePool\")) version = 5;\n\n    txBuilder.addInstruction({\n      instructions: [\n        makeAMMSwapInstruction({\n          version,\n          poolKeys,\n          userKeys: {\n            tokenAccountIn: _tokenAccountIn!,\n            tokenAccountOut: _tokenAccountOut!,\n            owner: this.scope.ownerPubKey,\n          },\n          amountIn,\n          amountOut,\n          fixedSide,\n        }),\n      ],\n      instructionTypes: [version === 4 ? InstructionType.AmmV4SwapBaseIn : InstructionType.AmmV5SwapBaseIn],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({\n      txVersion,\n    }) as Promise<MakeTxData<T>>;\n  }\n\n  public async getRpcPoolInfo(poolId: string): Promise<AmmRpcData> {\n    return (await this.getRpcPoolInfos([poolId]))[poolId];\n  }\n\n  public async getRpcPoolInfos(\n    poolIds: (string | PublicKey)[],\n    config?: { batchRequest?: boolean; chunkCount?: number },\n  ): Promise<{\n    [poolId: string]: AmmRpcData;\n  }> {\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\n      this.scope.connection,\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\n      config,\n    );\n    const poolInfos: { [poolId: string]: ReturnType<typeof liquidityStateV4Layout.decode> & { programId: PublicKey } } =\n      {};\n\n    const needFetchVaults: PublicKey[] = [];\n\n    for (let i = 0; i < poolIds.length; i++) {\n      const item = accounts[i];\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\n      const rpc = liquidityStateV4Layout.decode(item.accountInfo.data);\n      poolInfos[String(poolIds[i])] = {\n        ...rpc,\n        programId: item.accountInfo.owner,\n      };\n\n      needFetchVaults.push(rpc.baseVault, rpc.quoteVault);\n    }\n\n    const vaultInfo: { [vaultId: string]: BN } = {};\n    const vaultAccountInfo = await getMultipleAccountsInfoWithCustomFlags(\n      this.scope.connection,\n      needFetchVaults.map((i) => ({ pubkey: new PublicKey(i) })),\n      config,\n    );\n\n    for (let i = 0; i < needFetchVaults.length; i++) {\n      const vaultItemInfo = vaultAccountInfo[i].accountInfo;\n      if (vaultItemInfo === null) throw Error(\"fetch vault info error: \" + needFetchVaults[i]);\n\n      vaultInfo[String(needFetchVaults[i])] = new BN(AccountLayout.decode(vaultItemInfo.data).amount.toString());\n    }\n\n    const returnData: { [poolId: string]: AmmRpcData } = {};\n\n    for (const [id, info] of Object.entries(poolInfos)) {\n      const baseReserve = vaultInfo[info.baseVault.toString()].sub(info.baseNeedTakePnl);\n      const quoteReserve = vaultInfo[info.quoteVault.toString()].sub(info.quoteNeedTakePnl);\n      returnData[id] = {\n        ...info,\n        baseReserve,\n        mintAAmount: vaultInfo[info.baseVault.toString()],\n        mintBAmount: vaultInfo[info.quoteVault.toString()],\n        quoteReserve,\n        poolPrice: new Decimal(quoteReserve.toString())\n          .div(new Decimal(10).pow(info.quoteDecimal.toString()))\n          .div(new Decimal(baseReserve.toString()).div(new Decimal(10).pow(info.baseDecimal.toString()))),\n      };\n    }\n\n    return returnData;\n  }\n\n  public async getPoolInfoFromRpc({ poolId }: { poolId: string }): Promise<{\n    poolRpcData: AmmRpcData;\n    poolInfo: ComputeAmountOutParam[\"poolInfo\"];\n    poolKeys: AmmV4Keys | AmmV5Keys;\n  }> {\n    const rpcData = await this.getRpcPoolInfo(poolId);\n    const computeData = toAmmComputePoolInfo({ [poolId]: rpcData });\n    const poolInfo = computeData[poolId];\n    const allKeys = await this.scope.tradeV2.computePoolToPoolKeys({\n      pools: [computeData[poolId]],\n      ammRpcData: { [poolId]: rpcData },\n    });\n    return {\n      poolRpcData: rpcData,\n      poolInfo,\n      poolKeys: allKeys[0] as AmmV4Keys | AmmV5Keys,\n    };\n  }\n}\n","import { Connection, Keypair, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { ReturnTypeMakeInstructions } from \"@/raydium/type\";\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token, ClmmKeys } from \"@/api/type\";\nimport {\n  InstructionType,\n  MEMO_PROGRAM_ID,\n  MEMO_PROGRAM_ID2,\n  METADATA_PROGRAM_ID,\n  RENT_PROGRAM_ID,\n  createLogger,\n  getATAAddress,\n  parseBigNumberish,\n} from \"@/common\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { bool, s32, struct, u128, u64, u8 } from \"@/marshmallow\";\nimport { ClmmPositionLayout, ObservationInfoLayout } from \"./layout\";\nimport {\n  ClmmPoolPersonalPosition,\n  ClosePositionExtInfo,\n  InitRewardExtInfo,\n  ManipulateLiquidityExtInfo,\n  OpenPositionFromBaseExtInfo,\n  OpenPositionFromLiquidityExtInfo,\n  ClmmLockAddress,\n} from \"./type\";\nimport {\n  getPdaExBitmapAccount,\n  getPdaLockPositionId,\n  getPdaMetadataKey,\n  getPdaObservationAccount,\n  getPdaOperationAccount,\n  getPdaPersonalPositionAddress,\n  getPdaPoolId,\n  getPdaPoolRewardVaulId,\n  getPdaPoolVaultId,\n  getPdaProtocolPositionAddress,\n  getPdaTickArrayAddress,\n  getPdaLockClPositionIdV2,\n} from \"./utils/pda\";\nimport { PoolUtils } from \"./utils/pool\";\nimport { TickUtils } from \"./utils/tick\";\nObservationInfoLayout.span; // do not delete this line\n\nconst logger = createLogger(\"Raydium_Clmm\");\n\nconst anchorDataBuf = {\n  createPool: [233, 146, 209, 142, 207, 104, 64, 188],\n  initReward: [95, 135, 192, 196, 242, 129, 230, 68],\n  setRewardEmissions: [112, 52, 167, 75, 32, 201, 211, 137],\n  openPosition: [77, 184, 74, 214, 112, 86, 241, 199],\n  openPositionWithTokenEx: [77, 255, 174, 82, 125, 29, 201, 46],\n  closePosition: [123, 134, 81, 0, 49, 68, 98, 98],\n  increaseLiquidity: [133, 29, 89, 223, 69, 238, 176, 10],\n  decreaseLiquidity: [58, 127, 188, 62, 79, 82, 196, 96],\n  swap: [43, 4, 237, 11, 26, 201, 30, 98], // [248, 198, 158, 145, 225, 117, 135, 200],\n  collectReward: [18, 237, 166, 197, 34, 16, 213, 144],\n};\n\nconst lockInsDataBuf = [188, 37, 179, 131, 82, 150, 84, 73];\nconst lockHarvestInsDataBuf = [16, 72, 250, 198, 14, 162, 212, 19];\n\ninterface CreatePoolInstruction {\n  connection: Connection;\n  programId: PublicKey;\n  owner: PublicKey;\n  mintA: ApiV3Token;\n  mintB: ApiV3Token;\n  ammConfigId: PublicKey;\n  initialPriceX64: BN;\n  startTime: BN;\n  forerunCreate?: boolean;\n}\n\nexport class ClmmInstrument {\n  static createPoolInstruction(\n    programId: PublicKey,\n    poolId: PublicKey,\n    poolCreator: PublicKey,\n    ammConfigId: PublicKey,\n    observationId: PublicKey,\n    mintA: PublicKey,\n    mintVaultA: PublicKey,\n    mintProgramIdA: PublicKey,\n    mintB: PublicKey,\n    mintVaultB: PublicKey,\n    mintProgramIdB: PublicKey,\n    exTickArrayBitmap: PublicKey,\n    sqrtPriceX64: BN,\n    startTime: BN,\n  ): TransactionInstruction {\n    const dataLayout = struct([u128(\"sqrtPriceX64\"), u64(\"startTime\")]);\n\n    const keys = [\n      { pubkey: poolCreator, isSigner: true, isWritable: true },\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: mintA, isSigner: false, isWritable: false },\n      { pubkey: mintB, isSigner: false, isWritable: false },\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\n      { pubkey: observationId, isSigner: false, isWritable: true },\n      { pubkey: exTickArrayBitmap, isSigner: false, isWritable: true },\n      { pubkey: mintProgramIdA, isSigner: false, isWritable: false },\n      { pubkey: mintProgramIdB, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        sqrtPriceX64,\n        startTime,\n      },\n      data,\n    );\n    const aData = Buffer.from([...anchorDataBuf.createPool, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static async createPoolInstructions(props: CreatePoolInstruction): Promise<\n    ReturnTypeMakeInstructions<{\n      poolId: PublicKey;\n      observationId: PublicKey;\n      exBitmapAccount: PublicKey;\n      mintAVault: PublicKey;\n      mintBVault: PublicKey;\n    }>\n  > {\n    const { programId, owner, mintA, mintB, ammConfigId, initialPriceX64, startTime } = props;\n    const [mintAAddress, mintBAddress] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\n\n    const { publicKey: poolId } = getPdaPoolId(programId, ammConfigId, mintAAddress, mintBAddress);\n    const { publicKey: observationId } = getPdaObservationAccount(programId, poolId);\n    const { publicKey: mintAVault } = getPdaPoolVaultId(programId, poolId, mintAAddress);\n    const { publicKey: mintBVault } = getPdaPoolVaultId(programId, poolId, mintBAddress);\n    const exBitmapAccount = getPdaExBitmapAccount(programId, poolId).publicKey;\n\n    const ins = [\n      this.createPoolInstruction(\n        programId,\n        poolId,\n        owner,\n        ammConfigId,\n        observationId,\n        mintAAddress,\n        mintAVault,\n        new PublicKey(mintA.programId || TOKEN_PROGRAM_ID),\n        mintBAddress,\n        mintBVault,\n        new PublicKey(mintB.programId || TOKEN_PROGRAM_ID),\n        exBitmapAccount,\n        initialPriceX64,\n        startTime,\n      ),\n    ];\n\n    return {\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.CreateAccount, InstructionType.ClmmCreatePool],\n      address: { poolId, observationId, exBitmapAccount, mintAVault, mintBVault },\n      lookupTableAddress: [],\n    };\n  }\n\n  static openPositionFromLiquidityInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftMint: PublicKey,\n    positionNftAccount: PublicKey,\n    metadataAccount: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    personalPosition: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    tokenVaultA: PublicKey,\n    tokenVaultB: PublicKey,\n    tokenMintA: PublicKey,\n    tokenMintB: PublicKey,\n\n    tickLowerIndex: number,\n    tickUpperIndex: number,\n    tickArrayLowerStartIndex: number,\n    tickArrayUpperStartIndex: number,\n    liquidity: BN,\n    amountMaxA: BN,\n    amountMaxB: BN,\n    withMetadata: \"create\" | \"no-create\",\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      s32(\"tickLowerIndex\"),\n      s32(\"tickUpperIndex\"),\n      s32(\"tickArrayLowerStartIndex\"),\n      s32(\"tickArrayUpperStartIndex\"),\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      bool(\"withMetadata\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        tickLowerIndex,\n        tickUpperIndex,\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n        liquidity,\n        amountMaxA,\n        amountMaxB,\n        withMetadata: withMetadata === \"create\",\n        baseFlag: false,\n        optionBaseFlag: 0,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static openPositionFromLiquidityInstruction22(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftMint: PublicKey,\n    positionNftAccount: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    personalPosition: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    tokenVaultA: PublicKey,\n    tokenVaultB: PublicKey,\n    tokenMintA: PublicKey,\n    tokenMintB: PublicKey,\n\n    tickLowerIndex: number,\n    tickUpperIndex: number,\n    tickArrayLowerStartIndex: number,\n    tickArrayUpperStartIndex: number,\n    liquidity: BN,\n    amountMaxA: BN,\n    amountMaxB: BN,\n    withMetadata: \"create\" | \"no-create\",\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      s32(\"tickLowerIndex\"),\n      s32(\"tickUpperIndex\"),\n      s32(\"tickArrayLowerStartIndex\"),\n      s32(\"tickArrayUpperStartIndex\"),\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      bool(\"withMetadata\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        tickLowerIndex,\n        tickUpperIndex,\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n        liquidity,\n        amountMaxA,\n        amountMaxB,\n        withMetadata: withMetadata === \"create\",\n        baseFlag: false,\n        optionBaseFlag: 0,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static async openPositionInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    amountMaxA,\n    amountMaxB,\n    withMetadata,\n    getEphemeralSigners,\n    nft2022,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      feePayer: PublicKey;\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    tickLower: number;\n    tickUpper: number;\n    liquidity: BN;\n    amountMaxA: BN;\n    amountMaxB: BN;\n    withMetadata: \"create\" | \"no-create\";\n    getEphemeralSigners?: (k: number) => any;\n    nft2022?: boolean;\n  }): Promise<ReturnTypeMakeInstructions> {\n    const signers: Signer[] = [];\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n\n    let nftMintAccount;\n    if (getEphemeralSigners) {\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\n    } else {\n      const _k = Keypair.generate();\n      signers.push(_k);\n      nftMintAccount = _k.publicKey;\n    }\n\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = nft2022\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\n\n    const ins = nft2022\n      ? this.openPositionFromLiquidityInstruction22(\n          programId,\n          ownerInfo.feePayer,\n          id,\n          ownerInfo.wallet,\n          nftMintAccount,\n          positionNftAccount,\n          protocolPosition,\n          tickArrayLower,\n          tickArrayUpper,\n          personalPosition,\n          ownerInfo.tokenAccountA,\n          ownerInfo.tokenAccountB,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          new PublicKey(poolInfo.mintA.address),\n          new PublicKey(poolInfo.mintB.address),\n\n          tickLower,\n          tickUpper,\n          tickArrayLowerStartIndex,\n          tickArrayUpperStartIndex,\n          liquidity,\n          amountMaxA,\n          amountMaxB,\n          withMetadata,\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n            tickArrayLowerStartIndex,\n            tickArrayUpperStartIndex,\n          ])\n            ? getPdaExBitmapAccount(programId, id).publicKey\n            : undefined,\n        )\n      : this.openPositionFromLiquidityInstruction(\n          programId,\n          ownerInfo.feePayer,\n          id,\n          ownerInfo.wallet,\n          nftMintAccount,\n          positionNftAccount,\n          metadataAccount,\n          protocolPosition,\n          tickArrayLower,\n          tickArrayUpper,\n          personalPosition,\n          ownerInfo.tokenAccountA,\n          ownerInfo.tokenAccountB,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          new PublicKey(poolInfo.mintA.address),\n          new PublicKey(poolInfo.mintB.address),\n\n          tickLower,\n          tickUpper,\n          tickArrayLowerStartIndex,\n          tickArrayUpperStartIndex,\n          liquidity,\n          amountMaxA,\n          amountMaxB,\n          withMetadata,\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n            tickArrayLowerStartIndex,\n            tickArrayUpperStartIndex,\n          ])\n            ? getPdaExBitmapAccount(programId, id).publicKey\n            : undefined,\n        );\n\n    return {\n      signers,\n      instructions: [ins],\n      instructionTypes: [InstructionType.ClmmOpenPosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n      address: {\n        nftMint: nftMintAccount,\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        metadataAccount,\n        personalPosition,\n        protocolPosition,\n      },\n    };\n  }\n\n  static async openPositionFromBaseInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    tickLower,\n    tickUpper,\n    base,\n    baseAmount,\n    otherAmountMax,\n    withMetadata,\n    getEphemeralSigners,\n    nft2022,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      feePayer: PublicKey;\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    tickLower: number;\n    tickUpper: number;\n\n    base: \"MintA\" | \"MintB\";\n    baseAmount: BN;\n\n    otherAmountMax: BN;\n    withMetadata: \"create\" | \"no-create\";\n    getEphemeralSigners?: (k: number) => any;\n    nft2022?: boolean;\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromBaseExtInfo>> {\n    const signers: Signer[] = [];\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n\n    let nftMintAccount: PublicKey;\n    if (getEphemeralSigners) {\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\n    } else {\n      const _k = Keypair.generate();\n      signers.push(_k);\n      nftMintAccount = _k.publicKey;\n    }\n\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = nft2022\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\n\n    const ins = nft2022\n      ? this.openPositionFromBaseInstruction22(\n          programId,\n          ownerInfo.feePayer,\n          id,\n          ownerInfo.wallet,\n          nftMintAccount,\n          positionNftAccount,\n          protocolPosition,\n          tickArrayLower,\n          tickArrayUpper,\n          personalPosition,\n          ownerInfo.tokenAccountA,\n          ownerInfo.tokenAccountB,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          new PublicKey(poolInfo.mintA.address),\n          new PublicKey(poolInfo.mintB.address),\n\n          tickLower,\n          tickUpper,\n          tickArrayLowerStartIndex,\n          tickArrayUpperStartIndex,\n\n          withMetadata,\n\n          base,\n          baseAmount,\n\n          otherAmountMax,\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n            tickArrayLowerStartIndex,\n            tickArrayUpperStartIndex,\n          ])\n            ? getPdaExBitmapAccount(programId, id).publicKey\n            : undefined,\n        )\n      : this.openPositionFromBaseInstruction(\n          programId,\n          ownerInfo.feePayer,\n          id,\n          ownerInfo.wallet,\n          nftMintAccount,\n          positionNftAccount,\n          metadataAccount,\n          protocolPosition,\n          tickArrayLower,\n          tickArrayUpper,\n          personalPosition,\n          ownerInfo.tokenAccountA,\n          ownerInfo.tokenAccountB,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          new PublicKey(poolInfo.mintA.address),\n          new PublicKey(poolInfo.mintB.address),\n\n          tickLower,\n          tickUpper,\n          tickArrayLowerStartIndex,\n          tickArrayUpperStartIndex,\n\n          withMetadata,\n\n          base,\n          baseAmount,\n\n          otherAmountMax,\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n            tickArrayLowerStartIndex,\n            tickArrayUpperStartIndex,\n          ])\n            ? getPdaExBitmapAccount(programId, id).publicKey\n            : undefined,\n        );\n\n    return {\n      address: {\n        nftMint: nftMintAccount,\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        metadataAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      instructions: [ins],\n      signers,\n      instructionTypes: [InstructionType.ClmmOpenPosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static openPositionFromBaseInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftMint: PublicKey,\n    positionNftAccount: PublicKey,\n    metadataAccount: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    personalPosition: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    tokenVaultA: PublicKey,\n    tokenVaultB: PublicKey,\n    tokenMintA: PublicKey,\n    tokenMintB: PublicKey,\n\n    tickLowerIndex: number,\n    tickUpperIndex: number,\n    tickArrayLowerStartIndex: number,\n    tickArrayUpperStartIndex: number,\n\n    withMetadata: \"create\" | \"no-create\",\n    base: \"MintA\" | \"MintB\",\n    baseAmount: BN,\n\n    otherAmountMax: BN,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      s32(\"tickLowerIndex\"),\n      s32(\"tickUpperIndex\"),\n      s32(\"tickArrayLowerStartIndex\"),\n      s32(\"tickArrayUpperStartIndex\"),\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      bool(\"withMetadata\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        tickLowerIndex,\n        tickUpperIndex,\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n        liquidity: new BN(0),\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\n        withMetadata: withMetadata === \"create\",\n        baseFlag: base === \"MintA\",\n        optionBaseFlag: 1,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static openPositionFromBaseInstruction22(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftMint: PublicKey,\n    positionNftAccount: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    personalPosition: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    tokenVaultA: PublicKey,\n    tokenVaultB: PublicKey,\n    tokenMintA: PublicKey,\n    tokenMintB: PublicKey,\n\n    tickLowerIndex: number,\n    tickUpperIndex: number,\n    tickArrayLowerStartIndex: number,\n    tickArrayUpperStartIndex: number,\n\n    withMetadata: \"create\" | \"no-create\",\n    base: \"MintA\" | \"MintB\",\n    baseAmount: BN,\n\n    otherAmountMax: BN,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      s32(\"tickLowerIndex\"),\n      s32(\"tickUpperIndex\"),\n      s32(\"tickArrayLowerStartIndex\"),\n      s32(\"tickArrayUpperStartIndex\"),\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      bool(\"withMetadata\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        tickLowerIndex,\n        tickUpperIndex,\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n        liquidity: new BN(0),\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\n        withMetadata: withMetadata === \"create\",\n        baseFlag: base === \"MintA\",\n        optionBaseFlag: 1,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static async openPositionFromLiquidityInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    amountMaxA,\n    amountMaxB,\n    withMetadata,\n    getEphemeralSigners,\n    nft2022,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    tickLower: number;\n    tickUpper: number;\n    liquidity: BN;\n    amountMaxA: BN;\n    amountMaxB: BN;\n    withMetadata: \"create\" | \"no-create\";\n    getEphemeralSigners?: (k: number) => any;\n    nft2022?: boolean;\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromLiquidityExtInfo[\"address\"]>> {\n    let nftMintAccount: PublicKey;\n    const signers: Keypair[] = [];\n    if (getEphemeralSigners) {\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\n    } else {\n      const _k = Keypair.generate();\n      signers.push(_k);\n      nftMintAccount = _k.publicKey;\n    }\n\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = nft2022\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\n\n    const ins = nft2022\n      ? this.openPositionFromLiquidityInstruction22(\n          programId,\n          ownerInfo.wallet,\n          id,\n          ownerInfo.wallet,\n          nftMintAccount,\n          positionNftAccount,\n          protocolPosition,\n          tickArrayLower,\n          tickArrayUpper,\n          personalPosition,\n          ownerInfo.tokenAccountA,\n          ownerInfo.tokenAccountB,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          new PublicKey(poolKeys.mintA.address),\n          new PublicKey(poolKeys.mintB.address),\n\n          tickLower,\n          tickUpper,\n          tickArrayLowerStartIndex,\n          tickArrayUpperStartIndex,\n          liquidity,\n          amountMaxA,\n          amountMaxB,\n          withMetadata,\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n            tickArrayLowerStartIndex,\n            tickArrayUpperStartIndex,\n          ])\n            ? getPdaExBitmapAccount(programId, id).publicKey\n            : undefined,\n        )\n      : this.openPositionFromLiquidityInstruction(\n          programId,\n          ownerInfo.wallet,\n          id,\n          ownerInfo.wallet,\n          nftMintAccount,\n          positionNftAccount,\n          metadataAccount,\n          protocolPosition,\n          tickArrayLower,\n          tickArrayUpper,\n          personalPosition,\n          ownerInfo.tokenAccountA,\n          ownerInfo.tokenAccountB,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          new PublicKey(poolKeys.mintA.address),\n          new PublicKey(poolKeys.mintB.address),\n\n          tickLower,\n          tickUpper,\n          tickArrayLowerStartIndex,\n          tickArrayUpperStartIndex,\n          liquidity,\n          amountMaxA,\n          amountMaxB,\n          withMetadata,\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n            tickArrayLowerStartIndex,\n            tickArrayUpperStartIndex,\n          ])\n            ? getPdaExBitmapAccount(programId, id).publicKey\n            : undefined,\n        );\n\n    return {\n      address: {\n        nftMint: nftMintAccount,\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        metadataAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      instructions: [ins],\n      signers,\n      instructionTypes: [InstructionType.ClmmOpenPosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static closePositionInstruction(\n    programId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftMint: PublicKey,\n    positionNftAccount: PublicKey,\n    personalPosition: PublicKey,\n    nft2022?: boolean,\n  ): TransactionInstruction {\n    const dataLayout = struct([]);\n\n    const keys = [\n      { pubkey: positionNftOwner, isSigner: true, isWritable: true },\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({}, data);\n\n    const aData = Buffer.from([...anchorDataBuf.closePosition, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static closePositionInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    ownerPosition,\n    nft2022,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerPosition: ClmmPositionLayout;\n    ownerInfo: {\n      wallet: PublicKey;\n    };\n    nft2022?: boolean;\n  }): ReturnTypeMakeInstructions<ClosePositionExtInfo[\"address\"]> {\n    const programId = new PublicKey(poolInfo.programId);\n    // const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\n    const positionNftAccount = nft2022\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID).publicKey\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID).publicKey;\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\n\n    const ins: TransactionInstruction[] = [];\n    ins.push(\n      this.closePositionInstruction(\n        programId,\n        ownerInfo.wallet,\n        ownerPosition.nftMint,\n        positionNftAccount,\n        personalPosition,\n        nft2022,\n      ),\n    );\n\n    return {\n      address: {\n        positionNftAccount,\n        personalPosition,\n      },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmClosePosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static increasePositionFromLiquidityInstruction(\n    programId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftAccount: PublicKey,\n    personalPosition: PublicKey,\n\n    poolId: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    mintVaultA: PublicKey,\n    mintVaultB: PublicKey,\n    mintMintA: PublicKey,\n    mintMintB: PublicKey,\n\n    liquidity: BN,\n    amountMaxA: BN,\n    amountMaxB: BN,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        liquidity,\n        amountMaxA,\n        amountMaxB,\n        optionBaseFlag: 0,\n        baseFlag: false,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static increasePositionFromLiquidityInstructions({\n    poolInfo,\n    poolKeys,\n    ownerPosition,\n    ownerInfo,\n    liquidity,\n    amountMaxA,\n    amountMaxB,\n    nft2022,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerPosition: ClmmPositionLayout;\n\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    liquidity: BN;\n    amountMaxA: BN;\n    amountMaxB: BN;\n    nft2022?: boolean;\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickLower,\n      poolInfo.config.tickSpacing,\n    );\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickUpper,\n      poolInfo.config.tickSpacing,\n    );\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = nft2022\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\n\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\n      programId,\n      id,\n      ownerPosition.tickLower,\n      ownerPosition.tickUpper,\n    );\n\n    const ins = this.increasePositionFromLiquidityInstruction(\n      programId,\n      ownerInfo.wallet,\n      positionNftAccount,\n      personalPosition,\n      id,\n      protocolPosition,\n      tickArrayLower,\n      tickArrayUpper,\n      ownerInfo.tokenAccountA,\n      ownerInfo.tokenAccountB,\n      new PublicKey(poolKeys.vault.A),\n      new PublicKey(poolKeys.vault.B),\n      new PublicKey(poolInfo.mintA.address),\n      new PublicKey(poolInfo.mintB.address),\n\n      liquidity,\n      amountMaxA,\n      amountMaxB,\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n      ])\n        ? getPdaExBitmapAccount(programId, id).publicKey\n        : undefined,\n    );\n\n    return {\n      address: {\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      signers: [],\n      instructions: [ins],\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static increasePositionFromBaseInstructions({\n    poolInfo,\n    poolKeys,\n    ownerPosition,\n    ownerInfo,\n    base,\n    baseAmount,\n    otherAmountMax,\n    nft2022,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerPosition: ClmmPoolPersonalPosition;\n\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    base: \"MintA\" | \"MintB\";\n    baseAmount: BN;\n\n    otherAmountMax: BN;\n    nft2022?: boolean;\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickLower,\n      poolInfo.config.tickSpacing,\n    );\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickUpper,\n      poolInfo.config.tickSpacing,\n    );\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = nft2022\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\n\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\n      programId,\n      id,\n      ownerPosition.tickLower,\n      ownerPosition.tickUpper,\n    );\n\n    return {\n      address: {\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      instructions: [\n        this.increasePositionFromBaseInstruction(\n          programId,\n          ownerInfo.wallet,\n          positionNftAccount,\n          personalPosition,\n          id,\n          protocolPosition,\n          tickArrayLower,\n          tickArrayUpper,\n          ownerInfo.tokenAccountA,\n          ownerInfo.tokenAccountB,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          new PublicKey(poolInfo.mintA.address),\n          new PublicKey(poolInfo.mintB.address),\n\n          base,\n          baseAmount,\n\n          otherAmountMax,\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n            tickArrayLowerStartIndex,\n            tickArrayUpperStartIndex,\n          ])\n            ? getPdaExBitmapAccount(programId, id).publicKey\n            : undefined,\n        ),\n      ],\n      signers: [],\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static increasePositionFromBaseInstruction(\n    programId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftAccount: PublicKey,\n    personalPosition: PublicKey,\n\n    poolId: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    mintVaultA: PublicKey,\n    mintVaultB: PublicKey,\n    mintMintA: PublicKey,\n    mintMintB: PublicKey,\n\n    base: \"MintA\" | \"MintB\",\n    baseAmount: BN,\n\n    otherAmountMax: BN,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      u128(\"liquidity\"),\n      u64(\"amountMaxA\"),\n      u64(\"amountMaxB\"),\n      u8(\"optionBaseFlag\"),\n      bool(\"baseFlag\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n    ];\n\n    const keys = [\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        liquidity: new BN(0),\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\n        baseFlag: base === \"MintA\",\n        optionBaseFlag: 1,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static decreaseLiquidityInstruction(\n    programId: PublicKey,\n    positionNftOwner: PublicKey,\n    positionNftAccount: PublicKey,\n    personalPosition: PublicKey,\n\n    poolId: PublicKey,\n    protocolPosition: PublicKey,\n    tickArrayLower: PublicKey,\n    tickArrayUpper: PublicKey,\n    ownerTokenAccountA: PublicKey,\n    ownerTokenAccountB: PublicKey,\n    mintVaultA: PublicKey,\n    mintVaultB: PublicKey,\n    mintMintA: PublicKey,\n    mintMintB: PublicKey,\n    rewardAccounts: {\n      poolRewardVault: PublicKey;\n      ownerRewardVault: PublicKey;\n      rewardMint: PublicKey;\n    }[],\n\n    liquidity: BN,\n    amountMinA: BN,\n    amountMinB: BN,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([u128(\"liquidity\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n      ...rewardAccounts\n        .map((i) => [\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\n        ])\n        .flat(),\n    ];\n\n    const keys = [\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        liquidity,\n        amountMinA,\n        amountMinB,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.decreaseLiquidity, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static decreaseLiquidityInstructions({\n    poolInfo,\n    poolKeys,\n    ownerPosition,\n    ownerInfo,\n    liquidity,\n    amountMinA,\n    amountMinB,\n    programId,\n    nft2022,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerPosition: ClmmPositionLayout;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n      rewardAccounts: PublicKey[];\n    };\n\n    liquidity: BN;\n    amountMinA: BN;\n    amountMinB: BN;\n    programId?: PublicKey;\n    nft2022?: boolean;\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\n    const [poolProgramId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickLower,\n      poolInfo.config.tickSpacing,\n    );\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      ownerPosition.tickUpper,\n      poolInfo.config.tickSpacing,\n    );\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, id, tickArrayUpperStartIndex);\n    const { publicKey: positionNftAccount } = nft2022\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, programId);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolProgramId, ownerPosition.nftMint);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\n      poolProgramId,\n      id,\n      ownerPosition.tickLower,\n      ownerPosition.tickUpper,\n    );\n\n    const rewardAccounts: {\n      poolRewardVault: PublicKey;\n      ownerRewardVault: PublicKey;\n      rewardMint: PublicKey;\n    }[] = [];\n    for (let i = 0; i < poolInfo.rewardDefaultInfos.length; i++) {\n      rewardAccounts.push({\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\n        ownerRewardVault: ownerInfo.rewardAccounts[i],\n        rewardMint: new PublicKey(poolInfo.rewardDefaultInfos[i].mint.address),\n      });\n    }\n\n    const ins: TransactionInstruction[] = [];\n    const decreaseIns = this.decreaseLiquidityInstruction(\n      poolProgramId,\n      ownerInfo.wallet,\n      positionNftAccount,\n      personalPosition,\n      id,\n      protocolPosition,\n      tickArrayLower,\n      tickArrayUpper,\n      ownerInfo.tokenAccountA,\n      ownerInfo.tokenAccountB,\n      new PublicKey(poolKeys.vault.A),\n      new PublicKey(poolKeys.vault.B),\n      new PublicKey(poolInfo.mintA.address),\n      new PublicKey(poolInfo.mintB.address),\n      rewardAccounts,\n\n      liquidity,\n      amountMinA,\n      amountMinB,\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\n        tickArrayLowerStartIndex,\n        tickArrayUpperStartIndex,\n      ])\n        ? getPdaExBitmapAccount(poolProgramId, id).publicKey\n        : undefined,\n    );\n    ins.push(decreaseIns);\n\n    return {\n      address: {\n        tickArrayLower,\n        tickArrayUpper,\n        positionNftAccount,\n        personalPosition,\n        protocolPosition,\n      },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static swapInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    ammConfigId: PublicKey,\n    inputTokenAccount: PublicKey,\n    outputTokenAccount: PublicKey,\n    inputVault: PublicKey,\n    outputVault: PublicKey,\n    inputMint: PublicKey,\n    outputMint: PublicKey,\n    tickArray: PublicKey[],\n    observationId: PublicKey,\n\n    amount: BN,\n    otherAmountThreshold: BN,\n    sqrtPriceLimitX64: BN,\n    isBaseInput: boolean,\n\n    exTickArrayBitmap?: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = struct([\n      u64(\"amount\"),\n      u64(\"otherAmountThreshold\"),\n      u128(\"sqrtPriceLimitX64\"),\n      bool(\"isBaseInput\"),\n    ]);\n\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n      ...tickArray.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n    ];\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: false },\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\n\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: inputTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: outputTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: inputVault, isSigner: false, isWritable: true },\n      { pubkey: outputVault, isSigner: false, isWritable: true },\n\n      { pubkey: observationId, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: inputMint, isSigner: false, isWritable: false },\n      { pubkey: outputMint, isSigner: false, isWritable: false },\n\n      ...remainingAccounts,\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        amount,\n        otherAmountThreshold,\n        sqrtPriceLimitX64,\n        isBaseInput,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.swap, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static makeSwapBaseInInstructions({\n    poolInfo,\n    poolKeys,\n    observationId,\n    ownerInfo,\n    inputMint,\n    amountIn,\n    amountOutMin,\n    sqrtPriceLimitX64,\n    remainingAccounts,\n  }: {\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\n    poolKeys: ClmmKeys;\n    observationId: PublicKey;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    inputMint: PublicKey;\n\n    amountIn: BN;\n    amountOutMin: BN;\n    sqrtPriceLimitX64: BN;\n\n    remainingAccounts: PublicKey[];\n  }): ReturnTypeMakeInstructions {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\n\n    const isInputMintA = poolInfo.mintA.address === inputMint.toString();\n\n    const ins = [\n      this.swapInstruction(\n        programId,\n        ownerInfo.wallet,\n\n        id,\n        new PublicKey(poolInfo.config.id),\n\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\n\n        isInputMintA ? mintAVault : mintBVault,\n        isInputMintA ? mintBVault : mintAVault,\n\n        isInputMintA ? mintA : mintB,\n        isInputMintA ? mintB : mintA,\n\n        remainingAccounts,\n        observationId,\n        amountIn,\n        amountOutMin,\n        sqrtPriceLimitX64,\n        true,\n        getPdaExBitmapAccount(programId, id).publicKey,\n      ),\n    ];\n    return {\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmSwapBaseIn],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n      address: {},\n    };\n  }\n\n  static makeSwapBaseOutInstructions({\n    poolInfo,\n    poolKeys,\n    observationId,\n    ownerInfo,\n    outputMint,\n    amountOut,\n    amountInMax,\n    sqrtPriceLimitX64,\n    remainingAccounts,\n  }: {\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\n    poolKeys: ClmmKeys;\n    observationId: PublicKey;\n\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccountA: PublicKey;\n      tokenAccountB: PublicKey;\n    };\n\n    outputMint: PublicKey;\n\n    amountOut: BN;\n    amountInMax: BN;\n    sqrtPriceLimitX64: BN;\n\n    remainingAccounts: PublicKey[];\n  }): ReturnTypeMakeInstructions {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\n    const isInputMintA = poolInfo.mintA.address === outputMint.toBase58();\n    const ins = [\n      this.swapInstruction(\n        programId,\n        ownerInfo.wallet,\n\n        id,\n        new PublicKey(poolInfo.config.id),\n\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\n\n        isInputMintA ? mintBVault : mintAVault,\n        isInputMintA ? mintAVault : mintBVault,\n\n        isInputMintA ? mintB : mintA,\n        isInputMintA ? mintA : mintB,\n\n        remainingAccounts,\n        observationId,\n        amountOut,\n        amountInMax,\n        sqrtPriceLimitX64,\n        false,\n        getPdaExBitmapAccount(programId, id).publicKey,\n      ),\n    ];\n    return {\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmSwapBaseOut],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n      address: {},\n    };\n  }\n\n  static initRewardInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    operationId: PublicKey,\n    ammConfigId: PublicKey,\n\n    ownerTokenAccount: PublicKey,\n    rewardProgramId: PublicKey,\n    rewardMint: PublicKey,\n    rewardVault: PublicKey,\n\n    openTime: number,\n    endTime: number,\n    emissionsPerSecondX64: BN,\n  ): TransactionInstruction {\n    const dataLayout = struct([u64(\"openTime\"), u64(\"endTime\"), u128(\"emissionsPerSecondX64\")]);\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\n\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: operationId, isSigner: false, isWritable: true },\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\n\n      { pubkey: rewardProgramId, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        openTime: parseBigNumberish(openTime),\n        endTime: parseBigNumberish(endTime),\n        emissionsPerSecondX64,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.initReward, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static initRewardInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    rewardInfo,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccount: PublicKey;\n    };\n    rewardInfo: {\n      programId: PublicKey;\n      mint: PublicKey;\n      openTime: number;\n      endTime: number;\n      emissionsPerSecondX64: BN;\n    };\n  }): ReturnTypeMakeInstructions<InitRewardExtInfo[\"address\"]> {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    const poolRewardVault = getPdaPoolRewardVaulId(programId, id, rewardInfo.mint).publicKey;\n    const operationId = getPdaOperationAccount(programId).publicKey;\n    const ins = [\n      this.initRewardInstruction(\n        programId,\n        ownerInfo.wallet,\n        id,\n        operationId,\n        new PublicKey(poolInfo.config.id),\n\n        ownerInfo.tokenAccount,\n        rewardInfo.programId,\n        rewardInfo.mint,\n        poolRewardVault,\n\n        rewardInfo.openTime,\n        rewardInfo.endTime,\n        rewardInfo.emissionsPerSecondX64,\n      ),\n    ];\n    return {\n      address: { poolRewardVault, operationId },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmInitReward],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static setRewardInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n    operationId: PublicKey,\n    ammConfigId: PublicKey,\n\n    ownerTokenAccount: PublicKey,\n    rewardVault: PublicKey,\n    rewardMint: PublicKey,\n\n    rewardIndex: number,\n    openTime: number,\n    endTime: number,\n    emissionsPerSecondX64: BN,\n  ): TransactionInstruction {\n    const dataLayout = struct([u8(\"rewardIndex\"), u128(\"emissionsPerSecondX64\"), u64(\"openTime\"), u64(\"endTime\")]);\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: operationId, isSigner: false, isWritable: true },\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: rewardMint, isSigner: false, isWritable: true },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        rewardIndex,\n        emissionsPerSecondX64,\n        openTime: parseBigNumberish(openTime),\n        endTime: parseBigNumberish(endTime),\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.setRewardEmissions, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static setRewardInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    rewardInfo,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccount: PublicKey;\n    };\n    rewardInfo: {\n      mint: PublicKey;\n      openTime: number;\n      endTime: number;\n      emissionsPerSecondX64: BN;\n    };\n  }): ReturnTypeMakeInstructions {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n\n    let rewardIndex: number | undefined;\n    let rewardVault: PublicKey | undefined;\n    let rewardMint: PublicKey | undefined;\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardInfo.mint.toString()) {\n        rewardIndex = index;\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\n        rewardMint = new PublicKey(poolKeys.rewardInfos[index].mint.address);\n      }\n\n    if (rewardIndex === undefined || rewardVault === undefined)\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\n\n    const operationId = getPdaOperationAccount(programId).publicKey;\n\n    const ins = [\n      this.setRewardInstruction(\n        programId,\n        ownerInfo.wallet,\n        id,\n        operationId,\n        new PublicKey(poolInfo.config.id),\n\n        ownerInfo.tokenAccount,\n        rewardVault!,\n        rewardMint!,\n\n        rewardIndex!,\n        rewardInfo.openTime,\n        rewardInfo.endTime,\n        rewardInfo.emissionsPerSecondX64,\n      ),\n    ];\n    return {\n      address: { rewardVault: rewardVault!, operationId },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmSetReward],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static collectRewardInstruction(\n    programId: PublicKey,\n    payer: PublicKey,\n    poolId: PublicKey,\n\n    ownerTokenAccount: PublicKey,\n    rewardVault: PublicKey,\n    rewardMint: PublicKey,\n\n    rewardIndex: number,\n  ): TransactionInstruction {\n    const dataLayout = struct([u8(\"rewardIndex\")]);\n\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        rewardIndex,\n      },\n      data,\n    );\n\n    const aData = Buffer.from([...anchorDataBuf.collectReward, ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static collectRewardInstructions({\n    poolInfo,\n    poolKeys,\n    ownerInfo,\n    rewardMint,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    ownerInfo: {\n      wallet: PublicKey;\n      tokenAccount: PublicKey;\n    };\n    rewardMint: PublicKey;\n  }): ReturnTypeMakeInstructions {\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\n    let rewardIndex: number | undefined;\n    let rewardVault: PublicKey | undefined;\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardMint.toString()) {\n        rewardIndex = index;\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\n      }\n\n    if (rewardIndex === undefined || rewardVault === undefined)\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\n\n    const ins = [\n      this.collectRewardInstruction(\n        programId,\n        ownerInfo.wallet,\n        id,\n\n        ownerInfo.tokenAccount,\n        rewardVault!,\n        rewardMint,\n\n        rewardIndex!,\n      ),\n    ];\n    return {\n      address: { rewardVault: rewardVault! },\n      signers: [],\n      instructions: ins,\n      instructionTypes: [InstructionType.ClmmCollectReward],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    };\n  }\n\n  static async makeLockPositions({\n    programId,\n    authProgramId,\n    poolProgramId,\n    payer,\n    wallet,\n    nftMint,\n    nft2022,\n    getEphemeralSigners,\n  }: {\n    programId: PublicKey;\n    authProgramId: PublicKey;\n    poolProgramId: PublicKey;\n    wallet: PublicKey;\n    payer: PublicKey;\n    nftMint: PublicKey;\n    nft2022?: boolean;\n    getEphemeralSigners?: (k: number) => any;\n  }): Promise<ReturnTypeMakeInstructions<ClmmLockAddress>> {\n    const signers: Signer[] = [];\n    let lockNftMint: PublicKey;\n    if (getEphemeralSigners) {\n      lockNftMint = new PublicKey((await getEphemeralSigners(1))[0]);\n    } else {\n      const _k = Keypair.generate();\n      signers.push(_k);\n      lockNftMint = _k.publicKey;\n    }\n\n    const positionNftAccount = nft2022\n      ? getATAAddress(wallet, nftMint, TOKEN_2022_PROGRAM_ID).publicKey\n      : getATAAddress(wallet, nftMint, TOKEN_PROGRAM_ID).publicKey;\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, nftMint);\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockNftMint).publicKey;\n    const lockNftAccount = getATAAddress(wallet, lockNftMint, TOKEN_PROGRAM_ID).publicKey;\n    const metadataAccount = getPdaMetadataKey(lockNftMint).publicKey;\n\n    const ins = ClmmInstrument.lockPositionInstructionV2({\n      programId,\n      auth: authProgramId,\n      payer,\n      positionOwner: wallet,\n      lockOwner: wallet,\n      positionNftAccount,\n      positionId,\n      lockPositionId,\n      lockNftMint,\n      lockNftAccount,\n      metadataAccount,\n      withMetadata: true,\n      nft2022,\n\n      positionNftMint: nftMint,\n      authPositionNftAccount: getATAAddress(authProgramId, nftMint, nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID)\n        .publicKey,\n      positionNftProgram: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\n    });\n\n    return {\n      address: {\n        positionId,\n        lockPositionId,\n        lockNftAccount,\n        lockNftMint,\n        positionNftAccount,\n        metadataAccount,\n      },\n      instructions: [ins],\n      signers,\n      instructionTypes: [InstructionType.ClmmLockPosition],\n      lookupTableAddress: [],\n    };\n  }\n\n  static lockPositionInstructionV2({\n    programId,\n    auth,\n    payer,\n    positionOwner,\n    lockOwner,\n    positionNftAccount,\n    positionId,\n    positionNftMint,\n    authPositionNftAccount,\n    positionNftProgram,\n    lockPositionId,\n    lockNftMint,\n    lockNftAccount,\n    metadataAccount,\n    withMetadata,\n  }: {\n    programId: PublicKey;\n    auth: PublicKey;\n    payer: PublicKey;\n    positionOwner: PublicKey;\n    lockOwner: PublicKey;\n    positionNftAccount: PublicKey;\n    positionId: PublicKey;\n    positionNftMint: PublicKey;\n    authPositionNftAccount: PublicKey;\n    positionNftProgram: PublicKey;\n    lockPositionId: PublicKey;\n    lockNftMint: PublicKey;\n    lockNftAccount: PublicKey;\n    metadataAccount: PublicKey;\n    withMetadata: boolean;\n    nft2022?: boolean;\n  }): TransactionInstruction {\n    const keys = [\n      { pubkey: auth, isSigner: false, isWritable: false },\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: positionOwner, isSigner: true, isWritable: true },\n      { pubkey: lockOwner, isSigner: false, isWritable: false },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: positionId, isSigner: false, isWritable: false },\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\n      { pubkey: authPositionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: lockPositionId, isSigner: false, isWritable: true },\n      { pubkey: lockNftMint, isSigner: true, isWritable: true },\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: positionNftProgram, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const dataLayout = struct([bool(\"withMetadata\")]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        withMetadata,\n      },\n      data,\n    );\n    const aData = Buffer.from([...lockInsDataBuf, ...data]);\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n\n  static lockPositionInstruction({\n    programId,\n    authProgramId,\n    poolProgramId,\n    owner,\n    positionNft,\n  }: {\n    programId: PublicKey;\n    authProgramId: PublicKey;\n    poolProgramId: PublicKey;\n    owner: PublicKey;\n    positionNft: PublicKey;\n  }): TransactionInstruction {\n    const { publicKey: nftAccount } = getATAAddress(owner, positionNft, TOKEN_PROGRAM_ID);\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, positionNft);\n\n    const keys = [\n      { pubkey: authProgramId, isSigner: false, isWritable: false },\n      { pubkey: owner, isSigner: true, isWritable: false },\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\n      { pubkey: positionId, isSigner: false, isWritable: false },\n      { pubkey: getPdaLockPositionId(programId, positionId).publicKey, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: Buffer.from(lockInsDataBuf),\n    });\n  }\n\n  static harvestLockPositionInstruction(props: {\n    poolKeys: ClmmKeys;\n    programId: PublicKey;\n    authProgramId: PublicKey;\n    ownerPosition: ClmmPositionLayout;\n    owner: PublicKey;\n    ownerRewardAccounts: PublicKey[];\n    userVaultA: PublicKey;\n    userVaultB: PublicKey;\n  }): TransactionInstruction {\n    const [poolProgramId, poolId] = [new PublicKey(props.poolKeys.programId), new PublicKey(props.poolKeys.id)];\n\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      props.ownerPosition.tickLower,\n      props.poolKeys.config.tickSpacing,\n    );\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      props.ownerPosition.tickUpper,\n      props.poolKeys.config.tickSpacing,\n    );\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayUpperStartIndex);\n    const { publicKey: nftAccount } = getATAAddress(props.owner, props.ownerPosition.nftMint, TOKEN_PROGRAM_ID);\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, props.ownerPosition.nftMint);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\n      poolProgramId,\n      poolId,\n      props.ownerPosition.tickLower,\n      props.ownerPosition.tickUpper,\n    );\n\n    const rewardAccounts: {\n      poolRewardVault: PublicKey;\n      ownerRewardVault: PublicKey;\n      rewardMint: PublicKey;\n    }[] = [];\n\n    for (let i = 0; i < props.poolKeys.rewardInfos.length; i++) {\n      rewardAccounts.push({\n        poolRewardVault: new PublicKey(props.poolKeys.rewardInfos[i].vault),\n        ownerRewardVault: props.ownerRewardAccounts[i],\n        rewardMint: new PublicKey(props.poolKeys.rewardInfos[i].mint.address),\n      });\n    }\n\n    const remainingAccounts = [\n      ...rewardAccounts\n        .map((i) => [\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\n        ])\n        .flat(),\n    ];\n\n    const keys = [\n      { pubkey: props.authProgramId, isSigner: false, isWritable: false },\n      { pubkey: getPdaLockPositionId(props.programId, positionId).publicKey, isSigner: false, isWritable: false },\n      { pubkey: poolProgramId, isSigner: false, isWritable: false },\n      { pubkey: props.owner, isSigner: true, isWritable: false },\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\n      { pubkey: positionId, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(props.poolKeys.vault.A), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(props.poolKeys.vault.B), isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: props.userVaultA, isSigner: false, isWritable: true },\n      { pubkey: props.userVaultB, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(props.poolKeys.mintA.address), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(props.poolKeys.mintB.address), isSigner: false, isWritable: false },\n      ...remainingAccounts,\n    ];\n\n    return new TransactionInstruction({\n      keys,\n      programId: props.programId,\n      data: Buffer.from(lockHarvestInsDataBuf),\n    });\n  }\n\n  static harvestLockPositionInstructionV2({\n    programId,\n    auth,\n    lockPositionId,\n    clmmProgram,\n    lockOwner,\n    lockNftMint,\n    lockNftAccount,\n    positionNftAccount,\n    positionId,\n    poolId,\n    protocolPosition,\n    vaultA,\n    vaultB,\n    tickArrayLower,\n    tickArrayUpper,\n    userVaultA,\n    userVaultB,\n    mintA,\n    mintB,\n    rewardAccounts,\n    exTickArrayBitmap,\n  }: {\n    programId: PublicKey;\n    auth: PublicKey;\n    lockPositionId: PublicKey;\n    clmmProgram: PublicKey;\n    lockOwner: PublicKey;\n    lockNftMint: PublicKey;\n    lockNftAccount: PublicKey;\n    positionNftAccount: PublicKey;\n    positionId: PublicKey;\n    poolId: PublicKey;\n    protocolPosition: PublicKey;\n    vaultA: PublicKey;\n    vaultB: PublicKey;\n    tickArrayLower: PublicKey;\n    tickArrayUpper: PublicKey;\n    userVaultA: PublicKey;\n    userVaultB: PublicKey;\n    mintA: PublicKey;\n    mintB: PublicKey;\n    rewardAccounts: {\n      poolRewardVault: PublicKey;\n      ownerRewardVault: PublicKey;\n      rewardMint: PublicKey;\n    }[];\n\n    exTickArrayBitmap?: PublicKey;\n  }): TransactionInstruction {\n    const remainingAccounts = [\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\n      ...rewardAccounts\n        .map((i) => [\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\n        ])\n        .flat(),\n    ];\n\n    const keys = [\n      { pubkey: auth, isSigner: false, isWritable: false },\n      { pubkey: lockOwner, isSigner: true, isWritable: false },\n      // { pubkey: lockNftMint, isSigner: false, isWritable: false },\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\n      { pubkey: lockPositionId, isSigner: false, isWritable: false },\n      { pubkey: clmmProgram, isSigner: false, isWritable: false },\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n      { pubkey: positionId, isSigner: false, isWritable: true },\n      { pubkey: poolId, isSigner: false, isWritable: true },\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\n      { pubkey: vaultA, isSigner: false, isWritable: true },\n      { pubkey: vaultB, isSigner: false, isWritable: true },\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n      { pubkey: userVaultA, isSigner: false, isWritable: true },\n      { pubkey: userVaultB, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\n      { pubkey: mintA, isSigner: false, isWritable: false },\n      { pubkey: mintB, isSigner: false, isWritable: false },\n      ...remainingAccounts,\n    ];\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: Buffer.from(lockHarvestInsDataBuf),\n    });\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\n\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\nimport { ClmmPoolInfo, TickArrayBitmapExtensionType } from \"../type\";\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\nimport { SqrtPriceMath, TickMath } from \"./math\";\nimport { getPdaTickArrayAddress } from \"./pda\";\nimport { TickQuery } from \"./tickQuery\";\n\nexport const TICK_ARRAY_SIZE = 60;\nexport const TICK_ARRAY_BITMAP_SIZE = 512;\n\nexport interface ReturnTypeGetTickPrice {\n  tick: number;\n  price: Decimal;\n  tickSqrtPriceX64: BN;\n}\n\nexport interface ReturnTypeGetPriceAndTick {\n  tick: number;\n  price: Decimal;\n}\n\nexport type Tick = {\n  tick: number;\n  liquidityNet: BN;\n  liquidityGross: BN;\n  feeGrowthOutsideX64A: BN;\n  feeGrowthOutsideX64B: BN;\n  rewardGrowthsOutsideX64: BN[];\n};\n\nexport type TickArray = {\n  address: PublicKey;\n  poolId: PublicKey;\n  startTickIndex: number;\n  ticks: Tick[];\n  initializedTickCount: number;\n};\n\nexport type TickState = {\n  tick: number;\n  liquidityNet: BN;\n  liquidityGross: BN;\n  feeGrowthOutsideX64A: BN;\n  feeGrowthOutsideX64B: BN;\n  tickCumulativeOutside: BN;\n  secondsPerLiquidityOutsideX64: BN;\n  secondsOutside: number;\n  rewardGrowthsOutside: BN[];\n};\n\nexport type TickArrayState = {\n  ammPool: PublicKey;\n  startTickIndex: number;\n  ticks: TickState[];\n  initializedTickCount: number;\n};\n\nexport class TickUtils {\n  public static getTickArrayAddressByTick(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickIndex: number,\n    tickSpacing: number,\n  ): PublicKey {\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\n    return tickArrayAddress;\n  }\n\n  public static getTickOffsetInArray(tickIndex: number, tickSpacing: number): number {\n    if (tickIndex % tickSpacing != 0) {\n      throw new Error(\"tickIndex % tickSpacing not equal 0\");\n    }\n    const startTickIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\n    const offsetInArray = Math.floor((tickIndex - startTickIndex) / tickSpacing);\n    if (offsetInArray < 0 || offsetInArray >= TICK_ARRAY_SIZE) {\n      throw new Error(\"tick offset in array overflow\");\n    }\n    return offsetInArray;\n  }\n\n  public static getTickArrayBitIndex(tickIndex: number, tickSpacing: number): number {\n    const ticksInArray = TickQuery.tickCount(tickSpacing);\n\n    let startIndex: number = tickIndex / ticksInArray;\n    if (tickIndex < 0 && tickIndex % ticksInArray != 0) {\n      startIndex = Math.ceil(startIndex) - 1;\n    } else {\n      startIndex = Math.floor(startIndex);\n    }\n    return startIndex;\n  }\n\n  public static getTickArrayStartIndexByTick(tickIndex: number, tickSpacing: number): number {\n    return this.getTickArrayBitIndex(tickIndex, tickSpacing) * TickQuery.tickCount(tickSpacing);\n  }\n\n  public static getTickArrayOffsetInBitmapByTick(tick: number, tickSpacing: number): number {\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\n    const compressed = Math.floor(tick / multiplier) + 512;\n    return Math.abs(compressed);\n  }\n\n  public static checkTickArrayIsInitialized(\n    bitmap: BN,\n    tick: number,\n    tickSpacing: number,\n  ): {\n    isInitialized: boolean;\n    startIndex: number;\n  } {\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\n    const compressed = Math.floor(tick / multiplier) + 512;\n    const bitPos = Math.abs(compressed);\n    return {\n      isInitialized: bitmap.testn(bitPos),\n      startIndex: (bitPos - 512) * multiplier,\n    };\n  }\n\n  public static getNextTickArrayStartIndex(\n    lastTickArrayStartIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): number {\n    return zeroForOne\n      ? lastTickArrayStartIndex - tickSpacing * TICK_ARRAY_SIZE\n      : lastTickArrayStartIndex + tickSpacing * TICK_ARRAY_SIZE;\n  }\n\n  public static mergeTickArrayBitmap(bns: BN[]): BN {\n    let b = new BN(0);\n    for (let i = 0; i < bns.length; i++) {\n      b = b.add(bns[i].shln(64 * i));\n    }\n    return b;\n  }\n\n  public static getInitializedTickArrayInRange(\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    tickSpacing: number,\n    tickArrayStartIndex: number,\n    expectedCount: number,\n  ): number[] {\n    const tickArrayOffset = Math.floor(tickArrayStartIndex / (tickSpacing * TICK_ARRAY_SIZE));\n    return [\n      // find right of currenct offset\n      ...TickUtils.searchLowBitFromStart(\n        tickArrayBitmap,\n        exTickArrayBitmap,\n        tickArrayOffset - 1,\n        expectedCount,\n        tickSpacing,\n      ),\n\n      // find left of current offset\n      ...TickUtils.searchHightBitFromStart(\n        tickArrayBitmap,\n        exTickArrayBitmap,\n        tickArrayOffset,\n        expectedCount,\n        tickSpacing,\n      ),\n    ];\n  }\n\n  public static getAllInitializedTickArrayStartIndex(\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    tickSpacing: number,\n  ): number[] {\n    // find from offset 0 to 1024\n    return TickUtils.searchHightBitFromStart(\n      tickArrayBitmap,\n      exTickArrayBitmap,\n      -7680,\n      TICK_ARRAY_BITMAP_SIZE,\n      tickSpacing,\n    );\n  }\n\n  public static getAllInitializedTickArrayInfo(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    tickSpacing: number,\n  ): {\n    tickArrayStartIndex: number;\n    tickArrayAddress: PublicKey;\n  }[] {\n    const result: {\n      tickArrayStartIndex: number;\n      tickArrayAddress: PublicKey;\n    }[] = [];\n    const allInitializedTickArrayIndex: number[] = TickUtils.getAllInitializedTickArrayStartIndex(\n      tickArrayBitmap,\n      exTickArrayBitmap,\n      tickSpacing,\n    );\n    for (const startIndex of allInitializedTickArrayIndex) {\n      const { publicKey: address } = getPdaTickArrayAddress(programId, poolId, startIndex);\n      result.push({\n        tickArrayStartIndex: startIndex,\n        tickArrayAddress: address,\n      });\n    }\n    return result;\n  }\n\n  public static getAllInitializedTickInTickArray(tickArray: TickArrayState): TickState[] {\n    return tickArray.ticks.filter((i) => i.liquidityGross.gtn(0));\n  }\n\n  public static searchLowBitFromStart(\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    currentTickArrayBitStartIndex: number,\n    expectedCount: number,\n    tickSpacing: number,\n  ): number[] {\n    const tickArrayBitmaps = [\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\n      tickArrayBitmap.slice(0, 8),\n      tickArrayBitmap.slice(8, 16),\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\n    const result: number[] = [];\n    while (currentTickArrayBitStartIndex >= -7680) {\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\n\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\n\n      currentTickArrayBitStartIndex--;\n      if (result.length === expectedCount) break;\n    }\n\n    const tickCount = TickQuery.tickCount(tickSpacing);\n    return result.map((i) => i * tickCount);\n  }\n\n  public static searchHightBitFromStart(\n    tickArrayBitmap: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n    currentTickArrayBitStartIndex: number,\n    expectedCount: number,\n    tickSpacing: number,\n  ): number[] {\n    const tickArrayBitmaps = [\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\n      tickArrayBitmap.slice(0, 8),\n      tickArrayBitmap.slice(8, 16),\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\n    const result: number[] = [];\n    while (currentTickArrayBitStartIndex < 7680) {\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\n\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\n\n      currentTickArrayBitStartIndex++;\n      if (result.length === expectedCount) break;\n    }\n\n    const tickCount = TickQuery.tickCount(tickSpacing);\n    return result.map((i) => i * tickCount);\n  }\n\n  public static checkIsOutOfBoundary(tick: number): boolean {\n    return tick < MIN_TICK || tick > MAX_TICK;\n  }\n\n  public static nextInitTick(\n    tickArrayCurrent: TickArray,\n    currentTickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n    t: boolean,\n  ): Tick | null {\n    const currentTickArrayStartIndex = TickQuery.getArrayStartIndex(currentTickIndex, tickSpacing);\n    if (currentTickArrayStartIndex != tickArrayCurrent.startTickIndex) {\n      return null;\n    }\n    let offsetInArray = Math.floor((currentTickIndex - tickArrayCurrent.startTickIndex) / tickSpacing);\n\n    if (zeroForOne) {\n      while (offsetInArray >= 0) {\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\n          return tickArrayCurrent.ticks[offsetInArray];\n        }\n        offsetInArray = offsetInArray - 1;\n      }\n    } else {\n      if (!t) offsetInArray = offsetInArray + 1;\n      while (offsetInArray < TICK_ARRAY_SIZE) {\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\n          return tickArrayCurrent.ticks[offsetInArray];\n        }\n        offsetInArray = offsetInArray + 1;\n      }\n    }\n    return null;\n  }\n\n  public static firstInitializedTick(tickArrayCurrent: TickArray, zeroForOne: boolean): Tick {\n    if (zeroForOne) {\n      let i = TICK_ARRAY_SIZE - 1;\n      while (i >= 0) {\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\n          return tickArrayCurrent.ticks[i];\n        }\n        i = i - 1;\n      }\n    } else {\n      let i = 0;\n      while (i < TICK_ARRAY_SIZE) {\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\n          return tickArrayCurrent.ticks[i];\n        }\n        i = i + 1;\n      }\n    }\n\n    throw Error(`firstInitializedTick check error: ${tickArrayCurrent} - ${zeroForOne}`);\n  }\n\n  public static _getTickPriceLegacy({\n    poolInfo,\n    tick,\n    baseIn,\n  }: {\n    poolInfo: ClmmPoolInfo;\n    tick: number;\n    baseIn: boolean;\n  }): ReturnTypeGetTickPrice {\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      tickSqrtPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    return baseIn\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\n  }\n\n  public static _getPriceAndTickLegacy({\n    poolInfo,\n    price,\n    baseIn,\n  }: {\n    poolInfo: ClmmPoolInfo;\n    price: Decimal;\n    baseIn: boolean;\n  }): ReturnTypeGetPriceAndTick {\n    const _price = baseIn ? price : new Decimal(1).div(price);\n\n    const tick = TickMath.getTickWithPriceAndTickspacing(\n      _price,\n      poolInfo.ammConfig.tickSpacing,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      tickSqrtPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\n  }\n\n  public static getTickPrice({\n    poolInfo,\n    tick,\n    baseIn,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    tick: number;\n    baseIn: boolean;\n  }): ReturnTypeGetTickPrice {\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      tickSqrtPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    return baseIn\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\n  }\n\n  public static getPriceAndTick({\n    poolInfo,\n    price,\n    baseIn,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    price: Decimal;\n    baseIn: boolean;\n  }): ReturnTypeGetPriceAndTick {\n    const _price = baseIn ? price : new Decimal(1).div(price);\n\n    const tick = TickMath.getTickWithPriceAndTickspacing(\n      _price,\n      poolInfo.config.tickSpacing,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      tickSqrtPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\n  }\n}\n","import BN from \"bn.js\";\n\nexport const ZERO = new BN(0);\nexport const ONE = new BN(1);\nexport const NEGATIVE_ONE = new BN(-1);\n\nexport const Q64 = new BN(1).shln(64);\nexport const Q128 = new BN(1).shln(128);\n\nexport const MaxU64 = Q64.sub(ONE);\n\nexport const U64Resolution = 64;\n\nexport const MaxUint128 = Q128.subn(1);\n\nexport const MIN_TICK = -443636;\nexport const MAX_TICK = -MIN_TICK;\n\nexport const MIN_SQRT_PRICE_X64: BN = new BN(\"4295048016\");\nexport const MAX_SQRT_PRICE_X64: BN = new BN(\"79226673521066979257578248091\");\n\nexport const MIN_SQRT_PRICE_X64_ADD_ONE: BN = new BN(\"4295048017\");\nexport const MAX_SQRT_PRICE_X64_SUB_ONE: BN = new BN(\"79226673521066979257578248090\");\n\n// export const MIN_TICK_ARRAY_START_INDEX = -307200;\n// export const MAX_TICK_ARRAY_START_INDEX = 306600;\n\nexport const BIT_PRECISION = 16;\nexport const LOG_B_2_X32 = \"59543866431248\";\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = \"184467440737095516\";\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = \"15793534762490258745\";\n\nexport const FEE_RATE_DENOMINATOR = new BN(10).pow(new BN(6));\n\nexport enum Fee {\n  rate_500 = 500, //  500 / 10e6 = 0.0005\n  rate_3000 = 3000, // 3000/ 10e6 = 0.003\n  rate_10000 = 10000, // 10000 /10e6 = 0.01\n}\nexport const TICK_SPACINGS: { [amount in Fee]: number } = {\n  [Fee.rate_500]: 10,\n  [Fee.rate_3000]: 60,\n  [Fee.rate_10000]: 200,\n};\n\nexport const mockCreatePoolInfo = {\n  version: 6,\n  liquidity: ZERO,\n  tickCurrent: 0,\n  feeGrowthGlobalX64A: ZERO,\n  feeGrowthGlobalX64B: ZERO,\n  protocolFeesTokenA: ZERO,\n  protocolFeesTokenB: ZERO,\n  swapInAmountTokenA: ZERO,\n  swapOutAmountTokenB: ZERO,\n  swapInAmountTokenB: ZERO,\n  swapOutAmountTokenA: ZERO,\n  tickArrayBitmap: [],\n\n  rewardInfos: [],\n\n  day: {\n    volume: 0,\n    volumeFee: 0,\n    feeA: 0,\n    feeB: 0,\n    feeApr: 0,\n    rewardApr: { A: 0, B: 0, C: 0 },\n    apr: 0,\n    priceMax: 0,\n    priceMin: 0,\n  },\n  week: {\n    volume: 0,\n    volumeFee: 0,\n    feeA: 0,\n    feeB: 0,\n    feeApr: 0,\n    rewardApr: { A: 0, B: 0, C: 0 },\n    apr: 0,\n    priceMax: 0,\n    priceMin: 0,\n  },\n  month: {\n    volume: 0,\n    volumeFee: 0,\n    feeA: 0,\n    feeB: 0,\n    feeApr: 0,\n    rewardApr: { A: 0, B: 0, C: 0 },\n    apr: 0,\n    priceMax: 0,\n    priceMin: 0,\n  },\n  tvl: 0,\n};\n\nexport const mockV3CreatePoolInfo = {\n  tvl: 0,\n  volumeQuote: 0,\n  mintAmountA: 0,\n  mintAmountB: 0,\n  rewardDefaultInfos: [],\n  farmUpcomingCount: 0,\n  farmOngoingCount: 0,\n  farmFinishedCount: 0,\n\n  day: {\n    volume: 0,\n    volumeQuote: 0,\n    volumeFee: 0,\n    apr: 0,\n    feeApr: 0,\n    priceMin: 0,\n    priceMax: 0,\n    rewardApr: [0],\n  },\n  week: {\n    volume: 0,\n    volumeQuote: 0,\n    volumeFee: 0,\n    apr: 0,\n    feeApr: 0,\n    priceMin: 0,\n    priceMax: 0,\n    rewardApr: [0],\n  },\n  month: {\n    volume: 0,\n    volumeQuote: 0,\n    volumeFee: 0,\n    apr: 0,\n    feeApr: 0,\n    priceMin: 0,\n    priceMax: 0,\n    rewardApr: [0],\n  },\n  pooltype: [],\n};\n\nexport const U64_IGNORE_RANGE = new BN(\"18446744073700000000\");\n","import { EpochInfo, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\n\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common/transfer\";\nimport { ReturnTypeGetLiquidityAmountOut, TickArrayBitmapExtensionType } from \"../type\";\nimport {\n  BIT_PRECISION,\n  Fee,\n  FEE_RATE_DENOMINATOR,\n  LOG_B_2_X32,\n  LOG_B_P_ERR_MARGIN_LOWER_X64,\n  LOG_B_P_ERR_MARGIN_UPPER_X64,\n  MAX_SQRT_PRICE_X64,\n  MAX_TICK,\n  MaxU64,\n  MaxUint128,\n  MIN_SQRT_PRICE_X64,\n  MIN_TICK,\n  NEGATIVE_ONE,\n  ONE,\n  Q128,\n  Q64,\n  U64Resolution,\n  ZERO,\n} from \"./constants\";\nimport { getPdaTickArrayAddress } from \"./pda\";\nimport { PoolUtils } from \"./pool\";\nimport { Tick, TickArray, TickUtils } from \"./tick\";\nimport { TickQuery } from \"./tickQuery\";\n\nexport class MathUtil {\n  public static mulDivRoundingUp(a: BN, b: BN, denominator: BN): BN {\n    const numerator = a.mul(b);\n    let result = numerator.div(denominator);\n    if (!numerator.mod(denominator).eq(ZERO)) {\n      result = result.add(ONE);\n    }\n    return result;\n  }\n\n  public static mulDivFloor(a: BN, b: BN, denominator: BN): BN {\n    if (denominator.eq(ZERO)) {\n      throw new Error(\"division by 0\");\n    }\n    return a.mul(b).div(denominator);\n  }\n\n  public static mulDivCeil(a: BN, b: BN, denominator: BN): BN {\n    if (denominator.eq(ZERO)) {\n      throw new Error(\"division by 0\");\n    }\n    const numerator = a.mul(b).add(denominator.sub(ONE));\n    return numerator.div(denominator);\n  }\n\n  public static x64ToDecimal(num: BN, decimalPlaces?: number): Decimal {\n    return new Decimal(num.toString()).div(Decimal.pow(2, 64)).toDecimalPlaces(decimalPlaces);\n  }\n\n  public static decimalToX64(num: Decimal): BN {\n    return new BN(num.mul(Decimal.pow(2, 64)).floor().toFixed());\n  }\n\n  public static wrappingSubU128(n0: BN, n1: BN): BN {\n    return n0.add(Q128).sub(n1).mod(Q128);\n  }\n}\n\n// sqrt price math\nfunction mulRightShift(val: BN, mulBy: BN): BN {\n  return signedRightShift(val.mul(mulBy), 64, 256);\n}\n\nfunction signedLeftShift(n0: BN, shiftBy: number, bitWidth: number): BN {\n  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\n  twosN0.imaskn(bitWidth + 1);\n  return twosN0.fromTwos(bitWidth);\n}\n\nfunction signedRightShift(n0: BN, shiftBy: number, bitWidth: number): BN {\n  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\n  twoN0.imaskn(bitWidth - shiftBy + 1);\n  return twoN0.fromTwos(bitWidth - shiftBy);\n}\n\nexport class SqrtPriceMath {\n  public static sqrtPriceX64ToPrice(sqrtPriceX64: BN, decimalsA: number, decimalsB: number): Decimal {\n    return MathUtil.x64ToDecimal(sqrtPriceX64)\n      .pow(2)\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\n  }\n\n  public static priceToSqrtPriceX64(price: Decimal, decimalsA: number, decimalsB: number): BN {\n    return MathUtil.decimalToX64(price.mul(Decimal.pow(10, decimalsB - decimalsA)).sqrt());\n  }\n\n  public static getNextSqrtPriceX64FromInput(sqrtPriceX64: BN, liquidity: BN, amountIn: BN, zeroForOne: boolean): BN {\n    if (!sqrtPriceX64.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\n    }\n    if (!liquidity.gt(ZERO)) {\n      throw new Error(\"liquidity must greater than 0\");\n    }\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountIn, true)\n      : this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountIn, true);\n  }\n\n  public static getNextSqrtPriceX64FromOutput(sqrtPriceX64: BN, liquidity: BN, amountOut: BN, zeroForOne: boolean): BN {\n    if (!sqrtPriceX64.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\n    }\n    if (!liquidity.gt(ZERO)) {\n      throw new Error(\"liquidity must greater than 0\");\n    }\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountOut, false)\n      : this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountOut, false);\n  }\n\n  private static getNextSqrtPriceFromTokenAmountARoundingUp(\n    sqrtPriceX64: BN,\n    liquidity: BN,\n    amount: BN,\n    add: boolean,\n  ): BN {\n    if (amount.eq(ZERO)) return sqrtPriceX64;\n    const liquidityLeftShift = liquidity.shln(U64Resolution);\n\n    if (add) {\n      const numerator1 = liquidityLeftShift;\n      const denominator = liquidityLeftShift.add(amount.mul(sqrtPriceX64));\n      if (denominator.gte(numerator1)) {\n        return MathUtil.mulDivCeil(numerator1, sqrtPriceX64, denominator);\n      }\n      return MathUtil.mulDivRoundingUp(numerator1, ONE, numerator1.div(sqrtPriceX64).add(amount));\n    } else {\n      const amountMulSqrtPrice = amount.mul(sqrtPriceX64);\n      if (!liquidityLeftShift.gt(amountMulSqrtPrice)) {\n        throw new Error(\"getNextSqrtPriceFromTokenAmountARoundingUp,liquidityLeftShift must gt amountMulSqrtPrice\");\n      }\n      const denominator = liquidityLeftShift.sub(amountMulSqrtPrice);\n      return MathUtil.mulDivCeil(liquidityLeftShift, sqrtPriceX64, denominator);\n    }\n  }\n\n  private static getNextSqrtPriceFromTokenAmountBRoundingDown(\n    sqrtPriceX64: BN,\n    liquidity: BN,\n    amount: BN,\n    add: boolean,\n  ): BN {\n    const deltaY = amount.shln(U64Resolution);\n    if (add) {\n      return sqrtPriceX64.add(deltaY.div(liquidity));\n    } else {\n      const amountDivLiquidity = MathUtil.mulDivRoundingUp(deltaY, ONE, liquidity);\n      if (!sqrtPriceX64.gt(amountDivLiquidity)) {\n        throw new Error(\"getNextSqrtPriceFromTokenAmountBRoundingDown sqrtPriceX64 must gt amountDivLiquidity\");\n      }\n      return sqrtPriceX64.sub(amountDivLiquidity);\n    }\n  }\n\n  public static getSqrtPriceX64FromTick(tick: number): BN {\n    if (!Number.isInteger(tick)) {\n      throw new Error(\"tick must be integer\");\n    }\n    if (tick < MIN_TICK || tick > MAX_TICK) {\n      throw new Error(\"tick must be in MIN_TICK and MAX_TICK\");\n    }\n    const tickAbs: number = tick < 0 ? tick * -1 : tick;\n\n    let ratio: BN = (tickAbs & 0x1) != 0 ? new BN(\"18445821805675395072\") : new BN(\"18446744073709551616\");\n    if ((tickAbs & 0x2) != 0) ratio = mulRightShift(ratio, new BN(\"18444899583751176192\"));\n    if ((tickAbs & 0x4) != 0) ratio = mulRightShift(ratio, new BN(\"18443055278223355904\"));\n    if ((tickAbs & 0x8) != 0) ratio = mulRightShift(ratio, new BN(\"18439367220385607680\"));\n    if ((tickAbs & 0x10) != 0) ratio = mulRightShift(ratio, new BN(\"18431993317065453568\"));\n    if ((tickAbs & 0x20) != 0) ratio = mulRightShift(ratio, new BN(\"18417254355718170624\"));\n    if ((tickAbs & 0x40) != 0) ratio = mulRightShift(ratio, new BN(\"18387811781193609216\"));\n    if ((tickAbs & 0x80) != 0) ratio = mulRightShift(ratio, new BN(\"18329067761203558400\"));\n    if ((tickAbs & 0x100) != 0) ratio = mulRightShift(ratio, new BN(\"18212142134806163456\"));\n    if ((tickAbs & 0x200) != 0) ratio = mulRightShift(ratio, new BN(\"17980523815641700352\"));\n    if ((tickAbs & 0x400) != 0) ratio = mulRightShift(ratio, new BN(\"17526086738831433728\"));\n    if ((tickAbs & 0x800) != 0) ratio = mulRightShift(ratio, new BN(\"16651378430235570176\"));\n    if ((tickAbs & 0x1000) != 0) ratio = mulRightShift(ratio, new BN(\"15030750278694412288\"));\n    if ((tickAbs & 0x2000) != 0) ratio = mulRightShift(ratio, new BN(\"12247334978884435968\"));\n    if ((tickAbs & 0x4000) != 0) ratio = mulRightShift(ratio, new BN(\"8131365268886854656\"));\n    if ((tickAbs & 0x8000) != 0) ratio = mulRightShift(ratio, new BN(\"3584323654725218816\"));\n    if ((tickAbs & 0x10000) != 0) ratio = mulRightShift(ratio, new BN(\"696457651848324352\"));\n    if ((tickAbs & 0x20000) != 0) ratio = mulRightShift(ratio, new BN(\"26294789957507116\"));\n    if ((tickAbs & 0x40000) != 0) ratio = mulRightShift(ratio, new BN(\"37481735321082\"));\n\n    if (tick > 0) ratio = MaxUint128.div(ratio);\n    return ratio;\n  }\n\n  public static getTickFromPrice(price: Decimal, decimalsA: number, decimalsB: number): number {\n    return SqrtPriceMath.getTickFromSqrtPriceX64(SqrtPriceMath.priceToSqrtPriceX64(price, decimalsA, decimalsB));\n  }\n\n  public static getTickFromSqrtPriceX64(sqrtPriceX64: BN): number {\n    if (sqrtPriceX64.gt(MAX_SQRT_PRICE_X64) || sqrtPriceX64.lt(MIN_SQRT_PRICE_X64)) {\n      throw new Error(\"Provided sqrtPrice is not within the supported sqrtPrice range.\");\n    }\n\n    const msb = sqrtPriceX64.bitLength() - 1;\n    const adjustedMsb = new BN(msb - 64);\n    const log2pIntegerX32 = signedLeftShift(adjustedMsb, 32, 128);\n\n    let bit = new BN(\"8000000000000000\", \"hex\");\n    let precision = 0;\n    let log2pFractionX64 = new BN(0);\n\n    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\n\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\n      r = r.mul(r);\n      const rMoreThanTwo = r.shrn(127);\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\n      bit = bit.shrn(1);\n      precision += 1;\n    }\n\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\n\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\n\n    const tickLow = signedRightShift(logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)), 64, 128).toNumber();\n    const tickHigh = signedRightShift(logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)), 64, 128).toNumber();\n\n    if (tickLow == tickHigh) {\n      return tickLow;\n    } else {\n      const derivedTickHighSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tickHigh);\n      return derivedTickHighSqrtPriceX64.lte(sqrtPriceX64) ? tickHigh : tickLow;\n    }\n  }\n}\n\n// tick math\nexport class TickMath {\n  public static getTickWithPriceAndTickspacing(\n    price: Decimal,\n    tickSpacing: number,\n    mintDecimalsA: number,\n    mintDecimalsB: number,\n  ): number {\n    const tick = SqrtPriceMath.getTickFromSqrtPriceX64(\n      SqrtPriceMath.priceToSqrtPriceX64(price, mintDecimalsA, mintDecimalsB),\n    );\n    let result = tick / tickSpacing;\n    if (result < 0) {\n      result = Math.floor(result);\n    } else {\n      result = Math.ceil(result);\n    }\n    return result * tickSpacing;\n  }\n\n  public static roundPriceWithTickspacing(\n    price: Decimal,\n    tickSpacing: number,\n    mintDecimalsA: number,\n    mintDecimalsB: number,\n  ): Decimal {\n    const tick = TickMath.getTickWithPriceAndTickspacing(price, tickSpacing, mintDecimalsA, mintDecimalsB);\n    const sqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    return SqrtPriceMath.sqrtPriceX64ToPrice(sqrtPriceX64, mintDecimalsA, mintDecimalsB);\n  }\n}\n\nexport class LiquidityMath {\n  public static addDelta(x: BN, y: BN): BN {\n    return x.add(y);\n  }\n\n  public static getTokenAmountAFromLiquidity(\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    roundUp: boolean,\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    if (!sqrtPriceX64A.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\n    }\n\n    const numerator1 = liquidity.ushln(U64Resolution);\n    const numerator2 = sqrtPriceX64B.sub(sqrtPriceX64A);\n\n    return roundUp\n      ? MathUtil.mulDivRoundingUp(MathUtil.mulDivCeil(numerator1, numerator2, sqrtPriceX64B), ONE, sqrtPriceX64A)\n      : MathUtil.mulDivFloor(numerator1, numerator2, sqrtPriceX64B).div(sqrtPriceX64A);\n  }\n\n  public static getTokenAmountBFromLiquidity(\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    roundUp: boolean,\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n    if (!sqrtPriceX64A.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\n    }\n\n    return roundUp\n      ? MathUtil.mulDivCeil(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64)\n      : MathUtil.mulDivFloor(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64);\n  }\n\n  public static getLiquidityFromTokenAmountA(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountA: BN, roundUp: boolean): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    const numerator = amountA.mul(sqrtPriceX64A).mul(sqrtPriceX64B);\n    const denominator = sqrtPriceX64B.sub(sqrtPriceX64A);\n    const result = numerator.div(denominator);\n\n    if (roundUp) {\n      return MathUtil.mulDivRoundingUp(result, ONE, MaxU64);\n    } else {\n      return result.shrn(U64Resolution);\n    }\n  }\n\n  public static getLiquidityFromTokenAmountB(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountB: BN): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n    return MathUtil.mulDivFloor(amountB, MaxU64, sqrtPriceX64B.sub(sqrtPriceX64A));\n  }\n\n  public static getLiquidityFromTokenAmounts(\n    sqrtPriceCurrentX64: BN,\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    amountA: BN,\n    amountB: BN,\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\n      return LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, amountA, false);\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceCurrentX64, sqrtPriceX64B, amountA, false);\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceCurrentX64, amountB);\n      return liquidity0.lt(liquidity1) ? liquidity0 : liquidity1;\n    } else {\n      return LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, amountB);\n    }\n  }\n\n  public static getAmountsFromLiquidity(\n    sqrtPriceCurrentX64: BN,\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    roundUp: boolean,\n  ): { amountA: BN; amountB: BN } {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\n      return {\n        amountA: LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\n        amountB: new BN(0),\n      };\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\n      const amountA = LiquidityMath.getTokenAmountAFromLiquidity(\n        sqrtPriceCurrentX64,\n        sqrtPriceX64B,\n        liquidity,\n        roundUp,\n      );\n      const amountB = LiquidityMath.getTokenAmountBFromLiquidity(\n        sqrtPriceX64A,\n        sqrtPriceCurrentX64,\n        liquidity,\n        roundUp,\n      );\n      return { amountA, amountB };\n    } else {\n      return {\n        amountA: new BN(0),\n        amountB: LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\n      };\n    }\n  }\n\n  public static getAmountsFromLiquidityWithSlippage(\n    sqrtPriceCurrentX64: BN,\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    amountMax: boolean,\n    roundUp: boolean,\n    amountSlippage: number,\n  ): { amountSlippageA: BN; amountSlippageB: BN } {\n    const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\n      sqrtPriceCurrentX64,\n      sqrtPriceX64A,\n      sqrtPriceX64B,\n      liquidity,\n      roundUp,\n    );\n    const coefficient = amountMax ? 1 + amountSlippage : 1 - amountSlippage;\n\n    const amount0Slippage = new BN(new Decimal(amountA.toString()).mul(coefficient).toFixed(0));\n    const amount1Slippage = new BN(new Decimal(amountB.toString()).mul(coefficient).toFixed(0));\n    return {\n      amountSlippageA: amount0Slippage,\n      amountSlippageB: amount1Slippage,\n    };\n  }\n\n  public static getAmountsOutFromLiquidity({\n    poolInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    slippage,\n    add,\n    epochInfo,\n    amountAddFee,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    tickLower: number;\n    tickUpper: number;\n    liquidity: BN;\n    slippage: number;\n    add: boolean;\n\n    epochInfo: EpochInfo;\n    amountAddFee: boolean;\n  }): ReturnTypeGetLiquidityAmountOut {\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n      new Decimal(poolInfo.price),\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\n\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\n\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\n\n    const [amountA, amountB] = [\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, amountAddFee),\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, amountAddFee),\n    ];\n    const [amountSlippageA, amountSlippageB] = [\n      getTransferAmountFeeV2(\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\n        poolInfo.mintA.extensions?.feeConfig,\n        epochInfo,\n        amountAddFee,\n      ),\n      getTransferAmountFeeV2(\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\n        poolInfo.mintB.extensions?.feeConfig,\n        epochInfo,\n        amountAddFee,\n      ),\n    ];\n\n    return {\n      liquidity,\n      amountA,\n      amountB,\n      amountSlippageA,\n      amountSlippageB,\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\n    };\n  }\n}\n\n// swap math\n\ntype SwapStep = {\n  sqrtPriceX64Next: BN;\n  amountIn: BN;\n  amountOut: BN;\n  feeAmount: BN;\n};\n\nexport interface StepComputations {\n  sqrtPriceStartX64: BN;\n  tickNext: number;\n  initialized: boolean;\n  sqrtPriceNextX64: BN;\n  amountIn: BN;\n  amountOut: BN;\n  feeAmount: BN;\n}\n\nexport abstract class SwapMath {\n  public static swapCompute(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayCache: { [key: string]: TickArray },\n    tickArrayBitmap: BN[],\n    tickarrayBitmapExtension: TickArrayBitmapExtensionType,\n    zeroForOne: boolean,\n    fee: number,\n    liquidity: BN,\n    currentTick: number,\n    tickSpacing: number,\n    currentSqrtPriceX64: BN,\n    amountSpecified: BN,\n    lastSavedTickArrayStartIndex: number,\n    sqrtPriceLimitX64?: BN,\n    catchLiquidityInsufficient = false,\n  ): {\n    allTrade: boolean;\n    amountSpecifiedRemaining: BN;\n    amountCalculated: BN;\n    feeAmount: BN;\n    sqrtPriceX64: BN;\n    liquidity: BN;\n    tickCurrent: number;\n    accounts: PublicKey[];\n  } {\n    if (amountSpecified.eq(ZERO)) {\n      throw new Error(\"amountSpecified must not be 0\");\n    }\n    if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\n\n    if (zeroForOne) {\n      if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\n        throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\n      }\n\n      if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\n        throw new Error(\"sqrtPriceX64 must smaller than current\");\n      }\n    } else {\n      if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\n        throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\n      }\n\n      if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\n        throw new Error(\"sqrtPriceX64 must greater than current\");\n      }\n    }\n    const baseInput = amountSpecified.gt(ZERO);\n\n    const state = {\n      amountSpecifiedRemaining: amountSpecified,\n      amountCalculated: ZERO,\n      sqrtPriceX64: currentSqrtPriceX64,\n      tick:\n        currentTick > lastSavedTickArrayStartIndex\n          ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\n          : lastSavedTickArrayStartIndex,\n      accounts: [] as PublicKey[],\n      liquidity,\n      feeAmount: new BN(0),\n    };\n    let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\n    let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\n    let loopCount = 0;\n    let t = !zeroForOne && tickArrayCurrent.startTickIndex === state.tick;\n    while (\n      !state.amountSpecifiedRemaining.eq(ZERO) &&\n      !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\n      // state.tick < MAX_TICK &&\n      // state.tick > MIN_TICK\n    ) {\n      if (loopCount > 10) {\n        // throw Error('liquidity limit')\n      }\n      const step: Partial<StepComputations> = {};\n      step.sqrtPriceStartX64 = state.sqrtPriceX64;\n\n      const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne, t);\n\n      let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\n      let tickArrayAddress: null | PublicKey = null;\n\n      if (!nextInitTick?.liquidityGross.gtn(0)) {\n        const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\n          {\n            tickCurrent: state.tick,\n            tickSpacing,\n            tickArrayBitmap,\n            exBitmapInfo: tickarrayBitmapExtension,\n          },\n          tickAarrayStartIndex,\n          zeroForOne,\n        );\n        if (!nextInitTickArrayIndex.isExist) {\n          if (catchLiquidityInsufficient) {\n            return {\n              allTrade: false,\n              amountSpecifiedRemaining: state.amountSpecifiedRemaining,\n              amountCalculated: state.amountCalculated,\n              feeAmount: state.feeAmount,\n              sqrtPriceX64: state.sqrtPriceX64,\n              liquidity: state.liquidity,\n              tickCurrent: state.tick,\n              accounts: state.accounts,\n            };\n          }\n          throw Error(\"swapCompute LiquidityInsufficient\");\n        }\n        tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\n\n        const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\n          programId,\n          poolId,\n          tickAarrayStartIndex,\n        );\n        tickArrayAddress = expectedNextTickArrayAddress;\n        tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\n\n        try {\n          nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\n        } catch (e) {\n          throw Error(\"not found next tick info\");\n        }\n      }\n\n      step.tickNext = nextInitTick.tick;\n      step.initialized = nextInitTick.liquidityGross.gtn(0);\n      if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\n        state.accounts.push(tickArrayAddress);\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\n      }\n      if (step.tickNext < MIN_TICK) {\n        step.tickNext = MIN_TICK;\n      } else if (step.tickNext > MAX_TICK) {\n        step.tickNext = MAX_TICK;\n      }\n\n      step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\n      let targetPrice: BN;\n      if (\n        (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\n        (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\n      ) {\n        targetPrice = sqrtPriceLimitX64;\n      } else {\n        targetPrice = step.sqrtPriceNextX64;\n      }\n      [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\n        state.sqrtPriceX64,\n        targetPrice,\n        state.liquidity,\n        state.amountSpecifiedRemaining,\n        fee,\n      );\n\n      state.feeAmount = state.feeAmount.add(step.feeAmount);\n\n      if (baseInput) {\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\n        state.amountCalculated = state.amountCalculated.sub(step.amountOut);\n      } else {\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\n        state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\n      }\n      if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\n        if (step.initialized) {\n          let liquidityNet = nextInitTick.liquidityNet;\n          if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n        }\n\n        t = step.tickNext != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === step.tickNext;\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext; //\n      } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\n        const _T = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\n        t = _T != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === _T;\n        state.tick = _T;\n      }\n      ++loopCount;\n    }\n\n    try {\n      const { nextStartIndex: tickAarrayStartIndex, isExist } = TickQuery.nextInitializedTickArray(\n        state.tick,\n        tickSpacing,\n        zeroForOne,\n        tickArrayBitmap,\n        tickarrayBitmapExtension,\n      );\n      if (isExist && lastSavedTickArrayStartIndex !== tickAarrayStartIndex) {\n        state.accounts.push(getPdaTickArrayAddress(programId, poolId, tickAarrayStartIndex).publicKey);\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\n      }\n    } catch (e) {\n      /* empty */\n    }\n\n    return {\n      allTrade: true,\n      amountSpecifiedRemaining: ZERO,\n      amountCalculated: state.amountCalculated,\n      feeAmount: state.feeAmount,\n      sqrtPriceX64: state.sqrtPriceX64,\n      liquidity: state.liquidity,\n      tickCurrent: state.tick,\n      accounts: state.accounts,\n    };\n  }\n  // public static swapCompute(\n  //   programId: PublicKey,\n  //   poolId: PublicKey,\n  //   tickArrayCache: { [key: string]: TickArray },\n  //   tickArrayBitmap: BN[],\n  //   tickarrayBitmapExtension: TickArrayBitmapExtensionType,\n  //   zeroForOne: boolean,\n  //   fee: number,\n  //   liquidity: BN,\n  //   currentTick: number,\n  //   tickSpacing: number,\n  //   currentSqrtPriceX64: BN,\n  //   amountSpecified: BN,\n  //   lastSavedTickArrayStartIndex: number,\n  //   sqrtPriceLimitX64?: BN,\n  // ): {\n  //   amountCalculated: BN;\n  //   feeAmount: BN;\n  //   sqrtPriceX64: BN;\n  //   liquidity: BN;\n  //   tickCurrent: number;\n  //   accounts: PublicKey[];\n  // } {\n  //   if (amountSpecified.eq(ZERO)) {\n  //     throw new Error(\"amountSpecified must not be 0\");\n  //   }\n  //   if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\n\n  //   if (zeroForOne) {\n  //     if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\n  //       throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\n  //     }\n\n  //     if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\n  //       throw new Error(\"sqrtPriceX64 must smaller than current\");\n  //     }\n  //   } else {\n  //     if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\n  //       throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\n  //     }\n\n  //     if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\n  //       throw new Error(\"sqrtPriceX64 must greater than current\");\n  //     }\n  //   }\n  //   const baseInput = amountSpecified.gt(ZERO);\n\n  //   const state = {\n  //     amountSpecifiedRemaining: amountSpecified,\n  //     amountCalculated: ZERO,\n  //     sqrtPriceX64: currentSqrtPriceX64,\n  //     tick:\n  //       currentTick > lastSavedTickArrayStartIndex\n  //         ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\n  //         : lastSavedTickArrayStartIndex,\n  //     accounts: [] as PublicKey[],\n  //     liquidity,\n  //     feeAmount: new BN(0),\n  //   };\n  //   let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\n  //   let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\n  //   let loopCount = 0;\n  //   while (\n  //     !state.amountSpecifiedRemaining.eq(ZERO) &&\n  //     !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\n  //     // state.tick < MAX_TICK &&\n  //     // state.tick > MIN_TICK\n  //   ) {\n  //     if (loopCount > 10) {\n  //       throw Error(\"liquidity limit\");\n  //     }\n  //     const step: Partial<StepComputations> = {};\n  //     step.sqrtPriceStartX64 = state.sqrtPriceX64;\n\n  //     const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne);\n\n  //     let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\n  //     let tickArrayAddress: PublicKey | null = null;\n\n  //     if (!nextInitTick?.liquidityGross.gtn(0)) {\n  //       const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\n  //         {\n  //           tickCurrent: state.tick,\n  //           tickSpacing,\n  //           tickArrayBitmap,\n  //           exBitmapInfo: tickarrayBitmapExtension,\n  //         },\n  //         tickAarrayStartIndex,\n  //         zeroForOne,\n  //       );\n  //       if (!nextInitTickArrayIndex.isExist) {\n  //         throw Error(\"swapCompute LiquidityInsufficient\");\n  //       }\n  //       tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\n\n  //       const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\n  //         programId,\n  //         poolId,\n  //         tickAarrayStartIndex,\n  //       );\n  //       tickArrayAddress = expectedNextTickArrayAddress;\n  //       tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\n\n  //       nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\n  //     }\n\n  //     step.tickNext = nextInitTick.tick;\n  //     step.initialized = nextInitTick.liquidityGross.gtn(0);\n  //     if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\n  //       state.accounts.push(tickArrayAddress);\n  //       lastSavedTickArrayStartIndex = tickAarrayStartIndex;\n  //     }\n  //     if (step.tickNext < MIN_TICK) {\n  //       step.tickNext = MIN_TICK;\n  //     } else if (step.tickNext > MAX_TICK) {\n  //       step.tickNext = MAX_TICK;\n  //     }\n\n  //     step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\n  //     let targetPrice: BN;\n  //     if (\n  //       (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\n  //       (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\n  //     ) {\n  //       targetPrice = sqrtPriceLimitX64;\n  //     } else {\n  //       targetPrice = step.sqrtPriceNextX64;\n  //     }\n  //     [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\n  //       state.sqrtPriceX64,\n  //       targetPrice,\n  //       state.liquidity,\n  //       state.amountSpecifiedRemaining,\n  //       fee,\n  //     );\n\n  //     state.feeAmount = state.feeAmount.add(step.feeAmount);\n\n  //     if (baseInput) {\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\n  //       state.amountCalculated = state.amountCalculated.sub(step.amountOut);\n  //     } else {\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\n  //       state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\n  //     }\n  //     if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\n  //       if (step.initialized) {\n  //         let liquidityNet = nextInitTick.liquidityNet;\n  //         if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\n  //         state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n  //       }\n  //       state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n  //     } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\n  //       state.tick = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\n  //     }\n  //     ++loopCount;\n  //   }\n\n  //   // try {\n  //   //   console.log('state.tick', state.tick)\n  //   //   const { nextStartIndex: tickAarrayStartIndex } = TickQuery.nextInitializedTickArray(\n  //   //     state.tick,\n  //   //     tickSpacing,\n  //   //     zeroForOne,\n  //   //     tickArrayBitmap,\n  //   //     tickarrayBitmapExtension,\n  //   //   );\n  //   //   if (\n  //   //     lastSavedTickArrayStartIndex !== tickAarrayStartIndex\n  //   //   ) {\n  //   //     state.accounts.push(getPdaTickArrayAddress(\n  //   //       programId,\n  //   //       poolId,\n  //   //       tickAarrayStartIndex,\n  //   //     ).publicKey)\n  //   //     lastSavedTickArrayStartIndex = tickAarrayStartIndex;\n  //   //   }\n  //   // } catch (e) { /* empty */ }\n\n  //   return {\n  //     amountCalculated: state.amountCalculated,\n  //     feeAmount: state.feeAmount,\n  //     sqrtPriceX64: state.sqrtPriceX64,\n  //     liquidity: state.liquidity,\n  //     tickCurrent: state.tick,\n  //     accounts: state.accounts,\n  //   };\n  // }\n\n  private static swapStepCompute(\n    sqrtPriceX64Current: BN,\n    sqrtPriceX64Target: BN,\n    liquidity: BN,\n    amountRemaining: BN,\n    feeRate: Fee,\n  ): [BN, BN, BN, BN] {\n    const swapStep: SwapStep = {\n      sqrtPriceX64Next: new BN(0),\n      amountIn: new BN(0),\n      amountOut: new BN(0),\n      feeAmount: new BN(0),\n    };\n\n    const zeroForOne = sqrtPriceX64Current.gte(sqrtPriceX64Target);\n    const baseInput = amountRemaining.gte(ZERO);\n\n    if (baseInput) {\n      const amountRemainingSubtractFee = MathUtil.mulDivFloor(\n        amountRemaining,\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate.toString())),\n        FEE_RATE_DENOMINATOR,\n      );\n      swapStep.amountIn = zeroForOne\n        ? LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, true)\n        : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, true);\n      if (amountRemainingSubtractFee.gte(swapStep.amountIn)) {\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\n      } else {\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromInput(\n          sqrtPriceX64Current,\n          liquidity,\n          amountRemainingSubtractFee,\n          zeroForOne,\n        );\n      }\n    } else {\n      swapStep.amountOut = zeroForOne\n        ? LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, false)\n        : LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, false);\n      if (amountRemaining.mul(NEGATIVE_ONE).gte(swapStep.amountOut)) {\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\n      } else {\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromOutput(\n          sqrtPriceX64Current,\n          liquidity,\n          amountRemaining.mul(NEGATIVE_ONE),\n          zeroForOne,\n        );\n      }\n    }\n\n    const reachTargetPrice = sqrtPriceX64Target.eq(swapStep.sqrtPriceX64Next);\n\n    if (zeroForOne) {\n      if (!(reachTargetPrice && baseInput)) {\n        swapStep.amountIn = LiquidityMath.getTokenAmountAFromLiquidity(\n          swapStep.sqrtPriceX64Next,\n          sqrtPriceX64Current,\n          liquidity,\n          true,\n        );\n      }\n\n      if (!(reachTargetPrice && !baseInput)) {\n        swapStep.amountOut = LiquidityMath.getTokenAmountBFromLiquidity(\n          swapStep.sqrtPriceX64Next,\n          sqrtPriceX64Current,\n          liquidity,\n          false,\n        );\n      }\n    } else {\n      swapStep.amountIn =\n        reachTargetPrice && baseInput\n          ? swapStep.amountIn\n          : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, swapStep.sqrtPriceX64Next, liquidity, true);\n      swapStep.amountOut =\n        reachTargetPrice && !baseInput\n          ? swapStep.amountOut\n          : LiquidityMath.getTokenAmountAFromLiquidity(\n            sqrtPriceX64Current,\n            swapStep.sqrtPriceX64Next,\n            liquidity,\n            false,\n          );\n    }\n\n    if (!baseInput && swapStep.amountOut.gt(amountRemaining.mul(NEGATIVE_ONE))) {\n      swapStep.amountOut = amountRemaining.mul(NEGATIVE_ONE);\n    }\n    if (baseInput && !swapStep.sqrtPriceX64Next.eq(sqrtPriceX64Target)) {\n      swapStep.feeAmount = amountRemaining.sub(swapStep.amountIn);\n    } else {\n      swapStep.feeAmount = MathUtil.mulDivCeil(\n        swapStep.amountIn,\n        new BN(feeRate),\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate)),\n      );\n    }\n    return [swapStep.sqrtPriceX64Next, swapStep.amountIn, swapStep.amountOut, swapStep.feeAmount];\n  }\n}\n","import BN from \"bn.js\";\nexport function u16ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(2);\n  const view = new DataView(arr);\n  view.setUint16(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function i16ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(2);\n  const view = new DataView(arr);\n  view.setInt16(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function u32ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(4);\n  const view = new DataView(arr);\n  view.setUint32(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function i32ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(4);\n  const view = new DataView(arr);\n  view.setInt32(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function leadingZeros(bitNum: number, data: BN): number {\n  let i = 0;\n  for (let j = bitNum - 1; j >= 0; j--) {\n    if (!data.testn(j)) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  return i;\n}\n\nexport function trailingZeros(bitNum: number, data: BN) {\n  let i = 0;\n  for (let j = 0; j < bitNum; j++) {\n    if (!data.testn(j)) {\n      i++;\n    } else {\n      break;\n    }\n  }\n  return i;\n}\n\nexport function isZero(bitNum: number, data: BN): boolean {\n  for (let i = 0; i < bitNum; i++) {\n    if (data.testn(i)) return false;\n  }\n  return true;\n}\n\nexport function mostSignificantBit(bitNum: number, data: BN): number | null {\n  if (isZero(bitNum, data)) return null;\n  else return leadingZeros(bitNum, data);\n}\n\nexport function leastSignificantBit(bitNum: number, data: BN): number | null {\n  if (isZero(bitNum, data)) return null;\n  else return trailingZeros(bitNum, data);\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { findProgramAddress, METADATA_PROGRAM_ID } from \"../../../common\";\n\nimport { i32ToBytes, u16ToBytes } from \"./util\";\n\nexport const AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\nexport const POOL_SEED = Buffer.from(\"pool\", \"utf8\");\nexport const POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\nexport const POOL_REWARD_VAULT_SEED = Buffer.from(\"pool_reward_vault\", \"utf8\");\nexport const POSITION_SEED = Buffer.from(\"position\", \"utf8\");\nexport const TICK_ARRAY_SEED = Buffer.from(\"tick_array\", \"utf8\");\nexport const OPERATION_SEED = Buffer.from(\"operation\", \"utf8\");\nexport const POOL_TICK_ARRAY_BITMAP_SEED = Buffer.from(\"pool_tick_array_bitmap_extension\", \"utf8\");\nexport const OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\n\nexport function getPdaAmmConfigId(\n  programId: PublicKey,\n  index: number,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\n}\n\nexport function getPdaPoolId(\n  programId: PublicKey,\n  ammConfigId: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\n}\n\nexport function getPdaPoolVaultId(\n  programId: PublicKey,\n  poolId: PublicKey,\n  vaultMint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), vaultMint.toBuffer()], programId);\n}\n\nexport function getPdaPoolRewardVaulId(\n  programId: PublicKey,\n  poolId: PublicKey,\n  rewardMint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_REWARD_VAULT_SEED, poolId.toBuffer(), rewardMint.toBuffer()], programId);\n}\n\nexport function getPdaTickArrayAddress(\n  programId: PublicKey,\n  poolId: PublicKey,\n  startIndex: number,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([TICK_ARRAY_SEED, poolId.toBuffer(), i32ToBytes(startIndex)], programId);\n}\n\nexport function getPdaProtocolPositionAddress(\n  programId: PublicKey,\n  poolId: PublicKey,\n  tickLower: number,\n  tickUpper: number,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [POSITION_SEED, poolId.toBuffer(), i32ToBytes(tickLower), i32ToBytes(tickUpper)],\n    programId,\n  );\n}\n\nexport function getPdaPersonalPositionAddress(\n  programId: PublicKey,\n  nftMint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POSITION_SEED, nftMint.toBuffer()], programId);\n}\n\nexport function getPdaMetadataKey(mint: PublicKey): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress(\n    [Buffer.from(\"metadata\", \"utf8\"), METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    METADATA_PROGRAM_ID,\n  );\n}\n\nexport function getPdaOperationAccount(programId: PublicKey): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([OPERATION_SEED], programId);\n}\n\nexport function getPdaExBitmapAccount(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_TICK_ARRAY_BITMAP_SEED, poolId.toBuffer()], programId);\n}\n\nexport function getPdaObservationAccount(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\n}\n\nexport const POOL_LOCK_ID_SEED = Buffer.from(\"locked_position\", \"utf8\");\nexport function getPdaLockPositionId(\n  programId: PublicKey,\n  positionId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_LOCK_ID_SEED, positionId.toBuffer()], programId);\n}\n\nexport function getPdaLockClPositionIdV2(\n  programId: PublicKey,\n  lockNftMint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_LOCK_ID_SEED, lockNftMint.toBuffer()], programId);\n}\n","import { Connection, EpochInfo, PublicKey } from \"@solana/web3.js\";\nimport { TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\nimport BN from \"bn.js\";\n\nimport {\n  ClmmPoolInfo,\n  ClmmPoolRewardInfo,\n  ClmmPoolRewardLayoutInfo,\n  ComputeClmmPoolInfo,\n  ReturnTypeComputeAmountOut,\n  ReturnTypeComputeAmountOutBaseOut,\n  ReturnTypeComputeAmountOutFormat,\n  ReturnTypeFetchExBitmaps,\n  ReturnTypeFetchMultiplePoolTickArrays,\n  ReturnTypeGetLiquidityAmountOut,\n  SDKParsedConcentratedInfo,\n  TickArrayBitmapExtensionType,\n} from \"../type\";\n\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token } from \"@/api/type\";\n\nimport Decimal from \"decimal.js\";\nimport {\n  getMultipleAccountsInfo,\n  getMultipleAccountsInfoWithCustomFlags,\n  getTransferAmountFeeV2,\n  minExpirationTime,\n  solToWSol,\n} from \"@/common\";\nimport { Percent, Price, Token, TokenAmount } from \"@/module\";\nimport { TokenAccountRaw } from \"@/raydium/account/types\";\nimport { PoolInfoLayout, PositionInfoLayout, TickArrayBitmapExtensionLayout, TickArrayLayout } from \"../layout\";\nimport { MAX_SQRT_PRICE_X64, MAX_TICK, MIN_SQRT_PRICE_X64, MIN_TICK, NEGATIVE_ONE, Q64, ZERO } from \"./constants\";\nimport { LiquidityMath, MathUtil, SqrtPriceMath, SwapMath } from \"./math\";\nimport { getPdaExBitmapAccount, getPdaPersonalPositionAddress, getPdaTickArrayAddress } from \"./pda\";\nimport { PositionUtils } from \"./position\";\nimport { TICK_ARRAY_BITMAP_SIZE, Tick, TickArray, TickUtils } from \"./tick\";\nimport { TickArrayBitmap, TickArrayBitmapExtensionUtils } from \"./tickarrayBitmap\";\nimport { TickQuery } from \"./tickQuery\";\n\nexport class PoolUtils {\n  public static getOutputAmountAndRemainAccounts(\n    poolInfo: ComputeClmmPoolInfo,\n    tickArrayCache: { [key: string]: TickArray },\n    inputTokenMint: PublicKey,\n    inputAmount: BN,\n    sqrtPriceLimitX64?: BN,\n    catchLiquidityInsufficient = false,\n  ): {\n    allTrade: boolean;\n    expectedAmountOut: BN;\n    remainingAccounts: PublicKey[];\n    executionPrice: BN;\n    feeAmount: BN;\n  } {\n    const zeroForOne = inputTokenMint.toBase58() === poolInfo.mintA.address;\n\n    const allNeededAccounts: PublicKey[] = [];\n    const {\n      isExist,\n      startIndex: firstTickArrayStartIndex,\n      nextAccountMeta,\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\n\n    // try {\n    //   const preTick = this.preInitializedTickArrayStartIndex(poolInfo, !zeroForOne)\n    //   if (preTick.isExist) {\n    //     const { publicKey: address } = getPdaTickArrayAddress(\n    //       poolInfo.programId,\n    //       poolInfo.id,\n    //       preTick.nextStartIndex\n    //     );\n    //     allNeededAccounts.push(address)\n    //   }\n    // } catch (e) { /* empty */ }\n\n    allNeededAccounts.push(nextAccountMeta);\n    const {\n      allTrade,\n      amountCalculated: outputAmount,\n      accounts: reaminAccounts,\n      sqrtPriceX64: executionPrice,\n      feeAmount,\n    } = SwapMath.swapCompute(\n      poolInfo.programId,\n      poolInfo.id,\n      tickArrayCache,\n      poolInfo.tickArrayBitmap,\n      poolInfo.exBitmapInfo,\n      zeroForOne,\n      poolInfo.ammConfig.tradeFeeRate,\n      poolInfo.liquidity,\n      poolInfo.tickCurrent,\n      poolInfo.tickSpacing,\n      poolInfo.sqrtPriceX64,\n      inputAmount,\n      firstTickArrayStartIndex,\n      sqrtPriceLimitX64,\n      catchLiquidityInsufficient,\n    );\n    allNeededAccounts.push(...reaminAccounts);\n    return {\n      allTrade,\n      expectedAmountOut: outputAmount.mul(NEGATIVE_ONE),\n      remainingAccounts: allNeededAccounts,\n      executionPrice,\n      feeAmount,\n    };\n  }\n\n  public static getInputAmountAndRemainAccounts(\n    poolInfo: ComputeClmmPoolInfo,\n    tickArrayCache: { [key: string]: TickArray },\n    outputTokenMint: PublicKey,\n    outputAmount: BN,\n    sqrtPriceLimitX64?: BN,\n  ): { expectedAmountIn: BN; remainingAccounts: PublicKey[]; executionPrice: BN; feeAmount: BN } {\n    const zeroForOne = outputTokenMint.toBase58() === poolInfo.mintB.address;\n\n    const allNeededAccounts: PublicKey[] = [];\n    const {\n      isExist,\n      startIndex: firstTickArrayStartIndex,\n      nextAccountMeta,\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\n\n    try {\n      const preTick = this.preInitializedTickArrayStartIndex(poolInfo, zeroForOne);\n      if (preTick.isExist) {\n        const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, preTick.nextStartIndex);\n        allNeededAccounts.push(address);\n      }\n    } catch (e) {\n      /* empty */\n    }\n\n    allNeededAccounts.push(nextAccountMeta);\n    const {\n      amountCalculated: inputAmount,\n      accounts: reaminAccounts,\n      sqrtPriceX64: executionPrice,\n      feeAmount,\n    } = SwapMath.swapCompute(\n      poolInfo.programId,\n      poolInfo.id,\n      tickArrayCache,\n      poolInfo.tickArrayBitmap,\n      poolInfo.exBitmapInfo,\n      zeroForOne,\n      poolInfo.ammConfig.tradeFeeRate,\n      poolInfo.liquidity,\n      poolInfo.tickCurrent,\n      poolInfo.tickSpacing,\n      poolInfo.sqrtPriceX64,\n      outputAmount.mul(NEGATIVE_ONE),\n      firstTickArrayStartIndex,\n      sqrtPriceLimitX64,\n    );\n    allNeededAccounts.push(...reaminAccounts);\n    return { expectedAmountIn: inputAmount, remainingAccounts: allNeededAccounts, executionPrice, feeAmount };\n  }\n\n  public static getFirstInitializedTickArray(\n    poolInfo: ComputeClmmPoolInfo,\n    zeroForOne: boolean,\n  ):\n    | { isExist: true; startIndex: number; nextAccountMeta: PublicKey }\n    | { isExist: false; startIndex: undefined; nextAccountMeta: undefined } {\n    const { isInitialized, startIndex } = PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.tickSpacing, [\n      poolInfo.tickCurrent,\n    ])\n      ? TickArrayBitmapExtensionUtils.checkTickArrayIsInit(\n          TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\n          poolInfo.tickSpacing,\n          poolInfo.exBitmapInfo,\n        )\n      : TickUtils.checkTickArrayIsInitialized(\n          TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\n          poolInfo.tickCurrent,\n          poolInfo.tickSpacing,\n        );\n\n    if (isInitialized) {\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, startIndex);\n      return {\n        isExist: true,\n        startIndex,\n        nextAccountMeta: address,\n      };\n    }\n    const { isExist, nextStartIndex } = this.nextInitializedTickArrayStartIndex(\n      poolInfo,\n      TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\n      zeroForOne,\n    );\n    if (isExist) {\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, nextStartIndex);\n      return {\n        isExist: true,\n        startIndex: nextStartIndex,\n        nextAccountMeta: address,\n      };\n    }\n    return { isExist: false, nextAccountMeta: undefined, startIndex: undefined };\n  }\n\n  public static preInitializedTickArrayStartIndex(\n    poolInfo: ComputeClmmPoolInfo,\n    zeroForOne: boolean,\n  ): { isExist: boolean; nextStartIndex: number } {\n    const currentOffset = Math.floor(poolInfo.tickCurrent / TickQuery.tickCount(poolInfo.tickSpacing));\n\n    const result: number[] = !zeroForOne\n      ? TickUtils.searchLowBitFromStart(\n          poolInfo.tickArrayBitmap,\n          poolInfo.exBitmapInfo,\n          currentOffset - 1,\n          1,\n          poolInfo.tickSpacing,\n        )\n      : TickUtils.searchHightBitFromStart(\n          poolInfo.tickArrayBitmap,\n          poolInfo.exBitmapInfo,\n          currentOffset + 1,\n          1,\n          poolInfo.tickSpacing,\n        );\n\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\n  }\n\n  public static nextInitializedTickArrayStartIndex(\n    poolInfo:\n      | {\n          tickCurrent: number;\n          tickSpacing: number;\n          tickArrayBitmap: BN[];\n          exBitmapInfo: TickArrayBitmapExtensionType;\n        }\n      | ClmmPoolInfo,\n    lastTickArrayStartIndex: number,\n    zeroForOne: boolean,\n  ): { isExist: boolean; nextStartIndex: number } {\n    lastTickArrayStartIndex = TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const { isInit: startIsInit, tickIndex: startIndex } = TickArrayBitmap.nextInitializedTickArrayStartIndex(\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\n        lastTickArrayStartIndex,\n        poolInfo.tickSpacing,\n        zeroForOne,\n      );\n      if (startIsInit) {\n        return { isExist: true, nextStartIndex: startIndex };\n      }\n      lastTickArrayStartIndex = startIndex;\n\n      const { isInit, tickIndex } = TickArrayBitmapExtensionUtils.nextInitializedTickArrayFromOneBitmap(\n        lastTickArrayStartIndex,\n        poolInfo.tickSpacing,\n        zeroForOne,\n        poolInfo.exBitmapInfo,\n      );\n      if (isInit) return { isExist: true, nextStartIndex: tickIndex };\n\n      lastTickArrayStartIndex = tickIndex;\n\n      if (lastTickArrayStartIndex < MIN_TICK || lastTickArrayStartIndex > MAX_TICK)\n        return { isExist: false, nextStartIndex: 0 };\n    }\n\n    // const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\n    //   poolInfo.tickArrayBitmap\n    // );\n    // const currentOffset = TickUtils.getTickArrayOffsetInBitmapByTick(\n    //   poolInfo.tickCurrent,\n    //   poolInfo.tickSpacing\n    // );\n    // const result: number[] = zeroForOne ? TickUtils.searchLowBitFromStart(\n    //   tickArrayBitmap,\n    //   currentOffset - 1,\n    //   0,\n    //   1,\n    //   poolInfo.tickSpacing\n    // ) : TickUtils.searchHightBitFromStart(\n    //   tickArrayBitmap,\n    //   currentOffset,\n    //   1024,\n    //   1,\n    //   poolInfo.tickSpacing\n    // );\n\n    // return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 }\n  }\n\n  public static async updatePoolRewardInfos({\n    connection,\n    apiPoolInfo,\n    chainTime,\n    poolLiquidity,\n    rewardInfos,\n  }: {\n    connection: Connection;\n    apiPoolInfo: ApiV3PoolInfoConcentratedItem;\n    chainTime: number;\n    poolLiquidity: BN;\n    rewardInfos: ClmmPoolRewardLayoutInfo[];\n  }): Promise<ClmmPoolRewardInfo[]> {\n    const nRewardInfo: ClmmPoolRewardInfo[] = [];\n    for (let i = 0; i < rewardInfos.length; i++) {\n      const _itemReward = rewardInfos[i];\n      const apiRewardProgram =\n        apiPoolInfo.rewardDefaultInfos[i]?.mint.programId ??\n        (await connection.getAccountInfo(_itemReward.tokenMint))?.owner;\n      if (apiRewardProgram === undefined) throw Error(\"get new reward mint info error\");\n\n      const itemReward: ClmmPoolRewardInfo = {\n        ..._itemReward,\n        perSecond: MathUtil.x64ToDecimal(_itemReward.emissionsPerSecondX64),\n        remainingRewards: undefined,\n        tokenProgramId: new PublicKey(apiRewardProgram),\n      };\n\n      if (itemReward.tokenMint.equals(PublicKey.default)) continue;\n      if (chainTime <= itemReward.openTime.toNumber() || poolLiquidity.eq(ZERO)) {\n        nRewardInfo.push(itemReward);\n        continue;\n      }\n\n      const latestUpdateTime = new BN(Math.min(itemReward.endTime.toNumber(), chainTime));\n      const timeDelta = latestUpdateTime.sub(itemReward.lastUpdateTime);\n      const rewardGrowthDeltaX64 = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, poolLiquidity);\n      const rewardGrowthGlobalX64 = itemReward.rewardGrowthGlobalX64.add(rewardGrowthDeltaX64);\n      const rewardEmissionedDelta = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, Q64);\n      const rewardTotalEmissioned = itemReward.rewardTotalEmissioned.add(rewardEmissionedDelta);\n      nRewardInfo.push({\n        ...itemReward,\n        rewardGrowthGlobalX64,\n        rewardTotalEmissioned,\n        lastUpdateTime: latestUpdateTime,\n      });\n    }\n    return nRewardInfo;\n  }\n\n  public static isOverflowDefaultTickarrayBitmap(tickSpacing: number, tickarrayStartIndexs: number[]): boolean {\n    const { maxTickBoundary, minTickBoundary } = this.tickRange(tickSpacing);\n\n    for (const tickIndex of tickarrayStartIndexs) {\n      const tickarrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\n\n      if (tickarrayStartIndex >= maxTickBoundary || tickarrayStartIndex < minTickBoundary) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public static tickRange(tickSpacing: number): {\n    maxTickBoundary: number;\n    minTickBoundary: number;\n  } {\n    let maxTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\n    let minTickBoundary = -maxTickBoundary;\n\n    if (maxTickBoundary > MAX_TICK) {\n      maxTickBoundary = TickQuery.getArrayStartIndex(MAX_TICK, tickSpacing) + TickQuery.tickCount(tickSpacing);\n    }\n    if (minTickBoundary < MIN_TICK) {\n      minTickBoundary = TickQuery.getArrayStartIndex(MIN_TICK, tickSpacing);\n    }\n    return { maxTickBoundary, minTickBoundary };\n  }\n\n  public static get_tick_array_offset(tickarrayStartIndex: number, tickSpacing: number): number {\n    if (!TickQuery.checkIsValidStartIndex(tickarrayStartIndex, tickSpacing)) {\n      throw new Error(\"No enough initialized tickArray\");\n    }\n\n    return (tickarrayStartIndex / TickQuery.tickCount(tickSpacing)) * TICK_ARRAY_BITMAP_SIZE;\n  }\n\n  static async fetchExBitmaps({\n    connection,\n    exBitmapAddress,\n    batchRequest,\n  }: {\n    connection: Connection;\n    exBitmapAddress: PublicKey[];\n    batchRequest: boolean;\n  }): Promise<ReturnTypeFetchExBitmaps> {\n    const fetchedBitmapAccount = await getMultipleAccountsInfoWithCustomFlags(\n      connection,\n      exBitmapAddress.map((i) => ({ pubkey: i })),\n      { batchRequest },\n    );\n\n    const returnTypeFetchExBitmaps: ReturnTypeFetchExBitmaps = {};\n    for (const item of fetchedBitmapAccount) {\n      if (item.accountInfo === null) continue;\n\n      returnTypeFetchExBitmaps[item.pubkey.toString()] = TickArrayBitmapExtensionLayout.decode(item.accountInfo.data);\n    }\n    return returnTypeFetchExBitmaps;\n  }\n\n  static async fetchMultiplePoolTickArrays({\n    connection,\n    poolKeys,\n    batchRequest,\n  }: {\n    connection: Connection;\n    poolKeys: Omit<ComputeClmmPoolInfo, \"ammConfig\">[];\n    batchRequest?: boolean;\n  }): Promise<ReturnTypeFetchMultiplePoolTickArrays> {\n    const tickArraysToPoolId: { [key: string]: PublicKey } = {};\n    const tickArrays: { pubkey: PublicKey }[] = [];\n    for (const itemPoolInfo of poolKeys) {\n      const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(\n        itemPoolInfo.tickCurrent,\n        itemPoolInfo.tickSpacing,\n      );\n      const startIndexArray = TickUtils.getInitializedTickArrayInRange(\n        itemPoolInfo.tickArrayBitmap,\n        itemPoolInfo.exBitmapInfo,\n        itemPoolInfo.tickSpacing,\n        currentTickArrayStartIndex,\n        7,\n      );\n      for (const itemIndex of startIndexArray) {\n        const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\n          itemPoolInfo.programId,\n          itemPoolInfo.id,\n          itemIndex,\n        );\n        tickArrays.push({ pubkey: tickArrayAddress });\n        tickArraysToPoolId[tickArrayAddress.toString()] = itemPoolInfo.id;\n      }\n    }\n\n    const fetchedTickArrays = await getMultipleAccountsInfoWithCustomFlags(connection, tickArrays, { batchRequest });\n\n    const tickArrayCache: ReturnTypeFetchMultiplePoolTickArrays = {};\n\n    for (const itemAccountInfo of fetchedTickArrays) {\n      if (!itemAccountInfo.accountInfo) continue;\n      const poolId = tickArraysToPoolId[itemAccountInfo.pubkey.toString()];\n      if (!poolId) continue;\n      if (tickArrayCache[poolId.toString()] === undefined) tickArrayCache[poolId.toString()] = {};\n\n      const accountLayoutData = TickArrayLayout.decode(itemAccountInfo.accountInfo.data);\n\n      tickArrayCache[poolId.toString()][accountLayoutData.startTickIndex] = {\n        ...accountLayoutData,\n        address: itemAccountInfo.pubkey,\n      };\n    }\n    return tickArrayCache;\n  }\n\n  // deprecated, new api doesn't need\n  static async fetchPoolsAccountPosition({\n    pools,\n    connection,\n    ownerInfo,\n    batchRequest = false,\n    updateOwnerRewardAndFee = true,\n  }: {\n    pools: SDKParsedConcentratedInfo[];\n    connection: Connection;\n    ownerInfo: { wallet: PublicKey; tokenAccounts: TokenAccountRaw[] };\n    batchRequest?: boolean;\n    updateOwnerRewardAndFee?: boolean;\n  }): Promise<SDKParsedConcentratedInfo[]> {\n    const programIds: PublicKey[] = [];\n\n    for (let index = 0; index < pools.length; index++) {\n      const accountInfo = pools[index];\n\n      if (accountInfo === null) continue;\n\n      if (!programIds.find((i) => i.equals(accountInfo.state.programId))) programIds.push(accountInfo.state.programId);\n    }\n\n    if (ownerInfo) {\n      const allMint = ownerInfo.tokenAccounts.map((i) => i.accountInfo.mint);\n      const allPositionKey: PublicKey[] = [];\n      for (const itemMint of allMint) {\n        for (const itemProgramId of programIds) {\n          allPositionKey.push(getPdaPersonalPositionAddress(itemProgramId, itemMint).publicKey);\n        }\n      }\n      const positionAccountInfos = await getMultipleAccountsInfo(connection, allPositionKey, { batchRequest });\n      const keyToTickArrayAddress: { [key: string]: PublicKey } = {};\n      for (const itemAccountInfo of positionAccountInfos) {\n        if (itemAccountInfo === null) continue;\n        // TODO: add check\n\n        const position = PositionInfoLayout.decode(itemAccountInfo.data);\n        const itemPoolId = position.poolId.toString();\n        const poolInfoA = pools.find((pool) => pool.state.id.toBase58() === itemPoolId);\n        if (poolInfoA === undefined) continue;\n\n        const poolInfo = poolInfoA.state;\n\n        const priceLower = TickUtils._getTickPriceLegacy({\n          poolInfo,\n          tick: position.tickLower,\n          baseIn: true,\n        });\n        const priceUpper = TickUtils._getTickPriceLegacy({\n          poolInfo,\n          tick: position.tickUpper,\n          baseIn: true,\n        });\n        const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\n          poolInfo.sqrtPriceX64,\n          priceLower.tickSqrtPriceX64,\n          priceUpper.tickSqrtPriceX64,\n          position.liquidity,\n          false,\n        );\n\n        const leverage = 1 / (1 - Math.sqrt(Math.sqrt(priceLower.price.div(priceUpper.price).toNumber())));\n\n        poolInfoA.positionAccount = [\n          ...(poolInfoA.positionAccount ?? []),\n          {\n            poolId: position.poolId,\n            nftMint: position.nftMint,\n\n            priceLower: priceLower.price,\n            priceUpper: priceUpper.price,\n            amountA,\n            amountB,\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n            liquidity: position.liquidity,\n            feeGrowthInsideLastX64A: position.feeGrowthInsideLastX64A,\n            feeGrowthInsideLastX64B: position.feeGrowthInsideLastX64B,\n            tokenFeesOwedA: position.tokenFeesOwedA,\n            tokenFeesOwedB: position.tokenFeesOwedB,\n            rewardInfos: position.rewardInfos.map((i) => ({\n              ...i,\n              pendingReward: new BN(0),\n            })),\n\n            leverage,\n            tokenFeeAmountA: new BN(0),\n            tokenFeeAmountB: new BN(0),\n          },\n        ];\n\n        const tickArrayLowerAddress = await TickUtils.getTickArrayAddressByTick(\n          poolInfoA.state.programId,\n          position.poolId,\n          position.tickLower,\n          poolInfoA.state.tickSpacing,\n        );\n        const tickArrayUpperAddress = await TickUtils.getTickArrayAddressByTick(\n          poolInfoA.state.programId,\n          position.poolId,\n          position.tickUpper,\n          poolInfoA.state.tickSpacing,\n        );\n        keyToTickArrayAddress[\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickLower}`\n        ] = tickArrayLowerAddress;\n        keyToTickArrayAddress[\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickUpper}`\n        ] = tickArrayUpperAddress;\n      }\n\n      if (updateOwnerRewardAndFee) {\n        const tickArrayKeys = Object.values(keyToTickArrayAddress);\n        const tickArrayDatas = await getMultipleAccountsInfo(connection, tickArrayKeys, { batchRequest });\n        const tickArrayLayout = {};\n        for (let index = 0; index < tickArrayKeys.length; index++) {\n          const tickArrayData = tickArrayDatas[index];\n          if (tickArrayData === null) continue;\n          const key = tickArrayKeys[index].toString();\n          tickArrayLayout[key] = TickArrayLayout.decode(tickArrayData.data);\n        }\n\n        for (const { state, positionAccount } of pools) {\n          if (!positionAccount) continue;\n          for (const itemPA of positionAccount) {\n            const keyLower = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickLower}`;\n            const keyUpper = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickUpper}`;\n            const tickArrayLower = tickArrayLayout[keyToTickArrayAddress[keyLower].toString()];\n            const tickArrayUpper = tickArrayLayout[keyToTickArrayAddress[keyUpper].toString()];\n            const tickLowerState: Tick =\n              tickArrayLower.ticks[TickUtils.getTickOffsetInArray(itemPA.tickLower, state.tickSpacing)];\n            const tickUpperState: Tick =\n              tickArrayUpper.ticks[TickUtils.getTickOffsetInArray(itemPA.tickUpper, state.tickSpacing)];\n            const { tokenFeeAmountA, tokenFeeAmountB } = await PositionUtils.GetPositionFees(\n              state,\n              itemPA,\n              tickLowerState,\n              tickUpperState,\n            );\n            const rewardInfos = await PositionUtils.GetPositionRewards(state, itemPA, tickLowerState, tickUpperState);\n            itemPA.tokenFeeAmountA = tokenFeeAmountA.gte(new BN(0)) ? tokenFeeAmountA : new BN(0);\n            itemPA.tokenFeeAmountB = tokenFeeAmountB.gte(new BN(0)) ? tokenFeeAmountB : new BN(0);\n            for (let i = 0; i < rewardInfos.length; i++) {\n              itemPA.rewardInfos[i].pendingReward = rewardInfos[i].gte(new BN(0)) ? rewardInfos[i] : new BN(0);\n            }\n          }\n        }\n      }\n    }\n    return pools;\n  }\n\n  static computeAmountOut({\n    poolInfo,\n    tickArrayCache,\n    baseMint,\n    epochInfo,\n    amountIn,\n    slippage,\n    priceLimit = new Decimal(0),\n    catchLiquidityInsufficient = false,\n  }: {\n    poolInfo: ComputeClmmPoolInfo;\n    tickArrayCache: { [key: string]: TickArray };\n    baseMint: PublicKey;\n\n    epochInfo: EpochInfo;\n\n    amountIn: BN;\n    slippage: number;\n    priceLimit?: Decimal;\n    catchLiquidityInsufficient: boolean;\n  }): ReturnTypeComputeAmountOut {\n    let sqrtPriceLimitX64: BN;\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\n    const [baseFeeConfig, outFeeConfig] = isBaseIn\n      ? [poolInfo.mintA.extensions.feeConfig, poolInfo.mintB.extensions.feeConfig]\n      : [poolInfo.mintB.extensions.feeConfig, poolInfo.mintA.extensions.feeConfig];\n\n    if (priceLimit.equals(new Decimal(0))) {\n      sqrtPriceLimitX64 = isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\n    } else {\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\n        priceLimit,\n        poolInfo.mintA.decimals,\n        poolInfo.mintB.decimals,\n      );\n    }\n\n    const realAmountIn = getTransferAmountFeeV2(amountIn, baseFeeConfig, epochInfo, false);\n\n    const {\n      allTrade,\n      expectedAmountOut: _expectedAmountOut,\n      remainingAccounts,\n      executionPrice: _executionPriceX64,\n      feeAmount,\n    } = PoolUtils.getOutputAmountAndRemainAccounts(\n      poolInfo,\n      tickArrayCache,\n      baseMint,\n      realAmountIn.amount.sub(realAmountIn.fee ?? ZERO),\n      sqrtPriceLimitX64,\n      catchLiquidityInsufficient,\n    );\n\n    const amountOut = getTransferAmountFeeV2(_expectedAmountOut, outFeeConfig, epochInfo, false);\n\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      _executionPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\n\n    const _minAmountOut = _expectedAmountOut\n      .mul(new BN(Math.floor((1 - slippage) * 10000000000)))\n      .div(new BN(10000000000));\n    const minAmountOut = getTransferAmountFeeV2(_minAmountOut, outFeeConfig, epochInfo, false);\n\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\n\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\n    const _denominator = poolPrice;\n    const priceImpact = new Percent(\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\n    );\n\n    return {\n      allTrade,\n      realAmountIn,\n      amountOut,\n      minAmountOut,\n      expirationTime: minExpirationTime(realAmountIn.expirationTime, amountOut.expirationTime),\n      currentPrice: poolInfo.currentPrice,\n      executionPrice,\n      priceImpact,\n      fee: feeAmount,\n      remainingAccounts,\n      executionPriceX64: _executionPriceX64,\n    };\n  }\n\n  static computeAmountOutFormat({\n    poolInfo,\n    tickArrayCache,\n    amountIn,\n    tokenOut: _tokenOut,\n    slippage,\n    epochInfo,\n    catchLiquidityInsufficient = false,\n  }: {\n    poolInfo: ComputeClmmPoolInfo;\n    tickArrayCache: { [key: string]: TickArray };\n    amountIn: BN;\n    tokenOut: ApiV3Token;\n    slippage: number;\n    epochInfo: EpochInfo;\n    catchLiquidityInsufficient?: boolean;\n  }): ReturnTypeComputeAmountOutFormat {\n    const baseIn = _tokenOut.address === poolInfo.mintB.address;\n    const [inputMint, outMint] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\n    const [baseToken, outToken] = [\n      new Token({\n        ...inputMint,\n        mint: inputMint.address,\n        isToken2022: inputMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\n      }),\n      new Token({\n        ...outMint,\n        mint: outMint.address,\n        isToken2022: outMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\n      }),\n    ];\n\n    const {\n      allTrade,\n      realAmountIn: _realAmountIn,\n      amountOut: _amountOut,\n      minAmountOut: _minAmountOut,\n      expirationTime,\n      currentPrice,\n      executionPrice,\n      priceImpact,\n      fee,\n      remainingAccounts,\n      executionPriceX64,\n    } = PoolUtils.computeAmountOut({\n      poolInfo,\n      tickArrayCache,\n      baseMint: new PublicKey(inputMint.address),\n      amountIn,\n      slippage,\n      epochInfo,\n      catchLiquidityInsufficient,\n    });\n\n    const realAmountIn = {\n      ..._realAmountIn,\n      amount: new TokenAmount(baseToken, _realAmountIn.amount),\n      fee: _realAmountIn.fee === undefined ? undefined : new TokenAmount(baseToken, _realAmountIn.fee),\n    };\n\n    const amountOut = {\n      ..._amountOut,\n      amount: new TokenAmount(outToken, _amountOut.amount),\n      fee: _amountOut.fee === undefined ? undefined : new TokenAmount(outToken, _amountOut.fee),\n    };\n    const minAmountOut = {\n      ..._minAmountOut,\n      amount: new TokenAmount(outToken, _minAmountOut.amount),\n      fee: _minAmountOut.fee === undefined ? undefined : new TokenAmount(outToken, _minAmountOut.fee),\n    };\n\n    const _currentPrice = new Price({\n      baseToken,\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\n      quoteToken: outToken,\n      numerator: currentPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\n    });\n    const _executionPrice = new Price({\n      baseToken,\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\n      quoteToken: outToken,\n      numerator: executionPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\n    });\n    const _fee = new TokenAmount(baseToken, fee);\n\n    return {\n      allTrade,\n      realAmountIn,\n      amountOut,\n      minAmountOut,\n      expirationTime,\n      currentPrice: _currentPrice,\n      executionPrice: _executionPrice,\n      priceImpact,\n      fee: _fee,\n      remainingAccounts,\n      executionPriceX64,\n    };\n  }\n\n  static computeAmountIn({\n    poolInfo,\n    tickArrayCache,\n    baseMint,\n    epochInfo,\n    amountOut,\n    slippage,\n    priceLimit = new Decimal(0),\n  }: {\n    poolInfo: ComputeClmmPoolInfo;\n    tickArrayCache: { [key: string]: TickArray };\n    baseMint: PublicKey;\n\n    epochInfo: EpochInfo;\n\n    amountOut: BN;\n    slippage: number;\n    priceLimit?: Decimal;\n  }): ReturnTypeComputeAmountOutBaseOut {\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\n    const feeConfigs = {\n      [poolInfo.mintA.address]: poolInfo.mintA.extensions.feeConfig,\n      [poolInfo.mintB.address]: poolInfo.mintB.extensions.feeConfig,\n    };\n\n    let sqrtPriceLimitX64: BN;\n    if (priceLimit.equals(new Decimal(0))) {\n      sqrtPriceLimitX64 = !isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\n    } else {\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\n        priceLimit,\n        poolInfo.mintA.decimals,\n        poolInfo.mintB.decimals,\n      );\n    }\n\n    const realAmountOut = getTransferAmountFeeV2(amountOut, feeConfigs[baseMint.toString()], epochInfo, true);\n\n    const {\n      expectedAmountIn: _expectedAmountIn,\n      remainingAccounts,\n      executionPrice: _executionPriceX64,\n      feeAmount,\n    } = PoolUtils.getInputAmountAndRemainAccounts(\n      poolInfo,\n      tickArrayCache,\n      baseMint,\n      realAmountOut.amount.sub(realAmountOut.fee ?? ZERO),\n      sqrtPriceLimitX64,\n    );\n\n    const inMint = isBaseIn ? poolInfo.mintB.address : poolInfo.mintA.address;\n\n    const amountIn = getTransferAmountFeeV2(_expectedAmountIn, feeConfigs[inMint], epochInfo, false);\n    // const amountIn = getTransferAmountFee(\n    //   _expectedAmountIn,\n    //   token2022Infos[inMint.toString()]?.feeConfig,\n    //   epochInfo,\n    //   true,\n    // );\n\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n      _executionPriceX64,\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\n\n    const _maxAmountIn = _expectedAmountIn\n      .mul(new BN(Math.floor((1 + slippage) * 10000000000)))\n      .div(new BN(10000000000));\n    // const maxAmountIn = getTransferAmountFee(\n    //   _maxAmountIn,\n    //   token2022Infos[inMint.toString()]?.feeConfig,\n    //   epochInfo,\n    //   true,\n    // );\n    const maxAmountIn = getTransferAmountFeeV2(_maxAmountIn, feeConfigs[inMint], epochInfo, true);\n\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\n\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\n    const _denominator = poolPrice;\n    const priceImpact = new Percent(\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\n    );\n\n    return {\n      amountIn,\n      maxAmountIn,\n      realAmountOut,\n      expirationTime: minExpirationTime(amountIn.expirationTime, realAmountOut.expirationTime),\n      currentPrice: poolInfo.currentPrice,\n      executionPrice,\n      priceImpact,\n      fee: feeAmount,\n\n      remainingAccounts,\n    };\n  }\n\n  static estimateAprsForPriceRangeMultiplier({\n    poolInfo,\n    aprType,\n    positionTickLowerIndex,\n    positionTickUpperIndex,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    aprType: \"day\" | \"week\" | \"month\";\n\n    positionTickLowerIndex: number;\n    positionTickUpperIndex: number;\n  }): {\n    feeApr: number;\n    rewardsApr: number[];\n    apr: number;\n  } {\n    const aprInfo = poolInfo[aprType];\n\n    const priceLower = TickUtils.getTickPrice({\n      poolInfo,\n      tick: positionTickLowerIndex,\n      baseIn: true,\n    }).price.toNumber();\n    const priceUpper = TickUtils.getTickPrice({\n      poolInfo,\n      tick: positionTickUpperIndex,\n      baseIn: true,\n    }).price.toNumber();\n\n    const _minPrice = Math.max(priceLower, aprInfo.priceMin);\n    const _maxPrice = Math.min(priceUpper, aprInfo.priceMax);\n\n    const sub = _maxPrice - _minPrice;\n\n    const userRange = priceUpper - priceLower;\n    const tradeRange = aprInfo.priceMax - aprInfo.priceMin;\n\n    let p: number;\n\n    if (sub <= 0) p = 0;\n    else if (userRange === sub) p = tradeRange / sub;\n    else if (tradeRange === sub) p = sub / userRange;\n    else p = (sub / tradeRange) * (sub / userRange);\n\n    return {\n      feeApr: aprInfo.feeApr * p,\n      rewardsApr: [(aprInfo.rewardApr[0] ?? 0) * p, (aprInfo.rewardApr[1] ?? 0) * p, (aprInfo.rewardApr[2] ?? 0) * p],\n      apr: aprInfo.apr * p,\n    };\n  }\n\n  static estimateAprsForPriceRangeDelta({\n    poolInfo,\n    poolLiquidity,\n    aprType,\n    mintPrice,\n    liquidity,\n    positionTickLowerIndex,\n    positionTickUpperIndex,\n    chainTime,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolLiquidity: BN;\n    aprType: \"day\" | \"week\" | \"month\";\n\n    mintPrice: { [mint: string]: { value: number } };\n\n    liquidity: BN;\n    positionTickLowerIndex: number;\n    positionTickUpperIndex: number;\n\n    chainTime: number;\n  }): {\n    feeApr: number;\n    rewardsApr: number[];\n    apr: number;\n  } {\n    const aprTypeDay = aprType === \"day\" ? 1 : aprType === \"week\" ? 7 : aprType === \"month\" ? 30 : 0;\n    const aprInfo = poolInfo[aprType];\n    const mintPriceA = mintPrice[solToWSol(poolInfo.mintA.address).toString()];\n    const mintPriceB = mintPrice[solToWSol(poolInfo.mintB.address).toString()];\n    const mintDecimalsA = poolInfo.mintA.decimals;\n    const mintDecimalsB = poolInfo.mintB.decimals;\n\n    if (!aprInfo || !mintPriceA || !mintPriceB) return { feeApr: 0, rewardsApr: [0, 0, 0], apr: 0 };\n\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n      new Decimal(poolInfo.price),\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickLowerIndex);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickUpperIndex);\n\n    const { amountSlippageA: poolLiquidityA, amountSlippageB: poolLiquidityB } =\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\n        sqrtPriceX64,\n        sqrtPriceX64A,\n        sqrtPriceX64B,\n        poolLiquidity,\n        false,\n        false,\n        0,\n      );\n\n    const { amountSlippageA: userLiquidityA, amountSlippageB: userLiquidityB } =\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\n        sqrtPriceX64,\n        sqrtPriceX64A,\n        sqrtPriceX64B,\n        liquidity,\n        false,\n        false,\n        0,\n      );\n\n    const poolTvl = new Decimal(poolLiquidityA.toString())\n      .div(new Decimal(10).pow(mintDecimalsA))\n      .mul(mintPriceA.value)\n      .add(new Decimal(poolLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\n    const userTvl = new Decimal(userLiquidityA.toString())\n      .div(new Decimal(10).pow(mintDecimalsA))\n      .mul(mintPriceA.value)\n      .add(new Decimal(userLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\n\n    const p = new Decimal(1).div(poolTvl.add(userTvl));\n\n    const feesPerYear = new Decimal(aprInfo.volumeFee).mul(365).div(aprTypeDay);\n    const feeApr = feesPerYear.mul(p).mul(100).toNumber();\n\n    const SECONDS_PER_YEAR = 3600 * 24 * 365;\n\n    const rewardsApr = poolInfo.rewardDefaultInfos.map((i) => {\n      const iDecimal = i.mint.decimals;\n      const iPrice = mintPrice[i.mint.address];\n\n      if (\n        chainTime < ((i as any).startTime ?? 0) ||\n        chainTime > ((i as any).endTime ?? 0) ||\n        !i.perSecond ||\n        !iPrice ||\n        iDecimal === undefined\n      )\n        return 0;\n\n      return new Decimal(iPrice.value)\n        .mul(new Decimal(i.perSecond).mul(SECONDS_PER_YEAR))\n        .div(new Decimal(10).pow(iDecimal))\n        .mul(p)\n        .mul(100)\n        .toNumber();\n    });\n\n    return {\n      feeApr,\n      rewardsApr,\n      apr: feeApr + rewardsApr.reduce((a, b) => a + b, 0),\n    };\n  }\n\n  static getLiquidityAmountOutFromAmountIn({\n    poolInfo,\n    inputA,\n    tickLower,\n    tickUpper,\n    amount,\n    slippage,\n    add,\n    epochInfo,\n    amountHasFee,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    inputA: boolean;\n    tickLower: number;\n    tickUpper: number;\n    amount: BN;\n    slippage: number;\n    add: boolean;\n    epochInfo: EpochInfo;\n    amountHasFee: boolean;\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n      new Decimal(poolInfo.price),\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\n\n    const coefficient = add ? 1 - slippage : 1 + slippage;\n    const addFeeAmount = getTransferAmountFeeV2(\n      amount,\n      poolInfo[inputA ? \"mintA\" : \"mintB\"].extensions?.feeConfig,\n      epochInfo,\n      !amountHasFee,\n    );\n    const _amount = new BN(\n      new Decimal(addFeeAmount.amount.sub(addFeeAmount.fee ?? ZERO).toString()).mul(coefficient).toFixed(0),\n    );\n\n    let liquidity: BN;\n    if (sqrtPriceX64.lte(sqrtPriceX64A)) {\n      liquidity = inputA\n        ? LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, _amount, !add)\n        : new BN(0);\n    } else if (sqrtPriceX64.lte(sqrtPriceX64B)) {\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64, sqrtPriceX64B, _amount, !add);\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64, _amount);\n      liquidity = inputA ? liquidity0 : liquidity1;\n    } else {\n      liquidity = inputA\n        ? new BN(0)\n        : LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, _amount);\n    }\n\n    return PoolUtils.getAmountsFromLiquidity({\n      epochInfo,\n      poolInfo,\n      tickLower,\n      tickUpper,\n      liquidity,\n      slippage,\n      add,\n    });\n  }\n\n  static async getAmountsFromLiquidity({\n    epochInfo,\n    poolInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    slippage,\n    add,\n  }: {\n    epochInfo: EpochInfo;\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    tickLower: number;\n    tickUpper: number;\n    liquidity: BN;\n    slippage: number;\n    add: boolean;\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\n\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\n\n    const amounts = LiquidityMath.getAmountsFromLiquidity(\n      SqrtPriceMath.priceToSqrtPriceX64(new Decimal(poolInfo.price), poolInfo.mintA.decimals, poolInfo.mintB.decimals),\n      sqrtPriceX64A,\n      sqrtPriceX64B,\n      liquidity,\n      add,\n    );\n    const [amountA, amountB] = [\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\n    ];\n    const [amountSlippageA, amountSlippageB] = [\n      getTransferAmountFeeV2(\n        amounts.amountA.muln(coefficientRe),\n        poolInfo.mintA.extensions?.feeConfig,\n        epochInfo,\n        true,\n      ),\n      getTransferAmountFeeV2(\n        amounts.amountB.muln(coefficientRe),\n        poolInfo.mintB.extensions?.feeConfig,\n        epochInfo,\n        true,\n      ),\n    ];\n\n    return {\n      liquidity,\n      amountA,\n      amountB,\n      amountSlippageA,\n      amountSlippageB,\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\n    };\n  }\n\n  static async fetchComputeMultipleClmmInfo({\n    connection,\n    poolList,\n    rpcDataMap = {},\n  }: {\n    rpcDataMap?: Record<string, ReturnType<typeof PoolInfoLayout.decode>>;\n    connection: Connection;\n    poolList: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">[];\n  }): Promise<Record<string, ComputeClmmPoolInfo>> {\n    const fetchRpcList = poolList.filter((p) => !rpcDataMap[p.id]).map((p) => new PublicKey(p.id));\n    const rpcRes = await getMultipleAccountsInfo(connection, fetchRpcList);\n    rpcRes.forEach((r, idx) => {\n      if (!r) return;\n      rpcDataMap[fetchRpcList[idx].toBase58()] = PoolInfoLayout.decode(r.data);\n    });\n\n    const pdaList = poolList.map(\n      (poolInfo) => getPdaExBitmapAccount(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\n    );\n\n    const exBitData = await PoolUtils.fetchExBitmaps({\n      connection,\n      exBitmapAddress: pdaList,\n      batchRequest: false,\n    });\n\n    return poolList.reduce(\n      (acc, cur) => ({\n        ...acc,\n        [cur.id]: {\n          ...rpcDataMap[cur.id],\n          id: new PublicKey(cur.id),\n          version: 6,\n          programId: new PublicKey(cur.programId),\n          mintA: cur.mintA,\n          mintB: cur.mintB,\n          ammConfig: {\n            ...cur.config,\n            id: new PublicKey(cur.config.id),\n            fundOwner: \"\",\n          },\n          currentPrice: new Decimal(cur.price),\n          exBitmapAccount: getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey,\n          exBitmapInfo:\n            exBitData[getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey.toBase58()],\n          startTime: rpcDataMap[cur.id].startTime.toNumber(),\n          rewardInfos: rpcDataMap[cur.id].rewardInfos,\n        },\n      }),\n      {} as Record<string, ComputeClmmPoolInfo>,\n    );\n  }\n\n  static async fetchComputeClmmInfo({\n    connection,\n    poolInfo,\n    rpcData,\n  }: {\n    connection: Connection;\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">;\n    rpcData?: ReturnType<typeof PoolInfoLayout.decode>;\n  }): Promise<ComputeClmmPoolInfo> {\n    return (\n      await this.fetchComputeMultipleClmmInfo({\n        connection,\n        rpcDataMap: rpcData ? { [poolInfo.id]: rpcData } : undefined,\n        poolList: [poolInfo],\n      })\n    )[poolInfo.id];\n  }\n}\n\nexport function getLiquidityFromAmounts({\n  poolInfo,\n  tickLower,\n  tickUpper,\n  amountA,\n  amountB,\n  slippage,\n  add,\n  epochInfo,\n  amountHasFee,\n}: {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  tickLower: number;\n  tickUpper: number;\n  amountA: BN;\n  amountB: BN;\n  slippage: number;\n  add: boolean;\n  epochInfo: EpochInfo;\n  amountHasFee: boolean;\n}): ReturnTypeGetLiquidityAmountOut {\n  const [_tickLower, _tickUpper, _amountA, _amountB] =\n    tickLower < tickUpper ? [tickLower, tickUpper, amountA, amountB] : [tickUpper, tickLower, amountB, amountA];\n  const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n    new Decimal(poolInfo.price),\n    poolInfo.mintA.decimals,\n    poolInfo.mintB.decimals,\n  );\n  const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(_tickLower);\n  const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(_tickUpper);\n\n  const [amountFeeA, amountFeeB] = [\n    getTransferAmountFeeV2(_amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, !amountHasFee),\n    getTransferAmountFeeV2(_amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, !amountHasFee),\n  ];\n\n  const liquidity = LiquidityMath.getLiquidityFromTokenAmounts(\n    sqrtPriceX64,\n    sqrtPriceX64A,\n    sqrtPriceX64B,\n    amountFeeA.amount.sub(amountFeeA.fee ?? ZERO),\n    amountFeeB.amount.sub(amountFeeB.fee ?? ZERO),\n  );\n\n  return LiquidityMath.getAmountsOutFromLiquidity({\n    poolInfo,\n    tickLower,\n    tickUpper,\n    liquidity,\n    slippage,\n    add,\n    epochInfo,\n    amountAddFee: !amountHasFee,\n  });\n}\n\nconst mockRewardData = {\n  volume: 0,\n  volumeQuote: 0,\n  volumeFee: 0,\n  apr: 0,\n  feeApr: 0,\n  priceMin: 0,\n  priceMax: 0,\n  rewardApr: [],\n};\n\nexport function clmmComputeInfoToApiInfo(pool: ComputeClmmPoolInfo): ApiV3PoolInfoConcentratedItem {\n  return {\n    ...pool,\n    type: \"Concentrated\",\n    programId: pool.programId.toString(),\n    id: pool.id.toString(),\n    rewardDefaultInfos: [],\n    rewardDefaultPoolInfos: \"Clmm\",\n    price: pool.currentPrice.toNumber(),\n    mintAmountA: 0,\n    mintAmountB: 0,\n    feeRate: pool.ammConfig.tradeFeeRate,\n    openTime: pool.startTime.toString(),\n    tvl: 0,\n\n    day: mockRewardData,\n    week: mockRewardData,\n    month: mockRewardData,\n    pooltype: [],\n\n    farmUpcomingCount: 0,\n    farmOngoingCount: 0,\n    farmFinishedCount: 0,\n    burnPercent: 0,\n    config: {\n      ...pool.ammConfig,\n      id: pool.ammConfig.id.toString(),\n      defaultRange: 0,\n      defaultRangePoint: [],\n    },\n  };\n}\n","import BN from \"bn.js\";\n\nimport Decimal from \"decimal.js\";\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common\";\nimport { ClmmPositionLayout } from \"../layout\";\nimport { ClmmPoolInfo, ClmmPoolPersonalPosition, ClmmPoolRewardInfo, GetAmountParams, ReturnTypeGetLiquidityAmountOut } from \"../type\";\nimport { Q64 } from \"./constants\";\nimport { LiquidityMath, MathUtil, SqrtPriceMath } from \"./math\";\nimport { Tick } from \"./tick\";\n\nexport class PositionUtils {\n  static getfeeGrowthInside(\n    poolState: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): { feeGrowthInsideX64A: BN; feeGrowthInsideBX64: BN } {\n    let feeGrowthBelowX64A = new BN(0);\n    let feeGrowthBelowX64B = new BN(0);\n    if (poolState.tickCurrent >= tickLowerState.tick) {\n      feeGrowthBelowX64A = tickLowerState.feeGrowthOutsideX64A;\n      feeGrowthBelowX64B = tickLowerState.feeGrowthOutsideX64B;\n    } else {\n      feeGrowthBelowX64A = poolState.feeGrowthGlobalX64A.sub(tickLowerState.feeGrowthOutsideX64A);\n      feeGrowthBelowX64B = poolState.feeGrowthGlobalX64B.sub(tickLowerState.feeGrowthOutsideX64B);\n    }\n\n    let feeGrowthAboveX64A = new BN(0);\n    let feeGrowthAboveX64B = new BN(0);\n    if (poolState.tickCurrent < tickUpperState.tick) {\n      feeGrowthAboveX64A = tickUpperState.feeGrowthOutsideX64A;\n      feeGrowthAboveX64B = tickUpperState.feeGrowthOutsideX64B;\n    } else {\n      feeGrowthAboveX64A = poolState.feeGrowthGlobalX64A.sub(tickUpperState.feeGrowthOutsideX64A);\n      feeGrowthAboveX64B = poolState.feeGrowthGlobalX64B.sub(tickUpperState.feeGrowthOutsideX64B);\n    }\n\n    const feeGrowthInsideX64A = MathUtil.wrappingSubU128(\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64A, feeGrowthBelowX64A),\n      feeGrowthAboveX64A,\n    );\n    const feeGrowthInsideBX64 = MathUtil.wrappingSubU128(\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64B, feeGrowthBelowX64B),\n      feeGrowthAboveX64B,\n    );\n    return { feeGrowthInsideX64A, feeGrowthInsideBX64 };\n  }\n\n  static GetPositionFees(\n    ammPool: ClmmPoolInfo,\n    positionState: ClmmPoolPersonalPosition,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\n      ammPool,\n      tickLowerState,\n      tickUpperState,\n    );\n\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\n      positionState.liquidity,\n      Q64,\n    );\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\n\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\n      positionState.liquidity,\n      Q64,\n    );\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\n\n    return { tokenFeeAmountA, tokenFeeAmountB };\n  }\n\n  static GetPositionFeesV2(\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\n    positionState: ClmmPositionLayout,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\n      ammPool,\n      tickLowerState,\n      tickUpperState,\n    );\n\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\n      positionState.liquidity,\n      Q64,\n    );\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\n\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\n      positionState.liquidity,\n      Q64,\n    );\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\n\n    return { tokenFeeAmountA, tokenFeeAmountB };\n  }\n\n  static GetPositionRewardsV2(\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64B\"> & {\n      rewardInfos: { rewardGrowthGlobalX64: BN }[];\n    },\n    positionState: ClmmPositionLayout,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): BN[] {\n    const rewards: BN[] = [];\n\n    const rewardGrowthsInside = this.getRewardGrowthInsideV2(\n      ammPool.tickCurrent,\n      tickLowerState,\n      tickUpperState,\n      ammPool.rewardInfos,\n    );\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\n      const rewardGrowthInside = rewardGrowthsInside[i];\n      const currRewardInfo = positionState.rewardInfos[i];\n\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\n      rewards.push(rewardAmountOwed);\n    }\n    return rewards;\n  }\n\n  static GetPositionRewards(\n    ammPool: ClmmPoolInfo,\n    positionState: ClmmPoolPersonalPosition,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n  ): BN[] {\n    const rewards: BN[] = [];\n\n    const rewardGrowthsInside = this.getRewardGrowthInside(\n      ammPool.tickCurrent,\n      tickLowerState,\n      tickUpperState,\n      ammPool.rewardInfos,\n    );\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\n      const rewardGrowthInside = rewardGrowthsInside[i];\n      const currRewardInfo = positionState.rewardInfos[i];\n\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\n      rewards.push(rewardAmountOwed);\n    }\n    return rewards;\n  }\n\n  static getRewardGrowthInside(\n    tickCurrentIndex: number,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n    rewardInfos: ClmmPoolRewardInfo[],\n  ): BN[] {\n    const rewardGrowthsInside: BN[] = [];\n    for (let i = 0; i < rewardInfos.length; i++) {\n      let rewardGrowthsBelow = new BN(0);\n      if (tickLowerState.liquidityGross.eqn(0)) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\n      } else if (tickCurrentIndex < tickLowerState.tick) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\n      } else {\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\n      }\n\n      let rewardGrowthsAbove = new BN(0);\n      if (tickUpperState.liquidityGross.eqn(0)) {\n        //\n      } else if (tickCurrentIndex < tickUpperState.tick) {\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\n      } else {\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\n      }\n\n      rewardGrowthsInside.push(\n        MathUtil.wrappingSubU128(\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\n          rewardGrowthsAbove,\n        ),\n      );\n    }\n\n    return rewardGrowthsInside;\n  }\n\n  static getRewardGrowthInsideV2(\n    tickCurrentIndex: number,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n    rewardInfos: Pick<ClmmPoolRewardInfo, \"rewardGrowthGlobalX64\">[],\n  ): BN[] {\n    const rewardGrowthsInside: BN[] = [];\n    for (let i = 0; i < rewardInfos.length; i++) {\n      let rewardGrowthsBelow = new BN(0);\n      if (tickLowerState.liquidityGross.eqn(0)) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\n      } else if (tickCurrentIndex < tickLowerState.tick) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\n      } else {\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\n      }\n\n      let rewardGrowthsAbove = new BN(0);\n      if (tickUpperState.liquidityGross.eqn(0)) {\n        //\n      } else if (tickCurrentIndex < tickUpperState.tick) {\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\n      } else {\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\n      }\n\n      rewardGrowthsInside.push(\n        MathUtil.wrappingSubU128(\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\n          rewardGrowthsAbove,\n        ),\n      );\n    }\n\n    return rewardGrowthsInside;\n  }\n\n  static getAmountsFromLiquidity({\n    poolInfo,\n    ownerPosition,\n    liquidity,\n    slippage,\n    add,\n    epochInfo,\n  }: GetAmountParams): ReturnTypeGetLiquidityAmountOut {\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\n      new Decimal(poolInfo.price),\n      poolInfo.mintA.decimals,\n      poolInfo.mintB.decimals,\n    );\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower);\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper);\n\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\n\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\n\n    const [amountA, amountB] = [\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\n    ];\n    const [amountSlippageA, amountSlippageB] = [\n      getTransferAmountFeeV2(\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\n        poolInfo.mintA.extensions?.feeConfig,\n        epochInfo,\n        true,\n      ),\n      getTransferAmountFeeV2(\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\n        poolInfo.mintB.extensions?.feeConfig,\n        epochInfo,\n        true,\n      ),\n    ];\n\n    return {\n      liquidity,\n      amountA,\n      amountB,\n      amountSlippageA,\n      amountSlippageB,\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\n    };\n  }\n}\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { getMultipleAccountsInfo } from \"../../../common\";\nimport { TickArrayLayout } from \"../layout\";\n\nimport { TickArrayBitmapExtensionType } from \"../type\";\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\nimport { getPdaTickArrayAddress } from \"./pda\";\nimport { Tick, TICK_ARRAY_SIZE, TickArray, TickUtils } from \"./tick\";\n\nexport const FETCH_TICKARRAY_COUNT = 15;\n\nexport declare type PoolVars = {\n  key: PublicKey;\n  tokenA: PublicKey;\n  tokenB: PublicKey;\n  fee: number;\n};\n\nexport class TickQuery {\n  public static async getTickArrays(\n    connection: Connection,\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickCurrent: number,\n    tickSpacing: number,\n    tickArrayBitmapArray: BN[],\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\n  ): Promise<{ [key: string]: TickArray }> {\n    const tickArraysToFetch: PublicKey[] = [];\n    const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickCurrent, tickSpacing);\n\n    const startIndexArray = TickUtils.getInitializedTickArrayInRange(\n      tickArrayBitmapArray,\n      exTickArrayBitmap,\n      tickSpacing,\n      currentTickArrayStartIndex,\n      Math.floor(FETCH_TICKARRAY_COUNT / 2),\n    );\n    for (let i = 0; i < startIndexArray.length; i++) {\n      const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndexArray[i]);\n      tickArraysToFetch.push(tickArrayAddress);\n    }\n\n    const fetchedTickArrays = (await getMultipleAccountsInfo(connection, tickArraysToFetch)).map((i) =>\n      i !== null ? TickArrayLayout.decode(i.data) : null,\n    );\n\n    const tickArrayCache: { [key: string]: TickArray } = {};\n    for (let i = 0; i < tickArraysToFetch.length; i++) {\n      const _info = fetchedTickArrays[i];\n      if (_info === null) continue;\n\n      tickArrayCache[_info.startTickIndex] = {\n        ..._info,\n        address: tickArraysToFetch[i],\n      };\n    }\n    return tickArrayCache;\n  }\n\n  public static nextInitializedTick(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayCache: { [key: string]: TickArray },\n    tickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): {\n    nextTick: Tick;\n    tickArrayAddress: PublicKey | undefined;\n    tickArrayStartTickIndex: number;\n  } {\n    let {\n      initializedTick: nextTick,\n      tickArrayAddress,\n      tickArrayStartTickIndex,\n    } = this.nextInitializedTickInOneArray(programId, poolId, tickArrayCache, tickIndex, tickSpacing, zeroForOne);\n    while (nextTick == undefined || nextTick.liquidityGross.lten(0)) {\n      tickArrayStartTickIndex = TickUtils.getNextTickArrayStartIndex(tickArrayStartTickIndex, tickSpacing, zeroForOne);\n      if (this.checkIsValidStartIndex(tickArrayStartTickIndex, tickSpacing)) {\n        throw new Error(\"No enough initialized tickArray\");\n      }\n      const cachedTickArray = tickArrayCache[tickArrayStartTickIndex];\n\n      if (cachedTickArray === undefined) continue;\n\n      const {\n        nextTick: _nextTick,\n        tickArrayAddress: _tickArrayAddress,\n        tickArrayStartTickIndex: _tickArrayStartTickIndex,\n      } = this.firstInitializedTickInOneArray(programId, poolId, cachedTickArray, zeroForOne);\n      [nextTick, tickArrayAddress, tickArrayStartTickIndex] = [_nextTick, _tickArrayAddress, _tickArrayStartTickIndex];\n    }\n    if (nextTick == undefined) {\n      throw new Error(\"No invaild tickArray cache\");\n    }\n    return { nextTick, tickArrayAddress, tickArrayStartTickIndex };\n  }\n\n  public static nextInitializedTickArray(\n    tickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n    tickArrayBitmap: BN[],\n    exBitmapInfo: TickArrayBitmapExtensionType,\n  ): {\n    isExist: boolean;\n    nextStartIndex: number;\n  } {\n    const currentOffset = Math.floor(tickIndex / TickQuery.tickCount(tickSpacing));\n    const result: number[] = zeroForOne\n      ? TickUtils.searchLowBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset - 1, 1, tickSpacing)\n      : TickUtils.searchHightBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset + 1, 1, tickSpacing);\n\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\n  }\n\n  public static firstInitializedTickInOneArray(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArray: TickArray,\n    zeroForOne: boolean,\n  ): {\n    nextTick: Tick | undefined;\n    tickArrayAddress: PublicKey;\n    tickArrayStartTickIndex: number;\n  } {\n    let nextInitializedTick: Tick | undefined = undefined;\n    if (zeroForOne) {\n      let i = TICK_ARRAY_SIZE - 1;\n      while (i >= 0) {\n        const tickInArray = tickArray.ticks[i];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        i = i - 1;\n      }\n    } else {\n      let i = 0;\n      while (i < TICK_ARRAY_SIZE) {\n        const tickInArray = tickArray.ticks[i];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        i = i + 1;\n      }\n    }\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, tickArray.startTickIndex);\n    return { nextTick: nextInitializedTick, tickArrayAddress, tickArrayStartTickIndex: tickArray.startTickIndex };\n  }\n\n  public static nextInitializedTickInOneArray(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayCache: { [key: string]: TickArray },\n    tickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): {\n    initializedTick: Tick | undefined;\n    tickArrayAddress: PublicKey | undefined;\n    tickArrayStartTickIndex: number;\n  } {\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\n    let tickPositionInArray = Math.floor((tickIndex - startIndex) / tickSpacing);\n    const cachedTickArray = tickArrayCache[startIndex];\n    if (cachedTickArray == undefined) {\n      return {\n        initializedTick: undefined,\n        tickArrayAddress: undefined,\n        tickArrayStartTickIndex: startIndex,\n      };\n    }\n    let nextInitializedTick: Tick | undefined = undefined;\n    if (zeroForOne) {\n      while (tickPositionInArray >= 0) {\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        tickPositionInArray = tickPositionInArray - 1;\n      }\n    } else {\n      tickPositionInArray = tickPositionInArray + 1;\n      while (tickPositionInArray < TICK_ARRAY_SIZE) {\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        tickPositionInArray = tickPositionInArray + 1;\n      }\n    }\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\n    return {\n      initializedTick: nextInitializedTick,\n      tickArrayAddress,\n      tickArrayStartTickIndex: cachedTickArray.startTickIndex,\n    };\n  }\n\n  public static getArrayStartIndex(tickIndex: number, tickSpacing: number): number {\n    const ticksInArray = this.tickCount(tickSpacing);\n    const start = Math.floor(tickIndex / ticksInArray);\n\n    return start * ticksInArray;\n  }\n\n  public static checkIsValidStartIndex(tickIndex: number, tickSpacing: number): boolean {\n    if (TickUtils.checkIsOutOfBoundary(tickIndex)) {\n      if (tickIndex > MAX_TICK) {\n        return false;\n      }\n      const minStartIndex = TickUtils.getTickArrayStartIndexByTick(MIN_TICK, tickSpacing);\n      return tickIndex == minStartIndex;\n    }\n    return tickIndex % this.tickCount(tickSpacing) == 0;\n  }\n\n  public static tickCount(tickSpacing: number): number {\n    return TICK_ARRAY_SIZE * tickSpacing;\n  }\n}\n","import BN from \"bn.js\";\n\nimport { TickArrayBitmapExtensionType } from \"../type\";\n\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\nimport { TICK_ARRAY_BITMAP_SIZE, TICK_ARRAY_SIZE, TickUtils } from \"./tick\";\nimport { TickQuery } from \"./tickQuery\";\nimport { isZero, leadingZeros, leastSignificantBit, mostSignificantBit, trailingZeros } from \"./util\";\n\nexport const EXTENSION_TICKARRAY_BITMAP_SIZE = 14;\n\nexport class TickArrayBitmap {\n  public static maxTickInTickarrayBitmap(tickSpacing: number): number {\n    return tickSpacing * TICK_ARRAY_SIZE * TICK_ARRAY_BITMAP_SIZE;\n  }\n\n  public static getBitmapTickBoundary(\n    tickarrayStartIndex: number,\n    tickSpacing: number,\n  ): {\n    minValue: number;\n    maxValue: number;\n  } {\n    const ticksInOneBitmap = this.maxTickInTickarrayBitmap(tickSpacing);\n    let m = Math.floor(Math.abs(tickarrayStartIndex) / ticksInOneBitmap);\n    if (tickarrayStartIndex < 0 && Math.abs(tickarrayStartIndex) % ticksInOneBitmap != 0) m += 1;\n\n    const minValue = ticksInOneBitmap * m;\n\n    return tickarrayStartIndex < 0\n      ? { minValue: -minValue, maxValue: -minValue + ticksInOneBitmap }\n      : { minValue, maxValue: minValue + ticksInOneBitmap };\n  }\n\n  public static nextInitializedTickArrayStartIndex(\n    bitMap: BN,\n    lastTickArrayStartIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): { isInit: boolean; tickIndex: number } {\n    if (!TickQuery.checkIsValidStartIndex(lastTickArrayStartIndex, tickSpacing))\n      throw Error(\"nextInitializedTickArrayStartIndex check error\");\n\n    const tickBoundary = this.maxTickInTickarrayBitmap(tickSpacing);\n    const nextTickArrayStartIndex = zeroForOne\n      ? lastTickArrayStartIndex - TickQuery.tickCount(tickSpacing)\n      : lastTickArrayStartIndex + TickQuery.tickCount(tickSpacing);\n\n    if (nextTickArrayStartIndex < -tickBoundary || nextTickArrayStartIndex >= tickBoundary) {\n      return { isInit: false, tickIndex: lastTickArrayStartIndex };\n    }\n\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\n    let compressed = nextTickArrayStartIndex / multiplier + 512;\n\n    if (nextTickArrayStartIndex < 0 && nextTickArrayStartIndex % multiplier != 0) {\n      compressed--;\n    }\n\n    const bitPos = Math.abs(compressed);\n\n    if (zeroForOne) {\n      const offsetBitMap = bitMap.shln(1024 - bitPos - 1);\n      const nextBit = mostSignificantBit(1024, offsetBitMap);\n      if (nextBit !== null) {\n        const nextArrayStartIndex = (bitPos - nextBit - 512) * multiplier;\n        return { isInit: true, tickIndex: nextArrayStartIndex };\n      } else {\n        return { isInit: false, tickIndex: -tickBoundary };\n      }\n    } else {\n      const offsetBitMap = bitMap.shrn(bitPos);\n      const nextBit = leastSignificantBit(1024, offsetBitMap);\n      if (nextBit !== null) {\n        const nextArrayStartIndex = (bitPos + nextBit - 512) * multiplier;\n        return { isInit: true, tickIndex: nextArrayStartIndex };\n      } else {\n        return { isInit: false, tickIndex: tickBoundary - TickQuery.tickCount(tickSpacing) };\n      }\n    }\n  }\n}\n\nexport class TickArrayBitmapExtensionUtils {\n  public static getBitmapOffset(tickIndex: number, tickSpacing: number): number {\n    if (!TickQuery.checkIsValidStartIndex(tickIndex, tickSpacing)) {\n      throw new Error(\"No enough initialized tickArray\");\n    }\n    this.checkExtensionBoundary(tickIndex, tickSpacing);\n\n    const ticksInOneBitmap = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\n    let offset = Math.floor(Math.abs(tickIndex) / ticksInOneBitmap) - 1;\n\n    if (tickIndex < 0 && Math.abs(tickIndex) % ticksInOneBitmap === 0) offset--;\n    return offset;\n  }\n\n  public static getBitmap(\n    tickIndex: number,\n    tickSpacing: number,\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\n  ): { offset: number; tickarrayBitmap: BN[] } {\n    const offset = this.getBitmapOffset(tickIndex, tickSpacing);\n    if (tickIndex < 0) {\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.negativeTickArrayBitmap[offset] };\n    } else {\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.positiveTickArrayBitmap[offset] };\n    }\n  }\n\n  public static checkExtensionBoundary(tickIndex: number, tickSpacing: number) {\n    const { positiveTickBoundary, negativeTickBoundary } = this.extensionTickBoundary(tickSpacing);\n\n    if (tickIndex >= negativeTickBoundary && tickIndex < positiveTickBoundary) {\n      throw Error(\"checkExtensionBoundary -> InvalidTickArrayBoundary\");\n    }\n  }\n\n  public static extensionTickBoundary(tickSpacing: number): {\n    positiveTickBoundary: number;\n    negativeTickBoundary: number;\n  } {\n    const positiveTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\n\n    const negativeTickBoundary = -positiveTickBoundary;\n\n    if (MAX_TICK <= positiveTickBoundary)\n      throw Error(`extensionTickBoundary check error: ${MAX_TICK}, ${positiveTickBoundary}`);\n    if (negativeTickBoundary <= MIN_TICK)\n      throw Error(`extensionTickBoundary check error: ${negativeTickBoundary}, ${MIN_TICK}`);\n\n    return { positiveTickBoundary, negativeTickBoundary };\n  }\n\n  public static checkTickArrayIsInit(\n    tickArrayStartIndex: number,\n    tickSpacing: number,\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\n  ): { isInitialized: boolean; startIndex: number } {\n    const { tickarrayBitmap } = this.getBitmap(tickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\n\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(tickArrayStartIndex, tickSpacing);\n\n    return {\n      isInitialized: TickUtils.mergeTickArrayBitmap(tickarrayBitmap).testn(tickArrayOffsetInBitmap),\n      startIndex: tickArrayStartIndex,\n    };\n  }\n\n  public static nextInitializedTickArrayFromOneBitmap(\n    lastTickArrayStartIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\n  ): {\n    isInit: boolean;\n    tickIndex: number;\n  } {\n    const multiplier = TickQuery.tickCount(tickSpacing);\n    const nextTickArrayStartIndex = zeroForOne\n      ? lastTickArrayStartIndex - multiplier\n      : lastTickArrayStartIndex + multiplier;\n    const { tickarrayBitmap } = this.getBitmap(nextTickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\n\n    return this.nextInitializedTickArrayInBitmap(tickarrayBitmap, nextTickArrayStartIndex, tickSpacing, zeroForOne);\n  }\n\n  public static nextInitializedTickArrayInBitmap(\n    tickarrayBitmap: BN[],\n    nextTickArrayStartIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean,\n  ): {\n    isInit: boolean;\n    tickIndex: number;\n  } {\n    const { minValue: bitmapMinTickBoundary, maxValue: bitmapMaxTickBoundary } = TickArrayBitmap.getBitmapTickBoundary(\n      nextTickArrayStartIndex,\n      tickSpacing,\n    );\n\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(nextTickArrayStartIndex, tickSpacing);\n    if (zeroForOne) {\n      // tick from upper to lower\n      // find from highter bits to lower bits\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shln(\n        TICK_ARRAY_BITMAP_SIZE - 1 - tickArrayOffsetInBitmap,\n      );\n\n      const nextBit = isZero(512, offsetBitMap) ? null : leadingZeros(512, offsetBitMap);\n\n      if (nextBit !== null) {\n        const nextArrayStartIndex = nextTickArrayStartIndex - nextBit * TickQuery.tickCount(tickSpacing);\n        return { isInit: true, tickIndex: nextArrayStartIndex };\n      } else {\n        // not found til to the end\n        return { isInit: false, tickIndex: bitmapMinTickBoundary };\n      }\n    } else {\n      // tick from lower to upper\n      // find from lower bits to highter bits\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shrn(tickArrayOffsetInBitmap);\n\n      const nextBit = isZero(512, offsetBitMap) ? null : trailingZeros(512, offsetBitMap);\n\n      if (nextBit !== null) {\n        const nextArrayStartIndex = nextTickArrayStartIndex + nextBit * TickQuery.tickCount(tickSpacing);\n        return { isInit: true, tickIndex: nextArrayStartIndex };\n      } else {\n        // not found til to the end\n        return { isInit: false, tickIndex: bitmapMaxTickBoundary - TickQuery.tickCount(tickSpacing) };\n      }\n    }\n  }\n\n  public static tickArrayOffsetInBitmap(tickArrayStartIndex: number, tickSpacing: number): number {\n    const m = Math.abs(tickArrayStartIndex) % TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\n    let tickArrayOffsetInBitmap = Math.floor(m / TickQuery.tickCount(tickSpacing));\n    if (tickArrayStartIndex < 0 && m != 0) {\n      tickArrayOffsetInBitmap = TICK_ARRAY_BITMAP_SIZE - tickArrayOffsetInBitmap;\n    }\n    return tickArrayOffsetInBitmap;\n  }\n}\n","import { blob, bool, i128, i64, publicKey, s32, seq, struct, u128, u16, u32, u64, u8 } from \"../../marshmallow\";\n\nimport { TICK_ARRAY_SIZE } from \"./utils/tick\";\nimport { EXTENSION_TICKARRAY_BITMAP_SIZE } from \"./utils/tickarrayBitmap\";\n\nexport const ClmmConfigLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  u16(\"index\"),\n  publicKey(\"\"),\n  u32(\"protocolFeeRate\"),\n  u32(\"tradeFeeRate\"),\n  u16(\"tickSpacing\"),\n  seq(u64(), 8, \"\"),\n]);\n\nexport const ObservationLayout = struct([u32(\"blockTimestamp\"), i64(\"tickCumulative\"), seq(u64(), 4)]);\nexport const ObservationInfoLayout = struct([\n  blob(8),\n  bool(\"initialized\"),\n  u64(\"recentEpoch\"),\n  u16(\"observationIndex\"),\n  publicKey(\"poolId\"),\n  seq(ObservationLayout, 100, \"observations\"),\n  seq(u64(), 4),\n]);\n\nexport const RewardInfo = struct([\n  u8(\"rewardState\"),\n  u64(\"openTime\"),\n  u64(\"endTime\"),\n  u64(\"lastUpdateTime\"),\n  u128(\"emissionsPerSecondX64\"),\n  u64(\"rewardTotalEmissioned\"),\n  u64(\"rewardClaimed\"),\n  publicKey(\"tokenMint\"),\n  publicKey(\"tokenVault\"),\n  publicKey(\"creator\"),\n  u128(\"rewardGrowthGlobalX64\"),\n]);\nexport const PoolInfoLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey(\"ammConfig\"),\n  publicKey(\"creator\"),\n  publicKey(\"mintA\"),\n  publicKey(\"mintB\"),\n  publicKey(\"vaultA\"),\n  publicKey(\"vaultB\"),\n  publicKey(\"observationId\"),\n  u8(\"mintDecimalsA\"),\n  u8(\"mintDecimalsB\"),\n  u16(\"tickSpacing\"),\n  u128(\"liquidity\"),\n  u128(\"sqrtPriceX64\"),\n  s32(\"tickCurrent\"),\n  u32(),\n  u128(\"feeGrowthGlobalX64A\"),\n  u128(\"feeGrowthGlobalX64B\"),\n  u64(\"protocolFeesTokenA\"),\n  u64(\"protocolFeesTokenB\"),\n\n  u128(\"swapInAmountTokenA\"),\n  u128(\"swapOutAmountTokenB\"),\n  u128(\"swapInAmountTokenB\"),\n  u128(\"swapOutAmountTokenA\"),\n\n  u8(\"status\"),\n\n  seq(u8(), 7, \"\"),\n\n  seq(RewardInfo, 3, \"rewardInfos\"),\n  seq(u64(), 16, \"tickArrayBitmap\"),\n\n  u64(\"totalFeesTokenA\"),\n  u64(\"totalFeesClaimedTokenA\"),\n  u64(\"totalFeesTokenB\"),\n  u64(\"totalFeesClaimedTokenB\"),\n\n  u64(\"fundFeesTokenA\"),\n  u64(\"fundFeesTokenB\"),\n\n  u64(\"startTime\"),\n\n  seq(u64(), 15 * 4 - 3, \"padding\"),\n]);\n\nexport const PositionRewardInfoLayout = struct([u128(\"growthInsideLastX64\"), u64(\"rewardAmountOwed\")]);\nexport const PositionInfoLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey(\"nftMint\"),\n  publicKey(\"poolId\"),\n\n  s32(\"tickLower\"),\n  s32(\"tickUpper\"),\n  u128(\"liquidity\"),\n  u128(\"feeGrowthInsideLastX64A\"),\n  u128(\"feeGrowthInsideLastX64B\"),\n  u64(\"tokenFeesOwedA\"),\n  u64(\"tokenFeesOwedB\"),\n\n  seq(PositionRewardInfoLayout, 3, \"rewardInfos\"),\n\n  seq(u64(), 8, \"\"),\n]);\n\nexport type ClmmPositionLayout = ReturnType<typeof PositionInfoLayout.decode>;\n\nexport const ProtocolPositionLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey(\"poolId\"),\n  s32(\"tickLowerIndex\"),\n  s32(\"tickUpperIndex\"),\n  u128(\"liquidity\"),\n  u128(\"feeGrowthInsideLastX64A\"),\n  u128(\"feeGrowthInsideLastX64B\"),\n  u64(\"tokenFeesOwedA\"),\n  u64(\"tokenFeesOwedB\"),\n  seq(u128(), 3, \"rewardGrowthInside\"),\n\n  seq(u64(), 8, \"\"),\n]);\n\nexport const TickLayout = struct([\n  s32(\"tick\"),\n  i128(\"liquidityNet\"),\n  u128(\"liquidityGross\"),\n  u128(\"feeGrowthOutsideX64A\"),\n  u128(\"feeGrowthOutsideX64B\"),\n  seq(u128(), 3, \"rewardGrowthsOutsideX64\"),\n\n  seq(u32(), 13, \"\"),\n]);\n\nexport const TickArrayLayout = struct([\n  blob(8),\n  publicKey(\"poolId\"),\n  s32(\"startTickIndex\"),\n  seq(TickLayout, TICK_ARRAY_SIZE, \"ticks\"),\n  u8(\"initializedTickCount\"),\n\n  seq(u8(), 115, \"\"),\n]);\n\nexport const OperationLayout = struct([blob(329), seq(publicKey(), 100, \"whitelistMints\")]);\n\nexport const TickArrayBitmapExtensionLayout = struct([\n  blob(8),\n  publicKey(\"poolId\"),\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"positiveTickArrayBitmap\"),\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"negativeTickArrayBitmap\"),\n]);\n\nexport const LockPositionLayout = struct([\n  u64(),\n  u8(\"bump\"),\n  publicKey(\"owner\"),\n  publicKey(\"poolId\"),\n  publicKey(\"positionId\"),\n  publicKey(\"nftAccount\"),\n  seq(u64(), 8),\n]);\n\nexport const LockClPositionLayoutV2 = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey(\"lockOwner\"),\n  publicKey(\"poolId\"),\n  publicKey(\"positionId\"),\n  publicKey(\"nftAccount\"),\n  publicKey(\"lockNftMint\"),\n  u64(\"recentEpoch\"),\n  seq(u64(), 8),\n]);\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\n\nexport const SPL_MINT_LAYOUT = struct([\n  u32(\"mintAuthorityOption\"),\n  publicKey(\"mintAuthority\"),\n  u64(\"supply\"),\n  u8(\"decimals\"),\n  u8(\"isInitialized\"),\n  u32(\"freezeAuthorityOption\"),\n  publicKey(\"freezeAuthority\"),\n]);\n\nexport type SplMintLayout = typeof SPL_MINT_LAYOUT;\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport { MintLayout, RawMint, TOKEN_PROGRAM_ID, TransferFeeConfigLayout } from \"@solana/spl-token\";\nimport { BigNumberish } from \"@/common/bignumber\";\nimport { Token, TokenAmount } from \"../../module\";\nimport { SOL_INFO, TOKEN_WSOL } from \"./constant\";\nimport { TokenInfo } from \"./type\";\n\nimport { ApiV3Token } from \"../../api\";\nimport { solToWSol } from \"@/common\";\n\nexport const parseTokenInfo = async ({\n  connection,\n  mint,\n}: {\n  connection: Connection;\n  mint: PublicKey | string;\n}): Promise<RawMint | undefined> => {\n  const accountData = await connection.getAccountInfo(new PublicKey(mint));\n  if (!accountData || accountData.data.length !== MintLayout.span) return;\n  const tokenInfo = MintLayout.decode(accountData.data);\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  //@ts-ignore\n  return tokenInfo;\n};\n\nexport const toTokenInfo = ({\n  mint,\n  decimals,\n  programId = TOKEN_PROGRAM_ID,\n  logoURI = \"\",\n  priority = 3,\n}: {\n  mint: PublicKey;\n  decimals: number;\n  programId?: PublicKey | string;\n  priority?: number;\n  logoURI?: string;\n}): TokenInfo => {\n  const pubStr = mint.toBase58().substring(0, 6);\n  return {\n    address: mint.toBase58(),\n    decimals,\n    symbol: pubStr,\n    logoURI,\n    extensions: {},\n    chainId: 101,\n    programId: programId.toString(),\n    name: pubStr,\n    tags: [],\n    priority,\n  };\n};\n\nexport const toToken = (props: Omit<TokenInfo, \"priority\">): Token =>\n  new Token({\n    mint: props.address,\n    decimals: props.decimals,\n    symbol: props.symbol,\n    name: props.name,\n  });\n\nexport const toTokenAmount = ({\n  amount,\n  isRaw,\n  name,\n  ...props\n}: Omit<TokenInfo, \"priority\"> & {\n  amount: BigNumberish;\n  isRaw?: boolean;\n  name?: string;\n}): TokenAmount =>\n  new TokenAmount(\n    new Token({\n      mint: solToWSol(props.address).toBase58(),\n      decimals: props.decimals,\n      symbol: props.symbol,\n      name,\n    }),\n    amount,\n    isRaw,\n    name,\n  );\n\nexport function solToWSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\n  if (token.address === SOL_INFO.address) return TOKEN_WSOL as T;\n  return token;\n}\n\nexport function wSolToSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\n  if (token.address === TOKEN_WSOL.address) return SOL_INFO as T;\n  return token;\n}\n\nexport const toApiV3Token = ({\n  address,\n  programId,\n  decimals,\n  ...props\n}: {\n  address: string;\n  programId: string;\n  decimals: number;\n} & Partial<ApiV3Token>): ApiV3Token => ({\n  chainId: 101,\n  address: solToWSol(address).toBase58(),\n  programId,\n  logoURI: \"\",\n  symbol: \"\",\n  name: \"\",\n  decimals,\n  tags: [],\n  extensions: props.extensions || {},\n  ...props,\n});\n\nexport const toFeeConfig = (\n  config?: ReturnType<typeof TransferFeeConfigLayout.decode> | undefined | null,\n): ApiV3Token[\"extensions\"][\"feeConfig\"] | undefined =>\n  config\n    ? {\n        ...config,\n        transferFeeConfigAuthority: config.transferFeeConfigAuthority.toBase58(),\n        withdrawWithheldAuthority: config.withdrawWithheldAuthority.toBase58(),\n        withheldAmount: config.withheldAmount.toString(),\n        olderTransferFee: {\n          ...config.olderTransferFee,\n          epoch: config.olderTransferFee.epoch.toString(),\n          maximumFee: config.olderTransferFee.maximumFee.toString(),\n        },\n        newerTransferFee: {\n          ...config.newerTransferFee,\n          epoch: config.newerTransferFee.epoch.toString(),\n          maximumFee: config.newerTransferFee.maximumFee.toString(),\n        },\n      }\n    : undefined;\n","import BN from \"bn.js\";\nimport { SerumVersion } from \"../serum\";\n\nexport const LIQUIDITY_FEES_NUMERATOR = new BN(25);\nexport const LIQUIDITY_FEES_DENOMINATOR = new BN(10000);\n\n// liquidity version => serum version\nexport const LIQUIDITY_VERSION_TO_SERUM_VERSION: {\n  [key in 4 | 5]?: SerumVersion;\n} = {\n  4: 3,\n  5: 3,\n};\n","import { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nimport { AmmV4Keys, AmmV5Keys } from \"@/api/type\";\nimport { BN_ONE, BN_ZERO, parseBigNumberish } from \"@/common\";\nimport { createLogger } from \"@/common/logger\";\nimport { accountMeta, RENT_PROGRAM_ID } from \"@/common/pubKey\";\nimport { InstructionType } from \"@/common/txTool/txType\";\nimport { struct, u64, u8 } from \"@/marshmallow\";\n\nimport BN from \"bn.js\";\nimport { jsonInfo2PoolKeys } from \"@/common/utility\";\nimport { InstructionReturn } from \"../type\";\nimport {\n  addLiquidityLayout,\n  fixedSwapInLayout,\n  fixedSwapOutLayout,\n  initPoolLayout,\n  removeLiquidityLayout,\n} from \"./layout\";\nimport { MODEL_DATA_PUBKEY } from \"./stable\";\nimport {\n  InitPoolInstructionParamsV4,\n  LiquidityAddInstructionParams,\n  RemoveLiquidityInstruction,\n  SwapFixedInInstructionParamsV4,\n  SwapFixedOutInstructionParamsV4,\n  SwapInstructionParams,\n} from \"./type\";\n\nconst logger = createLogger(\"Raydium_liquidity_instruction\");\nexport function makeAddLiquidityInstruction(params: LiquidityAddInstructionParams): TransactionInstruction {\n  const { poolInfo, poolKeys, userKeys, baseAmountIn, quoteAmountIn, fixedSide, otherAmountMin } = params;\n\n  const data = Buffer.alloc(addLiquidityLayout.span);\n  addLiquidityLayout.encode(\n    {\n      instruction: 3,\n      baseAmountIn: parseBigNumberish(baseAmountIn),\n      quoteAmountIn: parseBigNumberish(quoteAmountIn),\n      otherAmountMin: parseBigNumberish(otherAmountMin),\n      fixedSide: fixedSide === \"base\" ? BN_ZERO : BN_ONE,\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    // amm\n    accountMeta({ pubkey: new PublicKey(poolInfo.id) }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.targetOrders) }),\n    accountMeta({ pubkey: new PublicKey(poolInfo.lpMint.address) }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A) }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B) }),\n  ];\n\n  if (poolInfo.pooltype.includes(\"StablePool\")) {\n    keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n  }\n\n  keys.push(\n    // serum\n    accountMeta({ pubkey: new PublicKey(poolInfo.marketId), isWritable: false }),\n    // user\n    accountMeta({ pubkey: userKeys.baseTokenAccount }),\n    accountMeta({ pubkey: userKeys.quoteTokenAccount }),\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\n  );\n\n  return new TransactionInstruction({\n    programId: new PublicKey(poolInfo.programId),\n    keys,\n    data,\n  });\n}\n\nexport function removeLiquidityInstruction(params: RemoveLiquidityInstruction): TransactionInstruction {\n  const { poolInfo, poolKeys: poolKeyProps, userKeys, lpAmount, baseAmountMin, quoteAmountMin } = params;\n  const poolKeys = jsonInfo2PoolKeys(poolKeyProps);\n\n  let version = 4;\n  if (poolInfo.pooltype.includes(\"StablePool\")) version = 5;\n\n  if (version === 4 || version === 5) {\n    const data = Buffer.alloc(removeLiquidityLayout.span);\n    removeLiquidityLayout.encode(\n      {\n        instruction: 4,\n        lpAmount: parseBigNumberish(lpAmount),\n        baseAmountMin: parseBigNumberish(baseAmountMin),\n        quoteAmountMin: parseBigNumberish(quoteAmountMin),\n      },\n      data,\n    );\n\n    const keys = [\n      // system\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n      // amm\n      accountMeta({ pubkey: poolKeys.id }),\n      accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.openOrders }),\n      accountMeta({ pubkey: poolKeys.targetOrders }),\n      accountMeta({ pubkey: poolKeys.mintLp.address }),\n      accountMeta({ pubkey: poolKeys.vault.A }),\n      accountMeta({ pubkey: poolKeys.vault.B }),\n    ];\n\n    if (version === 5) {\n      keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n    } else {\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\n    }\n\n    keys.push(\n      // serum\n      accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n      accountMeta({ pubkey: poolKeys.marketId }),\n      accountMeta({ pubkey: poolKeys.marketBaseVault }),\n      accountMeta({ pubkey: poolKeys.marketQuoteVault }),\n      accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\n      // user\n      accountMeta({ pubkey: userKeys.lpTokenAccount }),\n      accountMeta({ pubkey: userKeys.baseTokenAccount }),\n      accountMeta({ pubkey: userKeys.quoteTokenAccount }),\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n      // serum orderbook\n      accountMeta({ pubkey: poolKeys.marketEventQueue }),\n      accountMeta({ pubkey: poolKeys.marketBids }),\n      accountMeta({ pubkey: poolKeys.marketAsks }),\n    );\n\n    return new TransactionInstruction({\n      programId: poolKeys.programId,\n      keys,\n      data,\n    });\n  }\n\n  // logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\n  return new TransactionInstruction({ programId: poolKeys.programId, keys: [] }); // won't reach\n}\n\nexport function createPoolV4InstructionV2({\n  programId,\n  ammId,\n  ammAuthority,\n  ammOpenOrders,\n  lpMint,\n  coinMint,\n  pcMint,\n  coinVault,\n  pcVault,\n  withdrawQueue,\n  ammTargetOrders,\n  poolTempLp,\n  marketProgramId,\n  marketId,\n  userWallet,\n  userCoinVault,\n  userPcVault,\n  userLpVault,\n  nonce,\n  openTime,\n  coinAmount,\n  pcAmount,\n  ammConfigId,\n  feeDestinationId,\n}: {\n  programId: PublicKey;\n  ammId: PublicKey;\n  ammAuthority: PublicKey;\n  ammOpenOrders: PublicKey;\n  lpMint: PublicKey;\n  coinMint: PublicKey;\n  pcMint: PublicKey;\n  coinVault: PublicKey;\n  pcVault: PublicKey;\n  withdrawQueue: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolTempLp: PublicKey;\n  marketProgramId: PublicKey;\n  marketId: PublicKey;\n  userWallet: PublicKey;\n  userCoinVault: PublicKey;\n  userPcVault: PublicKey;\n  userLpVault: PublicKey;\n  ammConfigId: PublicKey;\n  feeDestinationId: PublicKey;\n\n  nonce: number;\n  openTime: BN;\n  coinAmount: BN;\n  pcAmount: BN;\n}): InstructionReturn {\n  const dataLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"openTime\"), u64(\"pcAmount\"), u64(\"coinAmount\")]);\n\n  const keys = [\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: ammId, isSigner: false, isWritable: true },\n    { pubkey: ammAuthority, isSigner: false, isWritable: false },\n    { pubkey: ammOpenOrders, isSigner: false, isWritable: true },\n    { pubkey: lpMint, isSigner: false, isWritable: true },\n    { pubkey: coinMint, isSigner: false, isWritable: false },\n    { pubkey: pcMint, isSigner: false, isWritable: false },\n    { pubkey: coinVault, isSigner: false, isWritable: true },\n    { pubkey: pcVault, isSigner: false, isWritable: true }, //12\n    { pubkey: ammTargetOrders, isSigner: false, isWritable: true }, //13\n    { pubkey: ammConfigId, isSigner: false, isWritable: false },\n    { pubkey: feeDestinationId, isSigner: false, isWritable: true },\n    { pubkey: marketProgramId, isSigner: false, isWritable: false },\n    { pubkey: marketId, isSigner: false, isWritable: false },\n    { pubkey: userWallet, isSigner: true, isWritable: true },\n    { pubkey: userCoinVault, isSigner: false, isWritable: true },\n    { pubkey: userPcVault, isSigner: false, isWritable: true },\n    { pubkey: userLpVault, isSigner: false, isWritable: true },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({ instruction: 1, nonce, openTime, coinAmount, pcAmount }, data);\n\n  return {\n    instruction: new TransactionInstruction({\n      keys,\n      programId,\n      data,\n    }),\n    instructionType: InstructionType.AmmV4CreatePool,\n  };\n}\n\nexport function simulatePoolInfoInstruction(poolKeys: AmmV4Keys | AmmV5Keys): TransactionInstruction {\n  const simulatePoolLayout = struct([u8(\"instruction\"), u8(\"simulateType\")]);\n  const data = Buffer.alloc(simulatePoolLayout.span);\n  simulatePoolLayout.encode(\n    {\n      instruction: 12,\n      simulateType: 0,\n    },\n    data,\n  );\n\n  const keys = [\n    // amm\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\n    // serum\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\n  ];\n\n  return new TransactionInstruction({\n    programId: new PublicKey(poolKeys.programId),\n    keys,\n    data,\n  });\n}\n\nexport function makeSwapFixedInInstruction(\n  { poolKeys: propPoolKeys, userKeys, amountIn, minAmountOut }: SwapFixedInInstructionParamsV4,\n  version: number,\n): TransactionInstruction {\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\n  const data = Buffer.alloc(fixedSwapInLayout.span);\n  fixedSwapInLayout.encode(\n    {\n      instruction: 9,\n      amountIn: parseBigNumberish(amountIn),\n      minAmountOut: parseBigNumberish(minAmountOut),\n    },\n    data,\n  );\n  const keys = [\n    // amm\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders }),\n  ];\n\n  if (version === 4) keys.push(accountMeta({ pubkey: poolKeys.targetOrders }));\n  keys.push(accountMeta({ pubkey: poolKeys.vault.A }), accountMeta({ pubkey: poolKeys.vault.B }));\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n  keys.push(\n    // serum\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.marketId }),\n    accountMeta({ pubkey: poolKeys.marketBids }),\n    accountMeta({ pubkey: poolKeys.marketAsks }),\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\n    // user\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\n    accountMeta({ pubkey: userKeys.owner, isWritable: false }),\n  );\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeSwapFixedOutInstruction(\n  { poolKeys: propPoolKeys, userKeys, maxAmountIn, amountOut }: SwapFixedOutInstructionParamsV4,\n  version: number,\n): TransactionInstruction {\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\n  const data = Buffer.alloc(fixedSwapOutLayout.span);\n  fixedSwapOutLayout.encode(\n    {\n      instruction: 11,\n      maxAmountIn: parseBigNumberish(maxAmountIn),\n      amountOut: parseBigNumberish(amountOut),\n    },\n    data,\n  );\n\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    // amm\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders }),\n    accountMeta({ pubkey: poolKeys.targetOrders }),\n    accountMeta({ pubkey: poolKeys.vault.A }),\n    accountMeta({ pubkey: poolKeys.vault.B }),\n  ];\n\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\n\n  keys.push(\n    // serum\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.marketId }),\n    accountMeta({ pubkey: poolKeys.marketBids }),\n    accountMeta({ pubkey: poolKeys.marketAsks }),\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\n  );\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeAMMSwapInstruction(params: SwapInstructionParams): TransactionInstruction {\n  const { poolKeys, version, userKeys, amountIn, amountOut, fixedSide } = params;\n  if (version === 4 || version === 5) {\n    const props = { poolKeys, userKeys };\n    if (fixedSide === \"in\") {\n      return makeSwapFixedInInstruction(\n        {\n          ...props,\n          amountIn,\n          minAmountOut: amountOut,\n        },\n        version,\n      );\n    } else if (fixedSide === \"out\") {\n      return makeSwapFixedOutInstruction(\n        {\n          ...props,\n          maxAmountIn: amountIn,\n          amountOut,\n        },\n        version,\n      );\n    }\n    logger.logWithError(\"invalid params\", \"params\", params);\n  }\n\n  logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\n  throw new Error(\"invalid version\");\n}\n\nexport function makeInitPoolInstructionV4({\n  poolKeys: propPoolKeys,\n  userKeys,\n  startTime,\n}: InitPoolInstructionParamsV4): TransactionInstruction {\n  const data = Buffer.alloc(initPoolLayout.span);\n  initPoolLayout.encode(\n    {\n      instruction: 0,\n      // nonce: poolKeys.nonce, // to do fix\n      nonce: 5,\n      startTime: parseBigNumberish(startTime),\n    },\n    data,\n  );\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\n\n  const keys = [\n    // system\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\n    // amm\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.openOrders }),\n    accountMeta({ pubkey: poolKeys.mintLp.address }),\n    accountMeta({ pubkey: poolKeys.mintA.address, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.mintB.address, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.vault.A, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.vault.B, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.id }),\n    accountMeta({ pubkey: poolKeys.targetOrders }),\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\n    accountMeta({ pubkey: poolKeys.id, isWritable: false }),\n    // serum\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\n    accountMeta({ pubkey: poolKeys.marketId, isWritable: false }),\n    // user\n    accountMeta({ pubkey: userKeys.payer, isSigner: true }),\n  ];\n\n  return new TransactionInstruction({\n    programId: poolKeys.programId,\n    keys,\n    data,\n  });\n}\n\nexport function makeSimulatePoolInfoInstruction({ poolKeys }: { poolKeys: AmmV4Keys | AmmV5Keys }): {\n  instruction: TransactionInstruction;\n} {\n  const LAYOUT = struct([u8(\"instruction\"), u8(\"simulateType\")]);\n  const data = Buffer.alloc(LAYOUT.span);\n  LAYOUT.encode(\n    {\n      instruction: 12,\n      simulateType: 0,\n    },\n    data,\n  );\n\n  const keys = [\n    // amm\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\n    // serum\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\n  ];\n\n  return {\n    instruction: new TransactionInstruction({\n      programId: new PublicKey(poolKeys.programId),\n      keys,\n      data,\n    }),\n  };\n}\n","import { GetStructureSchema, publicKey, seq, struct, u128, u64, u8 } from \"../../marshmallow\";\n\nexport const fixedSwapInLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"minAmountOut\")]);\nexport const fixedSwapOutLayout = struct([u8(\"instruction\"), u64(\"maxAmountIn\"), u64(\"amountOut\")]);\n\nexport const createPoolV4Layout = struct([u8(\"instruction\"), u8(\"nonce\")]);\nexport const initPoolLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"startTime\")]);\n/* ================= state layouts ================= */\nexport const liquidityStateV4Layout = struct([\n  u64(\"status\"),\n  u64(\"nonce\"),\n  u64(\"maxOrder\"),\n  u64(\"depth\"),\n  u64(\"baseDecimal\"),\n  u64(\"quoteDecimal\"),\n  u64(\"state\"),\n  u64(\"resetFlag\"),\n  u64(\"minSize\"),\n  u64(\"volMaxCutRatio\"),\n  u64(\"amountWaveRatio\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"minPriceMultiplier\"),\n  u64(\"maxPriceMultiplier\"),\n  u64(\"systemDecimalValue\"),\n  u64(\"minSeparateNumerator\"),\n  u64(\"minSeparateDenominator\"),\n  u64(\"tradeFeeNumerator\"),\n  u64(\"tradeFeeDenominator\"),\n  u64(\"pnlNumerator\"),\n  u64(\"pnlDenominator\"),\n  u64(\"swapFeeNumerator\"),\n  u64(\"swapFeeDenominator\"),\n  u64(\"baseNeedTakePnl\"),\n  u64(\"quoteNeedTakePnl\"),\n  u64(\"quoteTotalPnl\"),\n  u64(\"baseTotalPnl\"),\n  u64(\"poolOpenTime\"),\n  u64(\"punishPcAmount\"),\n  u64(\"punishCoinAmount\"),\n  u64(\"orderbookToInitTime\"),\n  // u128('poolTotalDepositPc'),\n  // u128('poolTotalDepositCoin'),\n  u128(\"swapBaseInAmount\"),\n  u128(\"swapQuoteOutAmount\"),\n  u64(\"swapBase2QuoteFee\"),\n  u128(\"swapQuoteInAmount\"),\n  u128(\"swapBaseOutAmount\"),\n  u64(\"swapQuote2BaseFee\"),\n  // amm vault\n  publicKey(\"baseVault\"),\n  publicKey(\"quoteVault\"),\n  // mint\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"lpMint\"),\n  // market\n  publicKey(\"openOrders\"),\n  publicKey(\"marketId\"),\n  publicKey(\"marketProgramId\"),\n  publicKey(\"targetOrders\"),\n  publicKey(\"withdrawQueue\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"owner\"),\n  // true circulating supply without lock up\n  u64(\"lpReserve\"),\n  seq(u64(), 3, \"padding\"),\n]);\n\nexport type LiquidityStateLayoutV4 = typeof liquidityStateV4Layout;\nexport type LiquidityStateV4 = GetStructureSchema<LiquidityStateLayoutV4>;\n\nexport const liquidityStateV5Layout = struct([\n  u64(\"accountType\"),\n  u64(\"status\"),\n  u64(\"nonce\"),\n  u64(\"maxOrder\"),\n  u64(\"depth\"),\n  u64(\"baseDecimal\"),\n  u64(\"quoteDecimal\"),\n  u64(\"state\"),\n  u64(\"resetFlag\"),\n  u64(\"minSize\"),\n  u64(\"volMaxCutRatio\"),\n  u64(\"amountWaveRatio\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"minPriceMultiplier\"),\n  u64(\"maxPriceMultiplier\"),\n  u64(\"systemDecimalsValue\"),\n  u64(\"abortTradeFactor\"),\n  u64(\"priceTickMultiplier\"),\n  u64(\"priceTick\"),\n  // Fees\n  u64(\"minSeparateNumerator\"),\n  u64(\"minSeparateDenominator\"),\n  u64(\"tradeFeeNumerator\"),\n  u64(\"tradeFeeDenominator\"),\n  u64(\"pnlNumerator\"),\n  u64(\"pnlDenominator\"),\n  u64(\"swapFeeNumerator\"),\n  u64(\"swapFeeDenominator\"),\n  // OutPutData\n  u64(\"baseNeedTakePnl\"),\n  u64(\"quoteNeedTakePnl\"),\n  u64(\"quoteTotalPnl\"),\n  u64(\"baseTotalPnl\"),\n  u64(\"poolOpenTime\"),\n  u64(\"punishPcAmount\"),\n  u64(\"punishCoinAmount\"),\n  u64(\"orderbookToInitTime\"),\n  u128(\"swapBaseInAmount\"),\n  u128(\"swapQuoteOutAmount\"),\n  u128(\"swapQuoteInAmount\"),\n  u128(\"swapBaseOutAmount\"),\n  u64(\"swapQuote2BaseFee\"),\n  u64(\"swapBase2QuoteFee\"),\n\n  publicKey(\"baseVault\"),\n  publicKey(\"quoteVault\"),\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"lpMint\"),\n\n  publicKey(\"modelDataAccount\"),\n  publicKey(\"openOrders\"),\n  publicKey(\"marketId\"),\n  publicKey(\"marketProgramId\"),\n  publicKey(\"targetOrders\"),\n  publicKey(\"owner\"),\n  seq(u64(), 64, \"padding\"),\n]);\n\nexport const addLiquidityLayout = struct([\n  u8(\"instruction\"),\n  u64(\"baseAmountIn\"),\n  u64(\"quoteAmountIn\"),\n  u64(\"fixedSide\"),\n  u64(\"otherAmountMin\"),\n]);\n\nexport const removeLiquidityLayout = struct([\n  u8(\"instruction\"),\n  u64(\"lpAmount\"),\n  u64(\"baseAmountMin\"),\n  u64(\"quoteAmountMin\"),\n]);\n\nexport type LiquidityStateLayoutV5 = typeof liquidityStateV5Layout;\nexport type LiquidityStateV5 = GetStructureSchema<LiquidityStateLayoutV5>;\n\nexport type LiquidityState = LiquidityStateV4 | LiquidityStateV5;\nexport type LiquidityStateLayout = LiquidityStateLayoutV4 | LiquidityStateLayoutV5;\n\n/* ================= index ================= */\n// version => liquidity state layout\nexport const LIQUIDITY_VERSION_TO_STATE_LAYOUT: {\n  [version: number]: LiquidityStateLayout;\n} = {\n  4: liquidityStateV4Layout,\n  5: liquidityStateV5Layout,\n};\nexport const createPoolFeeLayout = struct([u64(\"fee\")]);\n","import { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { seq, struct, u64 } from \"../../marshmallow\";\n\nexport const MODEL_DATA_PUBKEY = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\nconst ELEMENT_SIZE = 50000;\n\nexport const DataElement = struct([u64(\"x\"), u64(\"y\"), u64(\"price\")]);\n\nexport const modelDataInfoLayout = struct([\n  u64(\"accountType\"),\n  u64(\"status\"),\n  u64(\"multiplier\"),\n  u64(\"validDataCount\"),\n  seq(DataElement, ELEMENT_SIZE, \"DataElement\"),\n]);\n\nexport interface StableModelLayout {\n  accountType: number;\n  status: number;\n  multiplier: number;\n  validDataCount: number;\n  DataElement: { x: number; y: number; price: number }[];\n}\n\nfunction estimateRangeByXyReal(_xReal: number, _yReal: number): number[] {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction estimateRangeByX(_x: number): number[] {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction estimateRangeByY(_y: number): number[] {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction getMininumRangeByXyReal(\n  layoutData: StableModelLayout,\n  xReal: number,\n  yReal: number,\n): [number, number, boolean] {\n  const [min, max] = estimateRangeByXyReal(xReal, yReal);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = (xReal * layoutData.multiplier) / yReal;\n  while (minRangeIdx <= maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n    if (mid === 0 || mid >= ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n    const cur = (layoutData.DataElement[mid].x * layoutData.multiplier) / layoutData.DataElement[mid].y;\n    const left = (layoutData.DataElement[mid - 1].x * layoutData.multiplier) / layoutData.DataElement[mid - 1].y;\n    const right = (layoutData.DataElement[mid + 1].x * layoutData.multiplier) / layoutData.DataElement[mid + 1].y;\n\n    if (target === cur) {\n      return [mid, mid, true];\n    } else if (target === left) {\n      return [mid - 1, mid - 1, true];\n    } else if (target === right) {\n      return [mid + 1, mid + 1, true];\n    } else if (target < left) {\n      maxRangeIdx = mid - 1;\n    } else if (target > left && target < cur) {\n      return [mid - 1, mid, true];\n    } else if (target > cur && target < right) {\n      return [mid, mid + 1, true];\n    } else {\n      minRangeIdx = mid + 1;\n    }\n  }\n  return [mid, mid, false];\n}\nfunction getRatio(layoutData: StableModelLayout, xReal: number, yReal: number): number {\n  const [minRangeIdx, maxRangeIdx, find] = getMininumRangeByXyReal(layoutData, xReal, yReal);\n\n  if (!find) {\n    return 0;\n  }\n\n  if (minRangeIdx === maxRangeIdx) {\n    const x = layoutData.DataElement[minRangeIdx].x;\n    const ratio = (xReal * layoutData.multiplier) / x;\n    return ratio;\n  } else {\n    const x1 = layoutData.DataElement[minRangeIdx].x;\n    const y1 = layoutData.DataElement[minRangeIdx].y;\n    const x2 = layoutData.DataElement[maxRangeIdx].x;\n    const y2 = layoutData.DataElement[maxRangeIdx].y;\n\n    const xDenominator = yReal * (x2 * y1 - x1 * y2);\n    const xNumerator1 = x1 * xDenominator;\n    const xNumerator2 = (x2 - x1) * (xReal * y1 - x1 * yReal) * y2;\n\n    const xNumerator = xNumerator1 + xNumerator2;\n    const ratio = (xReal * layoutData.multiplier * xDenominator) / xNumerator;\n    return ratio;\n  }\n}\n\nfunction realToTable(layoutData: StableModelLayout, realValue: number, ratio: number): number {\n  return (realValue * layoutData.multiplier) / ratio;\n}\n\nfunction tableToReal(layoutData: StableModelLayout, tableValue: number, ratio: number): number {\n  return (tableValue * ratio) / layoutData.multiplier;\n}\n\nfunction getMinimumRangeByX(layoutData: StableModelLayout, x: number): [number, number, boolean] {\n  const [min, max] = estimateRangeByX(x);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = x;\n  while (minRangeIdx < maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n\n    if (mid <= 0 || mid > ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n    const cur = layoutData.DataElement[mid].x;\n    const left = layoutData.DataElement[mid - 1].x;\n    const right = layoutData.DataElement[mid + 1].x;\n\n    if (target === cur) return [mid, mid, true];\n    else if (target === left) return [mid - 1, mid - 1, true];\n    else if (target === right) return [mid + 1, mid + 1, true];\n    else if (target < left) maxRangeIdx = mid - 1;\n    else if (target > left && target < cur) return [mid - 1, mid, true];\n    else if (target > cur && target < right) return [mid, mid + 1, true];\n    else minRangeIdx = mid + 1;\n  }\n  return [mid, mid, false];\n}\n\nfunction getMinimumRangeByY(layoutData: StableModelLayout, y: number): [number, number, boolean] {\n  const [min, max] = estimateRangeByY(y);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = y;\n  while (minRangeIdx <= maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n    if (mid <= 0 || mid >= ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n\n    const cur = layoutData.DataElement[mid].y;\n    const left = layoutData.DataElement[mid - 1].y;\n    const right = layoutData.DataElement[mid + 1].y;\n    if (target === cur) return [mid, mid, true];\n    else if (target === left) return [mid - 1, mid - 1, true];\n    else if (target === right) return [mid + 1, mid + 1, true];\n    else if (target < right) {\n      minRangeIdx = mid + 1;\n    } else if (target < left && target > cur) return [mid - 1, mid, true];\n    else if (target < cur && target > right) return [mid, mid + 1, true];\n    else maxRangeIdx = mid - 1;\n  }\n  return [mid, mid, false];\n}\n\nfunction getDataByX(\n  layoutData: StableModelLayout,\n  x: number,\n  dx: number,\n  priceUp: boolean,\n): [number, number, boolean, boolean] {\n  const xWithDx = priceUp ? x + dx : x - dx;\n  const [minIdx, maxIdx, find] = getMinimumRangeByX(layoutData, xWithDx);\n  if (!find) return [0, 0, false, find];\n\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].y, false, find];\n  else {\n    const x1 = layoutData.DataElement[minIdx].x;\n    const x2 = layoutData.DataElement[maxIdx].x;\n    const p1 = layoutData.DataElement[minIdx].price;\n    const p2 = layoutData.DataElement[maxIdx].price;\n    const y1 = layoutData.DataElement[minIdx].y;\n    const y2 = layoutData.DataElement[maxIdx].y;\n\n    if (x >= x1 && x <= x2) {\n      if (priceUp) return [p2, y2, true, find];\n      else return [p1, y1, true, find];\n    } else {\n      let p, y;\n      if (priceUp) {\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\n        y = y1 - ((xWithDx - x1) * layoutData.multiplier) / p2;\n      } else {\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\n        y = y2 + ((x2 - xWithDx) * layoutData.multiplier) / p1;\n      }\n      return [p, y, false, find];\n    }\n  }\n}\n\nfunction getDataByY(\n  layoutData: StableModelLayout,\n  y: number,\n  dy: number,\n  priceUp: boolean,\n): [number, number, boolean, boolean] {\n  const yWithDy = priceUp ? y - dy : y + dy;\n  const [minIdx, maxIdx, find] = getMinimumRangeByY(layoutData, yWithDy);\n  if (!find) return [0, 0, false, find];\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].x, false, find];\n  else {\n    const x1 = layoutData.DataElement[minIdx].x;\n    const x2 = layoutData.DataElement[maxIdx].x;\n    const p1 = layoutData.DataElement[minIdx].price;\n    const p2 = layoutData.DataElement[maxIdx].price;\n    const y1 = layoutData.DataElement[minIdx].y;\n    const y2 = layoutData.DataElement[maxIdx].y;\n\n    if (y >= y2 && y <= y1) {\n      return priceUp ? [p2, x2, true, find] : [p1, x1, true, find];\n    } else {\n      let p, x;\n      if (priceUp) {\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\n        x = x1 + (p2 * (y1 - yWithDy)) / layoutData.multiplier;\n      } else {\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\n        x = x2 - (p1 * (yWithDy - y2)) / layoutData.multiplier;\n      }\n      return [p, x, false, find];\n    }\n  }\n}\n\nfunction getMidPrice(layoutData: StableModelLayout, x: number): number {\n  const ret = getDataByX(layoutData, x, 0, false);\n  if (ret[3]) return ret[0];\n  else return 0;\n}\n\nexport function getDyByDxBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dxReal: number): number {\n  const ratio = getRatio(layoutData, xReal, yReal);\n  const x = realToTable(layoutData, xReal, ratio);\n  const y = realToTable(layoutData, yReal, ratio);\n  const dx = realToTable(layoutData, dxReal, ratio);\n  const priceUp = true;\n  const [p, y2, lessTrade, find] = getDataByX(layoutData, x, dx, priceUp);\n  if (!find) return 0;\n  if (lessTrade) {\n    const dyReal = (dxReal * layoutData.multiplier) / p;\n    return dyReal;\n  } else {\n    const dy = y - y2;\n    const dyReal = tableToReal(layoutData, dy, ratio);\n    return dyReal;\n  }\n}\n\nexport function getDxByDyBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dyReal: number): number {\n  const ratio = getRatio(layoutData, xReal, yReal);\n  const x = realToTable(layoutData, xReal, ratio);\n  const y = realToTable(layoutData, yReal, ratio);\n  const dy = realToTable(layoutData, dyReal, ratio);\n  const priceUp = false;\n  const [p, x2, lessTrade, find] = getDataByY(layoutData, y, dy, priceUp);\n  if (!find) return 0;\n  if (lessTrade) {\n    const dxReal = (dyReal * p) / layoutData.multiplier;\n    return dxReal;\n  } else {\n    const dx = x - x2;\n    const dxReal = tableToReal(layoutData, dx, ratio);\n    return dxReal;\n  }\n}\n\nexport function formatLayout(buffer: Buffer): StableModelLayout {\n  const layoutInfo = modelDataInfoLayout.decode(buffer);\n  return {\n    accountType: layoutInfo.accountType.toNumber(),\n    status: layoutInfo.status.toNumber(),\n    multiplier: layoutInfo.multiplier.toNumber(),\n    validDataCount: layoutInfo.validDataCount.toNumber(),\n    DataElement: layoutInfo.DataElement.map((item: any) => ({\n      x: item.x.toNumber(),\n      y: item.y.toNumber(),\n      price: item.price.toNumber(),\n    })),\n  };\n}\n\nexport function getStablePrice(\n  layoutData: StableModelLayout,\n  coinReal: number,\n  pcReal: number,\n  baseCoin: boolean,\n): number {\n  const price =\n    getMidPrice(layoutData, realToTable(layoutData, coinReal, getRatio(layoutData, coinReal, pcReal))) /\n    layoutData.multiplier;\n  return baseCoin ? price : 1 / price;\n}\n\nexport class StableLayout {\n  private readonly connection: Connection;\n  private _layoutData: StableModelLayout = {\n    accountType: 0,\n    status: 0,\n    multiplier: 0,\n    validDataCount: 0,\n    DataElement: [],\n  };\n\n  constructor({ connection }: { connection: Connection }) {\n    this.connection = connection;\n  }\n\n  get stableModelData(): StableModelLayout {\n    return this._layoutData;\n  }\n\n  public async initStableModelLayout(): Promise<void> {\n    if (this._layoutData.validDataCount === 0) {\n      if (this.connection) {\n        const acc = await this.connection.getAccountInfo(MODEL_DATA_PUBKEY);\n        if (acc) this._layoutData = formatLayout(acc?.data);\n      }\n    }\n  }\n}\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport { AmmV4Keys, AmmV5Keys } from \"../../api/type\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  findProgramAddress,\n  parseSimulateLogToJson,\n  parseSimulateValue,\n  simulateMultipleInstruction,\n} from \"@/common/txTool/txUtils\";\nimport { toApiV3Token } from \"../../raydium/token/utils\";\nimport { makeSimulatePoolInfoInstruction } from \"./instruction\";\nimport { getSerumAssociatedAuthority } from \"./serum\";\nimport { StableLayout } from \"./stable\";\nimport { AmmRpcData, ComputeAmountOutParam, LiquidityPoolKeys } from \"./type\";\n\ntype AssociatedName =\n  | \"amm_associated_seed\"\n  | \"lp_mint_associated_seed\"\n  | \"coin_vault_associated_seed\"\n  | \"pc_vault_associated_seed\"\n  | \"lp_mint_associated_seed\"\n  | \"temp_lp_token_associated_seed\"\n  | \"open_order_associated_seed\"\n  | \"target_associated_seed\"\n  | \"withdraw_associated_seed\";\n\ninterface GetAssociatedParam {\n  name: AssociatedName;\n  programId: PublicKey;\n  marketId: PublicKey;\n}\n\nexport function getAssociatedConfigId({ programId }: { programId: PublicKey }): PublicKey {\n  const { publicKey } = findProgramAddress([Buffer.from(\"amm_config_account_seed\", \"utf-8\")], programId);\n  return publicKey;\n}\n\nexport function getLiquidityAssociatedId({ name, programId, marketId }: GetAssociatedParam): PublicKey {\n  const { publicKey } = findProgramAddress(\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(name, \"utf-8\")],\n    programId,\n  );\n  return publicKey;\n}\n\nexport function getAssociatedOpenOrders({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n  const { publicKey } = findProgramAddress(\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"open_order_associated_seed\", \"utf-8\")],\n    programId,\n  );\n  return publicKey;\n}\n\nexport function getLiquidityAssociatedAuthority({ programId }: { programId: PublicKey }): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])], programId);\n}\n\nexport function getAssociatedPoolKeys({\n  version,\n  marketVersion,\n  marketId,\n  baseMint,\n  quoteMint,\n  baseDecimals,\n  quoteDecimals,\n  programId,\n  marketProgramId,\n}: {\n  version: 4 | 5;\n  marketVersion: 3;\n  marketId: PublicKey;\n  baseMint: PublicKey;\n  quoteMint: PublicKey;\n  baseDecimals: number;\n  quoteDecimals: number;\n  programId: PublicKey;\n  marketProgramId: PublicKey;\n}): LiquidityPoolKeys {\n  const id = getLiquidityAssociatedId({ name: \"amm_associated_seed\", programId, marketId });\n  const lpMint = getLiquidityAssociatedId({ name: \"lp_mint_associated_seed\", programId, marketId });\n  const { publicKey: authority, nonce } = getLiquidityAssociatedAuthority({ programId });\n  const baseVault = getLiquidityAssociatedId({ name: \"coin_vault_associated_seed\", programId, marketId });\n  const quoteVault = getLiquidityAssociatedId({ name: \"pc_vault_associated_seed\", programId, marketId });\n  const lpVault = getLiquidityAssociatedId({ name: \"temp_lp_token_associated_seed\", programId, marketId });\n  const openOrders = getAssociatedOpenOrders({ programId, marketId });\n  const targetOrders = getLiquidityAssociatedId({ name: \"target_associated_seed\", programId, marketId });\n  const withdrawQueue = getLiquidityAssociatedId({ name: \"withdraw_associated_seed\", programId, marketId });\n\n  const { publicKey: marketAuthority } = getSerumAssociatedAuthority({\n    programId: marketProgramId,\n    marketId,\n  });\n\n  return {\n    // base\n    id,\n    baseMint,\n    quoteMint,\n    lpMint,\n    baseDecimals,\n    quoteDecimals,\n    lpDecimals: baseDecimals,\n    // version\n    version,\n    programId,\n    // keys\n    authority,\n    nonce,\n    baseVault,\n    quoteVault,\n    lpVault,\n    openOrders,\n    targetOrders,\n    withdrawQueue,\n    // market version\n    marketVersion,\n    marketProgramId,\n    // market keys\n    marketId,\n    marketAuthority,\n    lookupTableAccount: PublicKey.default,\n    configId: getAssociatedConfigId({ programId }),\n  };\n}\n\nlet stableLayout: StableLayout | undefined;\n\nexport async function fetchMultipleInfo({\n  connection,\n  poolKeysList,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  config,\n}: {\n  connection: Connection;\n  poolKeysList: (AmmV4Keys | AmmV5Keys)[];\n  config: any;\n}): Promise<\n  {\n    status: BN;\n    baseDecimals: number;\n    quoteDecimals: number;\n    lpDecimals: number;\n    baseReserve: BN;\n    quoteReserve: BN;\n    lpSupply: BN;\n    startTime: BN;\n  }[]\n> {\n  if (!stableLayout) {\n    stableLayout = new StableLayout({ connection });\n    await stableLayout.initStableModelLayout();\n  }\n\n  const instructions = poolKeysList.map((pool) => makeSimulatePoolInfoInstruction({ poolKeys: pool }));\n  const logs = await simulateMultipleInstruction(\n    connection,\n    instructions.map((i) => i.instruction),\n    \"GetPoolData\",\n  );\n\n  const poolsInfo = logs.map((log) => {\n    const json = parseSimulateLogToJson(log, \"GetPoolData\");\n\n    const status = new BN(parseSimulateValue(json, \"status\"));\n    const baseDecimals = Number(parseSimulateValue(json, \"coin_decimals\"));\n    const quoteDecimals = Number(parseSimulateValue(json, \"pc_decimals\"));\n    const lpDecimals = Number(parseSimulateValue(json, \"lp_decimals\"));\n    const baseReserve = new BN(parseSimulateValue(json, \"pool_coin_amount\"));\n    const quoteReserve = new BN(parseSimulateValue(json, \"pool_pc_amount\"));\n    const lpSupply = new BN(parseSimulateValue(json, \"pool_lp_supply\"));\n    // TODO fix it when split stable\n    let startTime = \"0\";\n    try {\n      startTime = parseSimulateValue(json, \"pool_open_time\");\n    } catch (error) {\n      //\n    }\n\n    return {\n      status,\n      baseDecimals,\n      quoteDecimals,\n      lpDecimals,\n      baseReserve,\n      quoteReserve,\n      lpSupply,\n      startTime: new BN(startTime),\n    };\n  });\n\n  return poolsInfo;\n}\n\nconst mockRewardData = {\n  volume: 0,\n  volumeQuote: 0,\n  volumeFee: 0,\n  apr: 0,\n  feeApr: 0,\n  priceMin: 0,\n  priceMax: 0,\n  rewardApr: [],\n};\n\nexport const toAmmComputePoolInfo = (\n  poolData: Record<string, AmmRpcData>,\n): Record<string, ComputeAmountOutParam[\"poolInfo\"]> => {\n  const data: Record<string, ComputeAmountOutParam[\"poolInfo\"]> = {};\n  const tokenProgramStr = TOKEN_PROGRAM_ID.toBase58();\n\n  Object.keys(poolData).map((poolId) => {\n    const poolInfo = poolData[poolId];\n    const [mintA, mintB] = [poolInfo.baseMint.toBase58(), poolInfo.quoteMint.toBase58()];\n    data[poolId] = {\n      id: poolId,\n      version: 4,\n      status: poolInfo.status.toNumber(),\n      programId: poolInfo.programId.toBase58(), // needed\n      mintA: toApiV3Token({\n        address: mintA, // needed\n        programId: tokenProgramStr,\n        decimals: poolInfo.baseDecimal.toNumber(),\n      }),\n      mintB: toApiV3Token({\n        address: mintB, // needed\n        programId: tokenProgramStr,\n        decimals: poolInfo.quoteDecimal.toNumber(),\n      }),\n      rewardDefaultInfos: [],\n      rewardDefaultPoolInfos: \"Ecosystem\",\n      price: poolInfo.poolPrice.toNumber(),\n      mintAmountA: new Decimal(poolInfo.mintAAmount.toString()).div(10 ** poolInfo.baseDecimal.toNumber()).toNumber(),\n      mintAmountB: new Decimal(poolInfo.mintBAmount.toString()).div(10 ** poolInfo.quoteDecimal.toNumber()).toNumber(),\n      baseReserve: poolInfo.baseReserve, // needed\n      quoteReserve: poolInfo.quoteReserve, // needed\n      feeRate: new Decimal(poolInfo.tradeFeeNumerator.toString())\n        .div(poolInfo.tradeFeeDenominator.toString())\n        .toNumber(),\n      openTime: poolInfo.poolOpenTime.toString(),\n      tvl: 0,\n      day: mockRewardData,\n      week: mockRewardData,\n      month: mockRewardData,\n      pooltype: [],\n      farmUpcomingCount: 0,\n      farmOngoingCount: 0,\n      farmFinishedCount: 0,\n      type: \"Standard\",\n      marketId: poolInfo.marketId.toBase58(),\n      configId: getAssociatedConfigId({ programId: poolInfo.programId }).toBase58(),\n      lpPrice: 0,\n      lpAmount: new Decimal(poolInfo.lpReserve.toString())\n        .div(10 ** Math.min(poolInfo.baseDecimal.toNumber(), poolInfo.quoteDecimal.toNumber()))\n        .toNumber(),\n      lpMint: toApiV3Token({\n        address: poolInfo.lpMint.toBase58(),\n        programId: tokenProgramStr,\n        decimals: Math.min(poolInfo.baseDecimal.toNumber(), poolInfo.quoteDecimal.toNumber()),\n      }),\n      burnPercent: 0,\n    };\n  });\n  return data;\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport { createLogger } from \"../../common/logger\";\nimport { SerumVersion } from \"../serum\";\nimport { LIQUIDITY_VERSION_TO_SERUM_VERSION } from \"./constant\";\n\nconst logger = createLogger(\"Raydium_liquidity_serum\");\n\nexport function getSerumVersion(version: number): SerumVersion {\n  const serumVersion = LIQUIDITY_VERSION_TO_SERUM_VERSION[version];\n  if (!serumVersion) logger.logWithError(\"invalid version\", \"version\", version);\n\n  return serumVersion;\n}\n\nexport function getSerumAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  const seeds = [marketId.toBuffer()];\n\n  let nonce = 0;\n  let publicKey: PublicKey;\n\n  while (nonce < 100) {\n    try {\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\n      publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n      nonce++;\n      continue;\n    }\n    return { publicKey, nonce };\n  }\n\n  logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\n    programId,\n    marketId,\n  });\n  throw new Error(\"unable to find a viable program address nonce\");\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { BN_ZERO } from \"@/common/bignumber\";\nimport { MakeMultiTxData } from \"@/common/txTool/txTool\";\nimport { TxVersion } from \"@/common/txTool/txType\";\nimport { ComputeBudgetConfig } from \"../../raydium/type\";\nimport { generatePubKey } from \"../account/util\";\nimport ModuleBase from \"../moduleBase\";\nimport { makeCreateMarketInstruction } from \"./instrument\";\n\nexport interface MarketExtInfo {\n  address: {\n    marketId: PublicKey;\n    requestQueue: PublicKey;\n    eventQueue: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    baseVault: PublicKey;\n    quoteVault: PublicKey;\n    baseMint: PublicKey;\n    quoteMint: PublicKey;\n  };\n}\n\nexport default class MarketV2 extends ModuleBase {\n  public async create<T extends TxVersion>({\n    baseInfo,\n    quoteInfo,\n    lotSize, // 1\n    tickSize, // 0.01\n    dexProgramId,\n    requestQueueSpace,\n    eventQueueSpace,\n    orderbookQueueSpace,\n    lowestFeeMarket,\n    assignSeed,\n    txVersion,\n    computeBudgetConfig,\n  }: {\n    baseInfo: {\n      mint: PublicKey;\n      decimals: number;\n    };\n    quoteInfo: {\n      mint: PublicKey;\n      decimals: number;\n    };\n    lotSize: number;\n    tickSize: number;\n    dexProgramId: PublicKey;\n    eventQueue?: PublicKey;\n    requestQueue?: PublicKey;\n    requestQueueSpace?: number;\n    eventQueueSpace?: number;\n    orderbookQueueSpace?: number;\n\n    lowestFeeMarket?: boolean;\n    assignSeed?: string;\n\n    txVersion?: T;\n    computeBudgetConfig?: ComputeBudgetConfig;\n  }): Promise<MakeMultiTxData<T, MarketExtInfo>> {\n    const wallet = this.scope.ownerPubKey;\n    const seed = assignSeed\n      ? `${baseInfo.mint.toBase58().slice(0, 10)}-${quoteInfo.mint.toBase58().slice(0, 10)}-${assignSeed}`\n      : undefined;\n    const market = generatePubKey({\n      fromPublicKey: wallet,\n      programId: dexProgramId,\n      assignSeed: seed ? `${seed}-market` : seed,\n    });\n    const requestQueue = generatePubKey({\n      fromPublicKey: wallet,\n      programId: dexProgramId,\n      assignSeed: seed ? `${seed}-request` : seed,\n    });\n    const eventQueue = generatePubKey({\n      fromPublicKey: wallet,\n      programId: dexProgramId,\n      assignSeed: seed ? `${seed}-event` : seed,\n    });\n    const bids = generatePubKey({\n      fromPublicKey: wallet,\n      programId: dexProgramId,\n      assignSeed: seed ? `${seed}-bids` : seed,\n    });\n    const asks = generatePubKey({\n      fromPublicKey: wallet,\n      programId: dexProgramId,\n      assignSeed: seed ? `${seed}-asks` : seed,\n    });\n    const baseVault = generatePubKey({\n      fromPublicKey: wallet,\n      programId: TOKEN_PROGRAM_ID,\n      assignSeed: seed ? `${seed}-baseVault` : seed,\n    });\n    const quoteVault = generatePubKey({\n      fromPublicKey: wallet,\n      programId: TOKEN_PROGRAM_ID,\n      assignSeed: seed ? `${seed}-quoteVault` : seed,\n    });\n    const feeRateBps = 0;\n    const quoteDustThreshold = new BN(100);\n    function getVaultOwnerAndNonce() {\n      const vaultSignerNonce = new BN(0);\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        try {\n          const vaultOwner = PublicKey.createProgramAddressSync(\n            [market.publicKey.toBuffer(), vaultSignerNonce.toArrayLike(Buffer, \"le\", 8)],\n            dexProgramId,\n          );\n          return { vaultOwner, vaultSignerNonce };\n        } catch (e) {\n          vaultSignerNonce.iaddn(1);\n          if (vaultSignerNonce.gt(new BN(25555))) throw Error(\"find vault owner error\");\n        }\n      }\n    }\n    const { vaultOwner, vaultSignerNonce } = getVaultOwnerAndNonce();\n    const baseLotSize = new BN(Math.round(10 ** baseInfo.decimals * lotSize));\n    const quoteLotSize = new BN(Math.round(lotSize * 10 ** quoteInfo.decimals * tickSize));\n\n    if (baseLotSize.eq(BN_ZERO)) throw Error(\"lot size is too small\");\n    if (quoteLotSize.eq(BN_ZERO)) throw Error(\"tick size or lot size is too small\");\n    const allTxArr = await makeCreateMarketInstruction({\n      connection: this.scope.connection,\n      wallet: this.scope.ownerPubKey,\n      marketInfo: {\n        programId: dexProgramId,\n        id: market,\n        baseMint: baseInfo.mint,\n        quoteMint: quoteInfo.mint,\n        baseVault,\n        quoteVault,\n        vaultOwner,\n        requestQueue,\n        eventQueue,\n        bids,\n        asks,\n\n        feeRateBps,\n        quoteDustThreshold,\n        vaultSignerNonce,\n        baseLotSize,\n        quoteLotSize,\n\n        requestQueueSpace,\n        eventQueueSpace,\n        orderbookQueueSpace,\n\n        lowestFeeMarket,\n      },\n    });\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addInstruction({\n      instructions: allTxArr[0].transaction.instructions,\n      signers: allTxArr[0].signer,\n    });\n\n    for await (const txData of allTxArr.slice(1, allTxArr.length)) {\n      txBuilder.addInstruction({\n        instructions: txData.transaction.instructions,\n        signers: txData.signer,\n        instructionTypes: txData.instructionTypes,\n      });\n    }\n\n    if (txVersion === TxVersion.V0)\n      return txBuilder.sizeCheckBuildV0({\n        computeBudgetConfig,\n        address: {\n          marketId: market.publicKey,\n          requestQueue: requestQueue.publicKey,\n          eventQueue: eventQueue.publicKey,\n          bids: bids.publicKey,\n          asks: asks.publicKey,\n          baseVault: baseVault.publicKey,\n          quoteVault: quoteVault.publicKey,\n          baseMint: new PublicKey(baseInfo.mint),\n          quoteMint: new PublicKey(quoteInfo.mint),\n        },\n      }) as Promise<MakeMultiTxData<T, MarketExtInfo>>;\n\n    return txBuilder.sizeCheckBuild({\n      computeBudgetConfig,\n      address: {\n        marketId: market.publicKey,\n        requestQueue: requestQueue.publicKey,\n        eventQueue: eventQueue.publicKey,\n        bids: bids.publicKey,\n        asks: asks.publicKey,\n        baseVault: baseVault.publicKey,\n        quoteVault: quoteVault.publicKey,\n        baseMint: new PublicKey(baseInfo.mint),\n        quoteMint: new PublicKey(quoteInfo.mint),\n      },\n    }) as Promise<MakeMultiTxData<T, MarketExtInfo>>;\n  }\n}\n","import {\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { createInitializeAccountInstruction, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { InstructionType } from \"@/common/txTool/txType\";\nimport { struct, u16, u32, u64, u8 } from \"../../marshmallow\";\nimport { MARKET_STATE_LAYOUT_V2 } from \"./layout\";\n\ntype Transactions = {\n  transaction: Transaction;\n  signer?: Keypair[] | undefined;\n  instructionTypes?: string[];\n}[];\n\nexport function initializeMarket({\n  programId,\n  marketInfo,\n}: {\n  programId: PublicKey;\n  marketInfo: {\n    id: PublicKey;\n    requestQueue: PublicKey;\n    eventQueue: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    baseVault: PublicKey;\n    quoteVault: PublicKey;\n    baseMint: PublicKey;\n    quoteMint: PublicKey;\n    authority?: PublicKey;\n    pruneAuthority?: PublicKey;\n\n    baseLotSize: BN;\n    quoteLotSize: BN;\n    feeRateBps: number;\n    vaultSignerNonce: BN;\n    quoteDustThreshold: BN;\n  };\n}): TransactionInstruction {\n  const dataLayout = struct([\n    u8(\"version\"),\n    u32(\"instruction\"),\n    u64(\"baseLotSize\"),\n    u64(\"quoteLotSize\"),\n    u16(\"feeRateBps\"),\n    u64(\"vaultSignerNonce\"),\n    u64(\"quoteDustThreshold\"),\n  ]);\n\n  const keys = [\n    { pubkey: marketInfo.id, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.requestQueue, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.eventQueue, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.bids, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.asks, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.baseVault, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.quoteVault, isSigner: false, isWritable: true },\n    { pubkey: marketInfo.baseMint, isSigner: false, isWritable: false },\n    { pubkey: marketInfo.quoteMint, isSigner: false, isWritable: false },\n    // Use a dummy address if using the new dex upgrade to save tx space.\n    {\n      pubkey: marketInfo.authority ? marketInfo.quoteMint : SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ]\n    .concat(marketInfo.authority ? { pubkey: marketInfo.authority, isSigner: false, isWritable: false } : [])\n    .concat(\n      marketInfo.authority && marketInfo.pruneAuthority\n        ? { pubkey: marketInfo.pruneAuthority, isSigner: false, isWritable: false }\n        : [],\n    );\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      version: 0,\n      instruction: 0,\n      baseLotSize: marketInfo.baseLotSize,\n      quoteLotSize: marketInfo.quoteLotSize,\n      feeRateBps: marketInfo.feeRateBps,\n      vaultSignerNonce: marketInfo.vaultSignerNonce,\n      quoteDustThreshold: marketInfo.quoteDustThreshold,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nexport async function makeCreateMarketInstruction({\n  connection,\n  wallet,\n  marketInfo,\n}: {\n  connection: Connection;\n  wallet: PublicKey;\n  marketInfo: {\n    programId: PublicKey;\n    id: { publicKey: PublicKey; seed: string };\n    baseMint: PublicKey;\n    quoteMint: PublicKey;\n    baseVault: { publicKey: PublicKey; seed: string };\n    quoteVault: { publicKey: PublicKey; seed: string };\n    vaultOwner: PublicKey;\n\n    requestQueue: { publicKey: PublicKey; seed: string };\n    eventQueue: { publicKey: PublicKey; seed: string };\n    bids: { publicKey: PublicKey; seed: string };\n    asks: { publicKey: PublicKey; seed: string };\n\n    feeRateBps: number;\n    vaultSignerNonce: BN;\n    quoteDustThreshold: BN;\n\n    baseLotSize: BN;\n    quoteLotSize: BN;\n\n    requestQueueSpace?: number;\n    eventQueueSpace?: number;\n    orderbookQueueSpace?: number;\n\n    lowestFeeMarket?: boolean;\n  };\n}): Promise<Transactions> {\n  const tx1 = new Transaction();\n  const accountLamports = await connection.getMinimumBalanceForRentExemption(165);\n  tx1.add(\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.baseVault.seed,\n      newAccountPubkey: marketInfo.baseVault.publicKey,\n      lamports: accountLamports,\n      space: 165,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.quoteVault.seed,\n      newAccountPubkey: marketInfo.quoteVault.publicKey,\n      lamports: accountLamports,\n      space: 165,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    createInitializeAccountInstruction(marketInfo.baseVault.publicKey, marketInfo.baseMint, marketInfo.vaultOwner),\n    createInitializeAccountInstruction(marketInfo.quoteVault.publicKey, marketInfo.quoteMint, marketInfo.vaultOwner),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.id.seed,\n      newAccountPubkey: marketInfo.id.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(MARKET_STATE_LAYOUT_V2.span),\n      space: MARKET_STATE_LAYOUT_V2.span,\n      programId: marketInfo.programId,\n    }),\n  );\n\n  const tx2 = new Transaction();\n  tx2.add(\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.requestQueue.seed,\n      newAccountPubkey: marketInfo.requestQueue.publicKey,\n      lamports: marketInfo.lowestFeeMarket\n        ? 6208320\n        : await connection.getMinimumBalanceForRentExemption(marketInfo.requestQueueSpace ?? 5120 + 12),\n      space: marketInfo.lowestFeeMarket ? 764 : marketInfo.requestQueueSpace ?? 5120 + 12,\n      programId: marketInfo.programId,\n    }),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.eventQueue.seed,\n      newAccountPubkey: marketInfo.eventQueue.publicKey,\n      lamports: marketInfo.lowestFeeMarket\n        ? 79594560\n        : await connection.getMinimumBalanceForRentExemption(marketInfo.eventQueueSpace ?? 262144 + 12),\n      space: marketInfo.lowestFeeMarket ? 11308 : marketInfo.eventQueueSpace ?? 262144 + 12,\n      programId: marketInfo.programId,\n    }),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.bids.seed,\n      newAccountPubkey: marketInfo.bids.publicKey,\n      lamports: marketInfo.lowestFeeMarket\n        ? 101977920\n        : await connection.getMinimumBalanceForRentExemption(marketInfo.orderbookQueueSpace ?? 65536 + 12),\n      space: marketInfo.lowestFeeMarket ? 14524 : marketInfo.orderbookQueueSpace ?? 65536 + 12,\n      programId: marketInfo.programId,\n    }),\n    SystemProgram.createAccountWithSeed({\n      fromPubkey: wallet,\n      basePubkey: wallet,\n      seed: marketInfo.asks.seed,\n      newAccountPubkey: marketInfo.asks.publicKey,\n      lamports: marketInfo.lowestFeeMarket\n        ? 101977920\n        : await connection.getMinimumBalanceForRentExemption(marketInfo.orderbookQueueSpace ?? 65536 + 12),\n      space: marketInfo.lowestFeeMarket ? 14524 : marketInfo.orderbookQueueSpace ?? 65536 + 12,\n      programId: marketInfo.programId,\n    }),\n    initializeMarket({\n      programId: marketInfo.programId,\n      marketInfo: {\n        id: marketInfo.id.publicKey,\n        requestQueue: marketInfo.requestQueue.publicKey,\n        eventQueue: marketInfo.eventQueue.publicKey,\n        bids: marketInfo.bids.publicKey,\n        asks: marketInfo.asks.publicKey,\n        baseVault: marketInfo.baseVault.publicKey,\n        quoteVault: marketInfo.quoteVault.publicKey,\n        baseMint: marketInfo.baseMint,\n        quoteMint: marketInfo.quoteMint,\n\n        baseLotSize: marketInfo.baseLotSize,\n        quoteLotSize: marketInfo.quoteLotSize,\n        feeRateBps: marketInfo.feeRateBps,\n        vaultSignerNonce: marketInfo.vaultSignerNonce,\n        quoteDustThreshold: marketInfo.quoteDustThreshold,\n      },\n    }),\n  );\n\n  return [\n    {\n      transaction: tx1,\n      signer: [],\n      instructionTypes: [\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.InitAccount,\n        InstructionType.InitAccount,\n      ],\n    },\n    {\n      transaction: tx2,\n      signer: [],\n      instructionTypes: [\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.CreateAccount,\n        InstructionType.InitMarket,\n      ],\n    },\n  ];\n}\n","import { blob, publicKey, struct, u64, WideBits } from \"../../marshmallow\";\n\nfunction accountFlagsLayout(property = \"accountFlags\"): WideBits<string> {\n  const ACCOUNT_FLAGS_LAYOUT = new WideBits(property);\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"initialized\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"market\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"openOrders\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"requestQueue\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"eventQueue\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"bids\");\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"asks\");\n  return ACCOUNT_FLAGS_LAYOUT;\n}\n\nexport const MARKET_STATE_LAYOUT_V2 = struct([\n  blob(5),\n  accountFlagsLayout(\"accountFlags\"),\n  publicKey(\"ownAddress\"),\n  u64(\"vaultSignerNonce\"),\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"baseVault\"),\n  u64(\"baseDepositsTotal\"),\n  u64(\"baseFeesAccrued\"),\n  publicKey(\"quoteVault\"),\n  u64(\"quoteDepositsTotal\"),\n  u64(\"quoteFeesAccrued\"),\n  u64(\"quoteDustThreshold\"),\n  publicKey(\"requestQueue\"),\n  publicKey(\"eventQueue\"),\n  publicKey(\"bids\"),\n  publicKey(\"asks\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"feeRateBps\"),\n  u64(\"referrerRebatesAccrued\"),\n  blob(7),\n]);\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport { ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"../../api/type\";\nimport {\n  CLMM_LOCK_AUTH_ID,\n  CLMM_LOCK_PROGRAM_ID,\n  CLMM_PROGRAM_ID,\n  InstructionType,\n  WSOLMint,\n  fetchMultipleMintInfos,\n  getATAAddress,\n  getMultipleAccountsInfoWithCustomFlags,\n} from \"@/common\";\nimport { AccountLayout, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\nimport { TxVersion } from \"@/common/txTool/txType\";\nimport { toApiV3Token, toFeeConfig } from \"../../raydium/token/utils\";\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos } from \"../../raydium/type\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { MakeTransaction } from \"../type\";\nimport { ClmmInstrument } from \"./instrument\";\nimport { ClmmConfigLayout, ClmmPositionLayout, OperationLayout, PoolInfoLayout, PositionInfoLayout } from \"./layout\";\nimport {\n  ClmmRpcData,\n  ClosePositionExtInfo,\n  CollectRewardParams,\n  CollectRewardsParams,\n  ComputeClmmPoolInfo,\n  CreateConcentratedPool,\n  DecreaseLiquidity,\n  HarvestAllRewardsParams,\n  HarvestLockPosition,\n  IncreasePositionFromBase,\n  IncreasePositionFromLiquidity,\n  InitRewardExtInfo,\n  InitRewardParams,\n  InitRewardsParams,\n  LockPosition,\n  ManipulateLiquidityExtInfo,\n  OpenPositionFromBase,\n  OpenPositionFromBaseExtInfo,\n  OpenPositionFromLiquidity,\n  OpenPositionFromLiquidityExtInfo,\n  ReturnTypeFetchMultiplePoolTickArrays,\n  SetRewardParams,\n  SetRewardsParams,\n  ClmmLockAddress,\n} from \"./type\";\nimport { MAX_SQRT_PRICE_X64, MIN_SQRT_PRICE_X64, mockV3CreatePoolInfo } from \"./utils/constants\";\nimport { MathUtil, SqrtPriceMath } from \"./utils/math\";\nimport {\n  getPdaOperationAccount,\n  getPdaPersonalPositionAddress,\n  getPdaLockClPositionIdV2,\n  getPdaTickArrayAddress,\n  getPdaProtocolPositionAddress,\n  getPdaExBitmapAccount,\n} from \"./utils/pda\";\nimport { PoolUtils, clmmComputeInfoToApiInfo } from \"./utils/pool\";\nimport { TickUtils } from \"./utils/tick\";\n\nexport class Clmm extends ModuleBase {\n  constructor(params: ModuleBaseProps) {\n    super(params);\n  }\n\n  public async getClmmPoolKeys(poolId: string): Promise<ClmmKeys> {\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as ClmmKeys[])[0];\n  }\n\n  public async createPool<T extends TxVersion>(\n    props: CreateConcentratedPool<T>,\n  ): Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>> {\n    const {\n      programId,\n      owner = this.scope.owner?.publicKey || PublicKey.default,\n      mint1,\n      mint2,\n      ammConfig,\n      initialPrice,\n      startTime,\n      computeBudgetConfig,\n      forerunCreate,\n      getObserveState,\n      txVersion,\n    } = props;\n    const txBuilder = this.createTxBuilder();\n    const [mintA, mintB, initPrice] = new BN(new PublicKey(mint1.address).toBuffer()).gt(\n      new BN(new PublicKey(mint2.address).toBuffer()),\n    )\n      ? [mint2, mint1, new Decimal(1).div(initialPrice)]\n      : [mint1, mint2, initialPrice];\n\n    const initialPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(initPrice, mintA.decimals, mintB.decimals);\n\n    const insInfo = await ClmmInstrument.createPoolInstructions({\n      connection: this.scope.connection,\n      programId,\n      owner,\n      mintA,\n      mintB,\n      ammConfigId: ammConfig.id,\n      initialPriceX64,\n      startTime,\n      forerunCreate: !getObserveState && forerunCreate,\n    });\n\n    txBuilder.addInstruction(insInfo);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild<{\n      mockPoolInfo: ApiV3PoolInfoConcentratedItem;\n      address: ClmmKeys;\n      forerunCreate?: boolean;\n    }>({\n      txVersion,\n      extInfo: {\n        address: {\n          ...insInfo.address,\n          observationId: insInfo.address.observationId.toBase58(),\n          exBitmapAccount: insInfo.address.exBitmapAccount.toBase58(),\n          programId: programId.toString(),\n          id: insInfo.address.poolId.toString(),\n          mintA,\n          mintB,\n          openTime: startTime.toString(),\n          vault: { A: insInfo.address.mintAVault.toString(), B: insInfo.address.mintBVault.toString() },\n          rewardInfos: [],\n          config: {\n            id: ammConfig.id.toString(),\n            index: ammConfig.index,\n            protocolFeeRate: ammConfig.protocolFeeRate,\n            tradeFeeRate: ammConfig.tradeFeeRate,\n            tickSpacing: ammConfig.tickSpacing,\n            fundFeeRate: ammConfig.fundFeeRate,\n            description: ammConfig.description,\n            defaultRange: 0,\n            defaultRangePoint: [],\n          },\n        },\n        mockPoolInfo: {\n          type: \"Concentrated\",\n          rewardDefaultPoolInfos: \"Clmm\",\n          id: insInfo.address.poolId.toString(),\n          mintA,\n          mintB,\n          feeRate: ammConfig.tradeFeeRate,\n          openTime: startTime.toString(),\n          programId: programId.toString(),\n          price: initPrice.toNumber(),\n          config: {\n            id: ammConfig.id.toString(),\n            index: ammConfig.index,\n            protocolFeeRate: ammConfig.protocolFeeRate,\n            tradeFeeRate: ammConfig.tradeFeeRate,\n            tickSpacing: ammConfig.tickSpacing,\n            fundFeeRate: ammConfig.fundFeeRate,\n            description: ammConfig.description,\n            defaultRange: 0,\n            defaultRangePoint: [],\n          },\n          burnPercent: 0,\n          ...mockV3CreatePoolInfo,\n        },\n        forerunCreate,\n      },\n    }) as Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>>;\n  }\n\n  public async openPositionFromBase<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    ownerInfo,\n    tickLower,\n    tickUpper,\n    base,\n    baseAmount,\n    otherAmountMax,\n    nft2022,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    withMetadata = \"create\",\n    getEphemeralSigners,\n    computeBudgetConfig,\n    txVersion,\n  }: OpenPositionFromBase<T>): Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>> {\n    if (this.scope.availability.addConcentratedPosition === false)\n      this.logAndCreateError(\"add position feature disabled in your region\");\n\n    this.scope.checkOwner();\n    const txBuilder = this.createTxBuilder();\n\n    let ownerTokenAccountA: PublicKey | null = null;\n    let ownerTokenAccountB: PublicKey | null = null;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n    const [amountA, amountB] = base === \"MintA\" ? [baseAmount, otherAmountMax] : [otherAmountMax, baseAmount];\n\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintAUseSOLBalance || amountA.isZero()\n            ? {\n                payer: this.scope.ownerPubKey,\n                amount: amountA,\n              }\n            : undefined,\n        skipCloseAccount: !mintAUseSOLBalance,\n        notUseTokenAccount: mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintBUseSOLBalance || amountB.isZero()\n            ? {\n                payer: this.scope.ownerPubKey!,\n                amount: amountB,\n              }\n            : undefined,\n        skipCloseAccount: !mintBUseSOLBalance,\n        notUseTokenAccount: mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", {\n        ownerTokenAccountA: ownerTokenAccountA?.toBase58(),\n        ownerTokenAccountB: ownerTokenAccountB?.toBase58(),\n      });\n\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\n    const insInfo = await ClmmInstrument.openPositionFromBaseInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        ...ownerInfo,\n        feePayer: this.scope.ownerPubKey,\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n      },\n      tickLower,\n      tickUpper,\n      base,\n      baseAmount,\n      otherAmountMax,\n      withMetadata,\n      getEphemeralSigners,\n      nft2022,\n    });\n\n    txBuilder.addInstruction(insInfo);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<OpenPositionFromBaseExtInfo>({\n      txVersion,\n      extInfo: { ...insInfo.address },\n    }) as Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>>;\n  }\n\n  public async openPositionFromLiquidity<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    ownerInfo,\n    amountMaxA,\n    amountMaxB,\n    tickLower,\n    tickUpper,\n    liquidity,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    withMetadata = \"create\",\n    txVersion,\n    computeBudgetConfig,\n    getEphemeralSigners,\n    nft2022,\n  }: OpenPositionFromLiquidity<T>): Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>> {\n    if (this.scope.availability.createConcentratedPosition === false)\n      this.logAndCreateError(\"open position feature disabled in your region\");\n    const txBuilder = this.createTxBuilder();\n\n    let ownerTokenAccountA: PublicKey | null = null;\n    let ownerTokenAccountB: PublicKey | null = null;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\n\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintAUseSOLBalance || amountMaxA.isZero()\n            ? {\n                payer: this.scope.ownerPubKey,\n                amount: amountMaxA,\n              }\n            : undefined,\n\n        skipCloseAccount: !mintAUseSOLBalance,\n        notUseTokenAccount: mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintBUseSOLBalance || amountMaxB.isZero()\n            ? {\n                payer: this.scope.ownerPubKey!,\n                amount: amountMaxB,\n              }\n            : undefined,\n        skipCloseAccount: !mintBUseSOLBalance,\n        notUseTokenAccount: mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n\n    if (ownerTokenAccountA === undefined || ownerTokenAccountB === undefined)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\n\n    const makeOpenPositionInstructions = await ClmmInstrument.openPositionFromLiquidityInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n      },\n      tickLower,\n      tickUpper,\n      liquidity,\n      amountMaxA,\n      amountMaxB,\n      withMetadata,\n      getEphemeralSigners,\n      nft2022,\n    });\n    txBuilder.addInstruction(makeOpenPositionInstructions);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild<OpenPositionFromLiquidityExtInfo>({\n      txVersion,\n      extInfo: { address: makeOpenPositionInstructions.address },\n    }) as Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>>;\n  }\n\n  public async increasePositionFromLiquidity<T extends TxVersion>(\n    props: IncreasePositionFromLiquidity<T>,\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\n    const {\n      poolInfo,\n      poolKeys: propPoolKeys,\n      ownerPosition,\n      amountMaxA,\n      amountMaxB,\n      liquidity,\n      ownerInfo,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      computeBudgetConfig,\n      txVersion,\n    } = props;\n    const txBuilder = this.createTxBuilder();\n\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\n\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintAUseSOLBalance || amountMaxA.isZero()\n            ? {\n                payer: this.scope.ownerPubKey,\n                amount: amountMaxA,\n              }\n            : undefined,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintBUseSOLBalance || amountMaxB.isZero()\n            ? {\n                payer: this.scope.ownerPubKey!,\n                amount: amountMaxB,\n              }\n            : undefined,\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\n    const ins = ClmmInstrument.increasePositionFromLiquidityInstructions({\n      poolInfo,\n      poolKeys,\n      ownerPosition,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n      },\n      liquidity,\n      amountMaxA,\n      amountMaxB,\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\n    });\n    txBuilder.addInstruction(ins);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\n      txVersion,\n      extInfo: { address: ins.address },\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\n  }\n\n  public async increasePositionFromBase<T extends TxVersion>(\n    props: IncreasePositionFromBase<T>,\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\n    const {\n      poolInfo,\n      ownerPosition,\n      base,\n      baseAmount,\n      otherAmountMax,\n      ownerInfo,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      computeBudgetConfig,\n      txVersion,\n    } = props;\n    const txBuilder = this.createTxBuilder();\n\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintAUseSOLBalance || (base === \"MintA\" ? baseAmount : otherAmountMax).isZero()\n            ? {\n                payer: this.scope.ownerPubKey,\n                amount: base === \"MintA\" ? baseAmount : otherAmountMax,\n              }\n            : undefined,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintBUseSOLBalance || (base === \"MintA\" ? otherAmountMax : baseAmount).isZero()\n            ? {\n                payer: this.scope.ownerPubKey!,\n                amount: base === \"MintA\" ? otherAmountMax : baseAmount,\n              }\n            : undefined,\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\n\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const ins = ClmmInstrument.increasePositionFromBaseInstructions({\n      poolInfo,\n      poolKeys,\n      ownerPosition,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n      },\n      base,\n      baseAmount,\n      otherAmountMax,\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\n    });\n    txBuilder.addInstruction(ins);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\n      txVersion,\n      extInfo: { address: ins.address },\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\n  }\n\n  public async decreaseLiquidity<T extends TxVersion>(\n    props: DecreaseLiquidity<T>,\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo & Partial<ClosePositionExtInfo>>> {\n    const {\n      poolInfo,\n      poolKeys: propPoolKeys,\n      ownerPosition,\n      ownerInfo,\n      amountMinA,\n      amountMinB,\n      liquidity,\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      computeBudgetConfig,\n      txVersion,\n    } = props;\n    if (this.scope.availability.removeConcentratedPosition === false)\n      this.logAndCreateError(\"remove position feature disabled in your region\");\n    const txBuilder = this.createTxBuilder();\n\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerTokenAccountA = _ownerTokenAccountA;\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\n\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        notUseTokenAccount: mintBUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerTokenAccountB = _ownerTokenAccountB;\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\n\n    const rewardAccounts: PublicKey[] = [];\n    for (const itemReward of poolInfo.rewardDefaultInfos) {\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n\n      let ownerRewardAccount: PublicKey | undefined;\n\n      if (itemReward.mint.address === poolInfo.mintA.address) ownerRewardAccount = ownerTokenAccountA;\n      else if (itemReward.mint.address === poolInfo.mintB.address) ownerRewardAccount = ownerTokenAccountB;\n      else {\n        const { account: _ownerRewardAccount, instructionParams: ownerRewardAccountInstructions } =\n          await this.scope.account.getOrCreateTokenAccount({\n            tokenProgram: new PublicKey(itemReward.mint.programId),\n            mint: new PublicKey(itemReward.mint.address),\n            notUseTokenAccount: rewardUseSOLBalance,\n            owner: this.scope.ownerPubKey,\n            createInfo: {\n              payer: this.scope.ownerPubKey,\n              amount: 0,\n            },\n            skipCloseAccount: !rewardUseSOLBalance,\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n            checkCreateATAOwner,\n          });\n        ownerRewardAccount = _ownerRewardAccount;\n        ownerRewardAccountInstructions && txBuilder.addInstruction(ownerRewardAccountInstructions);\n      }\n\n      rewardAccounts.push(ownerRewardAccount!);\n    }\n\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\n      this.logAndCreateError(\n        \"cannot found target token accounts\",\n        \"tokenAccounts\",\n        this.scope.account.tokenAccountRawInfos,\n      );\n\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\n    const nft2022 = (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(\n      TOKEN_2022_PROGRAM_ID,\n    );\n    const decreaseInsInfo = await ClmmInstrument.decreaseLiquidityInstructions({\n      poolInfo,\n      poolKeys,\n      ownerPosition,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n        rewardAccounts,\n      },\n      liquidity,\n      amountMinA,\n      amountMinB,\n      nft2022,\n    });\n\n    txBuilder.addInstruction({\n      instructions: decreaseInsInfo.instructions,\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\n    });\n\n    let extInfo = { ...decreaseInsInfo.address };\n    if (ownerInfo.closePosition) {\n      const closeInsInfo = await ClmmInstrument.closePositionInstructions({\n        poolInfo,\n        poolKeys,\n        ownerInfo: { wallet: this.scope.ownerPubKey },\n        ownerPosition,\n        nft2022,\n      });\n      txBuilder.addInstruction({\n        endInstructions: closeInsInfo.instructions,\n        endInstructionTypes: closeInsInfo.instructionTypes,\n      });\n      extInfo = { ...extInfo, ...closeInsInfo.address };\n    }\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\n      txVersion,\n      extInfo: { address: extInfo },\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\n  }\n\n  public async lockPosition<T extends TxVersion>(props: LockPosition<T>): Promise<MakeTxData<ClmmLockAddress>> {\n    const {\n      programId = CLMM_LOCK_PROGRAM_ID,\n      authProgramId = CLMM_LOCK_AUTH_ID,\n      poolProgramId = CLMM_PROGRAM_ID,\n      ownerPosition,\n      payer,\n      computeBudgetConfig,\n      txVersion,\n      getEphemeralSigners,\n    } = props;\n    const txBuilder = this.createTxBuilder();\n    const lockIns = await ClmmInstrument.makeLockPositions({\n      programId,\n      authProgramId,\n      poolProgramId,\n      wallet: this.scope.ownerPubKey,\n      payer: payer ?? this.scope.ownerPubKey,\n      nftMint: ownerPosition.nftMint,\n      getEphemeralSigners,\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\n    });\n\n    txBuilder.addInstruction(lockIns);\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({\n      txVersion,\n      extInfo: lockIns.address,\n    }) as Promise<MakeTxData<ClmmLockAddress>>;\n  }\n\n  public async harvestLockPosition<T extends TxVersion>(props: HarvestLockPosition<T>): Promise<MakeTxData<T>> {\n    const {\n      programId = CLMM_LOCK_PROGRAM_ID,\n      authProgramId = CLMM_LOCK_AUTH_ID,\n      clmmProgram = CLMM_PROGRAM_ID,\n      poolKeys: propPoolKeys,\n      lockData,\n      ownerInfo = { useSOLBalance: true },\n      associatedOnly = true,\n      checkCreateATAOwner = false,\n      computeBudgetConfig,\n      txVersion,\n    } = props;\n\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(lockData.poolId.toString()));\n    const txBuilder = this.createTxBuilder();\n\n    const positionData = await this.scope.connection.getAccountInfo(lockData.positionId);\n    if (!positionData) this.logger.logWithError(\"position not found\", lockData.positionId);\n    const position = PositionInfoLayout.decode(positionData!.data);\n\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintA.address === WSOLMint.toString();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintB.address === WSOLMint.toString();\n\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolKeys.mintA.programId,\n        mint: new PublicKey(poolKeys.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerTokenAccountA = _ownerTokenAccountA;\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\n\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolKeys.mintB.programId,\n        mint: new PublicKey(poolKeys.mintB.address),\n        notUseTokenAccount: mintBUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerTokenAccountB = _ownerTokenAccountB;\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\n\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\n    const rewardAccounts: PublicKey[] = [];\n    for (const itemReward of poolKeys.rewardInfos) {\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\n      if (!ownerRewardAccount) {\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: new PublicKey(itemReward.mint.programId),\n          mint: new PublicKey(itemReward.mint.address),\n          notUseTokenAccount: rewardUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !rewardUseSOLBalance,\n          createInfo: {\n            payer: this.scope.ownerPubKey,\n            amount: 0,\n          },\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n        });\n        ownerRewardAccount = account!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\n      rewardAccounts.push(ownerRewardAccount!);\n    }\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockData.lockNftMint).publicKey;\n    const lockNftAccount = getATAAddress(this.scope.ownerPubKey, lockData.lockNftMint, TOKEN_PROGRAM_ID).publicKey;\n\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      position.tickLower,\n      poolKeys.config.tickSpacing,\n    );\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\n      position.tickUpper,\n      poolKeys.config.tickSpacing,\n    );\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\n      new PublicKey(poolKeys.programId),\n      lockData.poolId,\n      tickArrayLowerStartIndex,\n    );\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\n      new PublicKey(poolKeys.programId),\n      lockData.poolId,\n      tickArrayUpperStartIndex,\n    );\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\n      new PublicKey(poolKeys.programId),\n      lockData.poolId,\n      position.tickLower,\n      position.tickUpper,\n    );\n\n    const rewardAccountsFullInfo: {\n      poolRewardVault: PublicKey;\n      ownerRewardVault: PublicKey;\n      rewardMint: PublicKey;\n    }[] = [];\n    for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\n      rewardAccountsFullInfo.push({\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\n        ownerRewardVault: rewardAccounts[i],\n        rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\n      });\n    }\n\n    const harvestLockIns = await ClmmInstrument.harvestLockPositionInstructionV2({\n      programId,\n      auth: authProgramId,\n      lockPositionId,\n      clmmProgram,\n      lockOwner: this.scope.ownerPubKey,\n      lockNftMint: lockData.lockNftMint,\n      lockNftAccount,\n      positionNftAccount: lockData.nftAccount,\n      positionId: lockData.positionId,\n      poolId: lockData.poolId,\n      protocolPosition,\n      vaultA: new PublicKey(poolKeys.vault.A),\n      vaultB: new PublicKey(poolKeys.vault.B),\n      tickArrayLower,\n      tickArrayUpper,\n      userVaultA: ownerTokenAccountA!,\n      userVaultB: ownerTokenAccountB!,\n      mintA: new PublicKey(poolKeys.mintA.address),\n      mintB: new PublicKey(poolKeys.mintB.address),\n      rewardAccounts: rewardAccountsFullInfo,\n      exTickArrayBitmap: getPdaExBitmapAccount(clmmProgram, lockData.poolId).publicKey,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [harvestLockIns],\n      instructionTypes: [InstructionType.ClmmHarvestLockPosition],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({\n      txVersion,\n    }) as Promise<MakeTxData<T>>;\n  }\n\n  public async closePosition<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    ownerPosition,\n    txVersion,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys?: ClmmKeys;\n    ownerPosition: ClmmPositionLayout;\n    txVersion: T;\n  }): Promise<MakeTxData<T, ClosePositionExtInfo>> {\n    if (this.scope.availability.removeConcentratedPosition === false)\n      this.logAndCreateError(\"remove position feature disabled in your region\");\n    const txBuilder = this.createTxBuilder();\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\n    const ins = ClmmInstrument.closePositionInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: { wallet: this.scope.ownerPubKey },\n      ownerPosition,\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\n    });\n\n    return txBuilder.addInstruction(ins).versionBuild<ClosePositionExtInfo>({\n      txVersion,\n      extInfo: { address: ins.address },\n    }) as Promise<MakeTxData<T, ClosePositionExtInfo>>;\n  }\n\n  public async initReward<T extends TxVersion>({\n    poolInfo,\n    ownerInfo,\n    rewardInfo,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    computeBudgetConfig,\n    txVersion,\n  }: InitRewardParams<T>): Promise<MakeTxData<T, InitRewardExtInfo>> {\n    if (rewardInfo.endTime <= rewardInfo.openTime)\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\n\n    const txBuilder = this.createTxBuilder();\n\n    const rewardMintUseSOLBalance =\n      ownerInfo.useSOLBalance && rewardInfo.mint.address.toString() === WSOLMint.toString();\n    const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\n\n    const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: new PublicKey(rewardInfo.mint.address),\n        mint: new PublicKey(rewardInfo.mint.address),\n        notUseTokenAccount: !!rewardMintUseSOLBalance,\n        skipCloseAccount: !rewardMintUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: rewardMintUseSOLBalance\n          ? {\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n              amount: new BN(\n                new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\n                  ? _baseRewardAmount.toFixed(0)\n                  : _baseRewardAmount.add(1).toFixed(0),\n              ),\n            }\n          : undefined,\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\n\n    if (!ownerRewardAccount)\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const insInfo = ClmmInstrument.initRewardInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccount: ownerRewardAccount!,\n      },\n      rewardInfo: {\n        programId: new PublicKey(rewardInfo.mint.programId),\n        mint: new PublicKey(rewardInfo.mint.address),\n        openTime: rewardInfo.openTime,\n        endTime: rewardInfo.endTime,\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\n      },\n    });\n    txBuilder.addInstruction(insInfo);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<InitRewardExtInfo>({\n      txVersion,\n      extInfo: { address: insInfo.address },\n    }) as Promise<MakeTxData<T, InitRewardExtInfo>>;\n  }\n\n  public async initRewards<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    ownerInfo,\n    rewardInfos,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    computeBudgetConfig,\n    txVersion,\n  }: InitRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\n    for (const rewardInfo of rewardInfos) {\n      if (rewardInfo.endTime <= rewardInfo.openTime)\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\n    }\n\n    const txBuilder = this.createTxBuilder();\n    let address: Record<string, PublicKey> = {};\n\n    for (const rewardInfo of rewardInfos) {\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\n      const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\n\n      const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\n        await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\n          mint: new PublicKey(rewardInfo.mint.address),\n          notUseTokenAccount: !!rewardMintUseSOLBalance,\n          skipCloseAccount: !rewardMintUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          createInfo: rewardMintUseSOLBalance\n            ? {\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n                amount: new BN(\n                  new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\n                    ? _baseRewardAmount.toFixed(0)\n                    : _baseRewardAmount.add(1).toFixed(0),\n                ),\n              }\n            : undefined,\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n      ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\n\n      if (!ownerRewardAccount)\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\n      const insInfo = ClmmInstrument.initRewardInstructions({\n        poolInfo,\n        poolKeys,\n        ownerInfo: {\n          wallet: this.scope.ownerPubKey,\n          tokenAccount: ownerRewardAccount!,\n        },\n        rewardInfo: {\n          programId: new PublicKey(rewardInfo.mint.programId),\n          mint: new PublicKey(rewardInfo.mint.address),\n          openTime: rewardInfo.openTime,\n          endTime: rewardInfo.endTime,\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\n        },\n      });\n      address = {\n        ...address,\n        ...insInfo.address,\n      };\n      txBuilder.addInstruction(insInfo);\n    }\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild({\n      txVersion,\n      extInfo: { address },\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\n  }\n\n  public async setReward<T extends TxVersion>({\n    poolInfo,\n    ownerInfo,\n    rewardInfo,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    computeBudgetConfig,\n    txVersion,\n  }: SetRewardParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\n    if (rewardInfo.endTime <= rewardInfo.openTime)\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\n\n    const txBuilder = this.createTxBuilder();\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(WSOLMint);\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: rewardInfo.programId,\n        mint: rewardInfo.mint,\n        notUseTokenAccount: rewardMintUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: rewardMintUseSOLBalance\n          ? {\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n              amount: new BN(\n                new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\n                  rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime),\n                )\n                  ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\n                  : rewardInfo.perSecond\n                      .sub(rewardInfo.endTime - rewardInfo.openTime)\n                      .add(1)\n                      .toFixed(0),\n              ),\n            }\n          : undefined,\n\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\n    if (!ownerRewardAccount)\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const insInfo = ClmmInstrument.setRewardInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccount: ownerRewardAccount!,\n      },\n      rewardInfo: {\n        mint: rewardInfo.mint,\n        openTime: rewardInfo.openTime,\n        endTime: rewardInfo.endTime,\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\n      },\n    });\n\n    txBuilder.addInstruction(insInfo);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\n      txVersion,\n      extInfo: { address: insInfo.address },\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\n  }\n\n  public async setRewards<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    ownerInfo,\n    rewardInfos,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    computeBudgetConfig,\n    txVersion,\n  }: SetRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\n    const txBuilder = this.createTxBuilder();\n    let address: Record<string, PublicKey> = {};\n    for (const rewardInfo of rewardInfos) {\n      if (rewardInfo.endTime <= rewardInfo.openTime)\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\n\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\n        await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\n          mint: new PublicKey(rewardInfo.mint.address),\n          notUseTokenAccount: rewardMintUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          createInfo: rewardMintUseSOLBalance\n            ? {\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n                amount: new BN(\n                  new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\n                    rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime),\n                  )\n                    ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\n                    : rewardInfo.perSecond\n                        .sub(rewardInfo.endTime - rewardInfo.openTime)\n                        .add(1)\n                        .toFixed(0),\n                ),\n              }\n            : undefined,\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\n      if (!ownerRewardAccount)\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\n      const insInfo = ClmmInstrument.setRewardInstructions({\n        poolInfo,\n        poolKeys,\n        ownerInfo: {\n          wallet: this.scope.ownerPubKey,\n          tokenAccount: ownerRewardAccount!,\n        },\n        rewardInfo: {\n          mint: new PublicKey(rewardInfo.mint.address),\n          openTime: rewardInfo.openTime,\n          endTime: rewardInfo.endTime,\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\n        },\n      });\n      txBuilder.addInstruction(insInfo);\n      address = {\n        ...address,\n        ...insInfo.address,\n      };\n    }\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\n      txVersion,\n      extInfo: { address },\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\n  }\n\n  public async collectReward<T extends TxVersion>({\n    poolInfo,\n    ownerInfo,\n    rewardMint,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    computeBudgetConfig,\n    txVersion,\n  }: CollectRewardParams<T>): Promise<MakeTxData<{ address: Record<string, PublicKey> }>> {\n    const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\n    if (!rewardInfo) this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\n\n    const txBuilder = this.createTxBuilder();\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: new PublicKey(rewardInfo!.mint.programId),\n        mint: rewardMint,\n        notUseTokenAccount: rewardMintUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: !rewardMintUseSOLBalance,\n        createInfo: {\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n          amount: 0,\n        },\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\n\n    if (!ownerRewardAccount)\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n    const insInfo = ClmmInstrument.collectRewardInstructions({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        tokenAccount: ownerRewardAccount!,\n      },\n      rewardMint,\n    });\n    txBuilder.addInstruction(insInfo);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\n      txVersion,\n      extInfo: { address: insInfo.address },\n    }) as Promise<MakeTxData<{ address: Record<string, PublicKey> }>>;\n  }\n\n  public async collectRewards({\n    poolInfo,\n    ownerInfo,\n    rewardMints,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n  }: CollectRewardsParams): Promise<MakeTransaction> {\n    const txBuilder = this.createTxBuilder();\n    let address: Record<string, PublicKey> = {};\n\n    for (const rewardMint of rewardMints) {\n      const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\n      if (!rewardInfo) {\n        this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\n        continue;\n      }\n\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\n        await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\n          mint: rewardMint,\n          notUseTokenAccount: rewardMintUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !rewardMintUseSOLBalance,\n          createInfo: {\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n      if (!ownerRewardAccount)\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n      const insInfo = ClmmInstrument.collectRewardInstructions({\n        poolInfo,\n        poolKeys,\n        ownerInfo: {\n          wallet: this.scope.ownerPubKey,\n          tokenAccount: ownerRewardAccount!,\n        },\n\n        rewardMint,\n      });\n      txBuilder.addInstruction(insInfo);\n      address = { ...address, ...insInfo.address };\n    }\n\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address });\n  }\n\n  public async swap<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    inputMint,\n    amountIn,\n    amountOutMin,\n    priceLimit,\n    observationId,\n    ownerInfo,\n    remainingAccounts,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    txVersion,\n    computeBudgetConfig,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys?: ClmmKeys;\n    inputMint: string | PublicKey;\n    amountIn: BN;\n    amountOutMin: BN;\n    priceLimit?: Decimal;\n    observationId: PublicKey;\n    ownerInfo: {\n      useSOLBalance?: boolean;\n      feePayer?: PublicKey;\n    };\n    remainingAccounts: PublicKey[];\n    associatedOnly?: boolean;\n    checkCreateATAOwner?: boolean;\n    txVersion?: T;\n    computeBudgetConfig?: ComputeBudgetConfig;\n  }): Promise<MakeTxData<T>> {\n    const txBuilder = this.createTxBuilder();\n    const baseIn = inputMint.toString() === poolInfo.mintA.address;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\n\n    let sqrtPriceLimitX64: BN;\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\n      sqrtPriceLimitX64 = baseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\n    } else {\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\n        priceLimit,\n        poolInfo.mintA.decimals,\n        poolInfo.mintB.decimals,\n      );\n    }\n\n    let ownerTokenAccountA: PublicKey | undefined;\n    if (!ownerTokenAccountA) {\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: !mintAUseSOLBalance,\n        createInfo:\n          mintAUseSOLBalance || !baseIn\n            ? {\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n                amount: baseIn ? amountIn : 0,\n              }\n            : undefined,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n      ownerTokenAccountA = account!;\n      instructionParams && txBuilder.addInstruction(instructionParams);\n    }\n\n    let ownerTokenAccountB: PublicKey | undefined;\n    if (!ownerTokenAccountB) {\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        notUseTokenAccount: mintBUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: !mintBUseSOLBalance,\n        createInfo:\n          mintBUseSOLBalance || baseIn\n            ? {\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n                amount: baseIn ? 0 : amountIn,\n              }\n            : undefined,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n      ownerTokenAccountB = account!;\n      instructionParams && txBuilder.addInstruction(instructionParams);\n    }\n\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\n      this.logAndCreateError(\"user do not have token account\", {\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\n        ownerTokenAccountA,\n        ownerTokenAccountB,\n        mintAUseSOLBalance,\n        mintBUseSOLBalance,\n        associatedOnly,\n      });\n\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\n    txBuilder.addInstruction(\n      ClmmInstrument.makeSwapBaseInInstructions({\n        poolInfo,\n        poolKeys,\n        observationId,\n        ownerInfo: {\n          wallet: this.scope.ownerPubKey,\n          tokenAccountA: ownerTokenAccountA!,\n          tokenAccountB: ownerTokenAccountB!,\n        },\n        inputMint: new PublicKey(inputMint),\n        amountIn,\n        amountOutMin,\n        sqrtPriceLimitX64,\n        remainingAccounts,\n      }),\n    );\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async swapBaseOut<T extends TxVersion>({\n    poolInfo,\n    poolKeys: propPoolKeys,\n    outputMint,\n    amountOut,\n    amountInMax,\n    priceLimit,\n    observationId,\n    ownerInfo,\n    remainingAccounts,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    txVersion,\n    computeBudgetConfig,\n  }: {\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys?: ClmmKeys;\n    outputMint: string | PublicKey;\n    amountOut: BN;\n    amountInMax: BN;\n    priceLimit?: Decimal;\n    observationId: PublicKey;\n    ownerInfo: {\n      useSOLBalance?: boolean;\n      feePayer?: PublicKey;\n    };\n    remainingAccounts: PublicKey[];\n    associatedOnly?: boolean;\n    checkCreateATAOwner?: boolean;\n    txVersion?: T;\n    computeBudgetConfig?: ComputeBudgetConfig;\n  }): Promise<MakeTxData<T>> {\n    const txBuilder = this.createTxBuilder();\n    const baseIn = outputMint.toString() === poolInfo.mintB.address;\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\n\n    let sqrtPriceLimitX64: BN;\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\n      sqrtPriceLimitX64 =\n        outputMint.toString() === poolInfo.mintB.address\n          ? MIN_SQRT_PRICE_X64.add(new BN(1))\n          : MAX_SQRT_PRICE_X64.sub(new BN(1));\n    } else {\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\n        priceLimit,\n        poolInfo.mintA.decimals,\n        poolInfo.mintB.decimals,\n      );\n    }\n\n    let ownerTokenAccountA: PublicKey | undefined;\n    if (!ownerTokenAccountA) {\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: !mintAUseSOLBalance,\n        createInfo:\n          mintAUseSOLBalance || !baseIn\n            ? {\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n                amount: baseIn ? amountInMax : 0,\n              }\n            : undefined,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n      ownerTokenAccountA = account!;\n      instructionParams && txBuilder.addInstruction(instructionParams);\n    }\n\n    let ownerTokenAccountB: PublicKey | undefined;\n    if (!ownerTokenAccountB) {\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        notUseTokenAccount: mintBUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: !mintBUseSOLBalance,\n        createInfo:\n          mintBUseSOLBalance || baseIn\n            ? {\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n                amount: baseIn ? 0 : amountInMax,\n              }\n            : undefined,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n      ownerTokenAccountB = account!;\n      instructionParams && txBuilder.addInstruction(instructionParams);\n    }\n\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\n      this.logAndCreateError(\"user do not have token account\", {\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\n        ownerTokenAccountA,\n        ownerTokenAccountB,\n        mintAUseSOLBalance,\n        mintBUseSOLBalance,\n        associatedOnly,\n      });\n\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\n    txBuilder.addInstruction(\n      ClmmInstrument.makeSwapBaseOutInstructions({\n        poolInfo,\n        poolKeys,\n        observationId,\n        ownerInfo: {\n          wallet: this.scope.ownerPubKey,\n          tokenAccountA: ownerTokenAccountA!,\n          tokenAccountB: ownerTokenAccountB!,\n        },\n        outputMint: new PublicKey(outputMint),\n        amountOut,\n        amountInMax,\n        sqrtPriceLimitX64,\n        remainingAccounts,\n      }),\n    );\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>({\n    allPoolInfo,\n    allPositions,\n    lockInfo,\n    ownerInfo,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    programId,\n    txVersion,\n    computeBudgetConfig,\n  }: HarvestAllRewardsParams<T>): Promise<MakeMultiTxData<T>> {\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\n    for (const item of this.scope.account.tokenAccountRawInfos) {\n      if (associatedOnly) {\n        const ata = getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, programId).publicKey;\n        if (ata.equals(item.pubkey)) ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\n      } else {\n        ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\n      }\n    }\n    const allNftMints = Object.values(allPositions)\n      .flat()\n      .map((p) => p.nftMint);\n\n    const mintData = await getMultipleAccountsInfoWithCustomFlags(\n      this.scope.connection,\n      allNftMints.map((n) => ({ pubkey: n })),\n    );\n    const record: Record<string, PublicKey | null> = {};\n    mintData.forEach((data) => {\n      record[data.pubkey.toBase58()] = data?.accountInfo?.owner ?? null;\n    });\n\n    const txBuilder = this.createTxBuilder();\n    for (const itemInfo of Object.values(allPoolInfo)) {\n      if (allPositions[itemInfo.id] === undefined) continue;\n      if (\n        !allPositions[itemInfo.id].find(\n          (i) => !i.liquidity.isZero() || i.rewardInfos.find((ii) => !ii.rewardAmountOwed.isZero()),\n        )\n      )\n        continue;\n\n      const poolInfo = itemInfo;\n      const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\n      const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\n\n      let ownerTokenAccountA = ownerMintToAccount[poolInfo.mintA.address];\n      if (!ownerTokenAccountA) {\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: poolInfo.mintA.programId,\n          mint: new PublicKey(poolInfo.mintA.address),\n          notUseTokenAccount: mintAUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !mintAUseSOLBalance,\n          createInfo: {\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerTokenAccountA = account!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n\n      let ownerTokenAccountB = ownerMintToAccount[poolInfo.mintB.address];\n      if (!ownerTokenAccountB) {\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          tokenProgram: poolInfo.mintB.programId,\n          mint: new PublicKey(poolInfo.mintB.address),\n          notUseTokenAccount: mintBUseSOLBalance,\n          owner: this.scope.ownerPubKey,\n          skipCloseAccount: !mintBUseSOLBalance,\n          createInfo: {\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n            amount: 0,\n          },\n          associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n          checkCreateATAOwner,\n        });\n        ownerTokenAccountB = account!;\n        instructionParams && txBuilder.addInstruction(instructionParams);\n      }\n\n      ownerMintToAccount[poolInfo.mintA.address] = ownerTokenAccountA;\n      ownerMintToAccount[poolInfo.mintB.address] = ownerTokenAccountB;\n\n      const rewardAccounts: PublicKey[] = [];\n\n      for (const itemReward of poolInfo.rewardDefaultInfos) {\n        const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\n        if (!ownerRewardAccount) {\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n            tokenProgram: new PublicKey(itemReward.mint.programId),\n            mint: new PublicKey(itemReward.mint.address),\n            notUseTokenAccount: rewardUseSOLBalance,\n            owner: this.scope.ownerPubKey,\n            skipCloseAccount: !rewardUseSOLBalance,\n            createInfo: {\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\n              amount: 0,\n            },\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\n          });\n          ownerRewardAccount = account!;\n          instructionParams && txBuilder.addInstruction(instructionParams);\n        }\n\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\n        rewardAccounts.push(ownerRewardAccount!);\n      }\n\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\n\n      const rewardAccountsFullInfo: {\n        poolRewardVault: PublicKey;\n        ownerRewardVault: PublicKey;\n        rewardMint: PublicKey;\n      }[] = [];\n      for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\n        rewardAccountsFullInfo.push({\n          poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\n          ownerRewardVault: rewardAccounts[i],\n          rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\n        });\n      }\n\n      for (const itemPosition of allPositions[itemInfo.id]) {\n        const lockData = lockInfo?.[itemInfo.id]?.[itemPosition.nftMint.toBase58()];\n        if (lockData) {\n          const lockNftAccount = getATAAddress(\n            this.scope.ownerPubKey,\n            lockData.lockNftMint,\n            TOKEN_PROGRAM_ID,\n          ).publicKey;\n\n          const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\n            itemPosition.tickLower,\n            poolKeys.config.tickSpacing,\n          );\n          const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\n            itemPosition.tickUpper,\n            poolKeys.config.tickSpacing,\n          );\n          const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\n            new PublicKey(poolKeys.programId),\n            lockData.poolId,\n            tickArrayLowerStartIndex,\n          );\n          const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\n            new PublicKey(poolKeys.programId),\n            lockData.poolId,\n            tickArrayUpperStartIndex,\n          );\n          const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\n            new PublicKey(poolKeys.programId),\n            lockData.poolId,\n            itemPosition.tickLower,\n            itemPosition.tickUpper,\n          );\n          const lockPositionId = getPdaLockClPositionIdV2(CLMM_LOCK_PROGRAM_ID, lockData.lockNftMint).publicKey;\n          const harvestLockIns = ClmmInstrument.harvestLockPositionInstructionV2({\n            programId: CLMM_LOCK_PROGRAM_ID,\n            auth: CLMM_LOCK_AUTH_ID,\n            lockPositionId,\n            clmmProgram: CLMM_PROGRAM_ID,\n            lockOwner: this.scope.ownerPubKey,\n            lockNftMint: lockData.lockNftMint,\n            lockNftAccount,\n            positionNftAccount: lockData.nftAccount,\n            positionId: lockData.positionId,\n            poolId: lockData.poolId,\n            protocolPosition,\n            vaultA: new PublicKey(poolKeys.vault.A),\n            vaultB: new PublicKey(poolKeys.vault.B),\n            tickArrayLower,\n            tickArrayUpper,\n            userVaultA: ownerTokenAccountA!,\n            userVaultB: ownerTokenAccountB!,\n            mintA: new PublicKey(poolKeys.mintA.address),\n            mintB: new PublicKey(poolKeys.mintB.address),\n            rewardAccounts: rewardAccountsFullInfo,\n            exTickArrayBitmap: getPdaExBitmapAccount(CLMM_PROGRAM_ID, lockData.poolId).publicKey,\n          });\n          txBuilder.addInstruction({\n            instructions: [harvestLockIns],\n            instructionTypes: [InstructionType.ClmmHarvestLockPosition],\n            lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n          });\n        } else {\n          const insData = ClmmInstrument.decreaseLiquidityInstructions({\n            poolInfo,\n            poolKeys,\n            ownerPosition: itemPosition,\n            ownerInfo: {\n              wallet: this.scope.ownerPubKey,\n              tokenAccountA: ownerTokenAccountA,\n              tokenAccountB: ownerTokenAccountB,\n              rewardAccounts,\n            },\n            liquidity: new BN(0),\n            amountMinA: new BN(0),\n            amountMinB: new BN(0),\n            nft2022: record[itemPosition.nftMint.toBase58()]?.equals(TOKEN_2022_PROGRAM_ID),\n          });\n          txBuilder.addInstruction(insData);\n        }\n      }\n    }\n\n    if (txVersion === TxVersion.V0)\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\n  }\n\n  public async getWhiteListMint({ programId }: { programId: PublicKey }): Promise<PublicKey[]> {\n    const accountInfo = await this.scope.connection.getAccountInfo(getPdaOperationAccount(programId).publicKey);\n    if (!accountInfo) return [];\n    const whitelistMintsInfo = OperationLayout.decode(accountInfo.data);\n    return whitelistMintsInfo.whitelistMints.filter((i) => !i.equals(PublicKey.default));\n  }\n\n  public async getOwnerPositionInfo({\n    programId,\n  }: {\n    programId: string | PublicKey;\n  }): Promise<ReturnType<typeof PositionInfoLayout.decode>[]> {\n    await this.scope.account.fetchWalletTokenAccounts();\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\n    const allPositionKey = balanceMints.map(\n      (acc) => getPdaPersonalPositionAddress(new PublicKey(programId), acc.accountInfo.mint).publicKey,\n    );\n\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\n    accountInfo.forEach((positionRes) => {\n      if (!positionRes) return;\n      const position = PositionInfoLayout.decode(positionRes.data);\n      allPosition.push(position);\n    });\n\n    return allPosition;\n  }\n\n  public async getRpcClmmPoolInfo({ poolId }: { poolId: string | PublicKey }): Promise<ClmmRpcData> {\n    return (await this.getRpcClmmPoolInfos({ poolIds: [poolId] }))[String(poolId)];\n  }\n\n  public async getRpcClmmPoolInfos({\n    poolIds,\n    config,\n  }: {\n    poolIds: (string | PublicKey)[];\n    config?: { batchRequest?: boolean; chunkCount?: number };\n  }): Promise<{\n    [poolId: string]: ClmmRpcData;\n  }> {\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\n      this.scope.connection,\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\n      config,\n    );\n    const returnData: {\n      [poolId: string]: ClmmRpcData;\n    } = {};\n    for (let i = 0; i < poolIds.length; i++) {\n      const item = accounts[i];\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\n      const rpc = PoolInfoLayout.decode(item.accountInfo.data);\n      const currentPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\n        rpc.sqrtPriceX64,\n        rpc.mintDecimalsA,\n        rpc.mintDecimalsB,\n      ).toNumber();\n\n      returnData[String(poolIds[i])] = {\n        ...rpc,\n        currentPrice,\n        programId: item.accountInfo.owner,\n      };\n    }\n    return returnData;\n  }\n\n  public async getComputeClmmPoolInfos({\n    clmmPoolsRpcInfo,\n    mintInfos,\n  }: {\n    clmmPoolsRpcInfo: Record<\n      string,\n      ReturnType<typeof PoolInfoLayout.decode> & { currentPrice: number; programId: PublicKey }\n    >;\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\n  }): Promise<{\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\n  }> {\n    const configSet = new Set(Object.keys(clmmPoolsRpcInfo).map((p) => clmmPoolsRpcInfo[p].ammConfig.toBase58()));\n    const res = await getMultipleAccountsInfoWithCustomFlags(\n      this.scope.connection,\n      Array.from(configSet).map((s) => ({ pubkey: new PublicKey(s) })),\n    );\n    const clmmConfigs: Record<string, ReturnType<typeof ClmmConfigLayout.decode>> = {};\n    res.forEach((acc) => {\n      if (!acc.accountInfo) return;\n      clmmConfigs[acc.pubkey.toBase58()] = ClmmConfigLayout.decode(acc.accountInfo.data);\n    });\n    const computeClmmPoolInfo = await PoolUtils.fetchComputeMultipleClmmInfo({\n      connection: this.scope.connection,\n      rpcDataMap: clmmPoolsRpcInfo,\n      poolList: Object.keys(clmmPoolsRpcInfo).map((poolId) => {\n        const [mintA, mintB] = [clmmPoolsRpcInfo[poolId].mintA.toBase58(), clmmPoolsRpcInfo[poolId].mintB.toBase58()];\n        return {\n          id: poolId,\n          programId: clmmPoolsRpcInfo[poolId].programId.toBase58(),\n          mintA: toApiV3Token({\n            address: mintA,\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsA,\n            programId: mintInfos[mintA].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\n            extensions: {\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\n            },\n          }),\n          mintB: toApiV3Token({\n            address: mintB,\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsB,\n            programId: mintInfos[mintB].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\n            extensions: {\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\n            },\n          }),\n          price: clmmPoolsRpcInfo[poolId].currentPrice,\n          config: {\n            ...clmmConfigs[clmmPoolsRpcInfo[poolId].ammConfig.toBase58()],\n            id: clmmPoolsRpcInfo[poolId].ammConfig.toBase58(),\n\n            fundFeeRate: 0,\n            description: \"\",\n            defaultRange: 0,\n            defaultRangePoint: [],\n          },\n        };\n      }),\n    });\n\n    const computePoolTickData = await PoolUtils.fetchMultiplePoolTickArrays({\n      connection: this.scope.connection,\n      poolKeys: Object.values(computeClmmPoolInfo),\n    });\n\n    return {\n      computeClmmPoolInfo,\n      computePoolTickData,\n    };\n  }\n\n  public async getPoolInfoFromRpc(poolId: string): Promise<{\n    poolInfo: ApiV3PoolInfoConcentratedItem;\n    poolKeys: ClmmKeys;\n    computePoolInfo: ComputeClmmPoolInfo;\n    tickData: ReturnTypeFetchMultiplePoolTickArrays;\n  }> {\n    const rpcData = await this.getRpcClmmPoolInfo({ poolId });\n\n    const mintSet = new Set([rpcData.mintA.toBase58(), rpcData.mintB.toBase58()]);\n\n    const mintInfos = await fetchMultipleMintInfos({\n      connection: this.scope.connection,\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\n    });\n\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\n      clmmPoolsRpcInfo: { [poolId]: rpcData },\n      mintInfos,\n    });\n    const vaultData = await getMultipleAccountsInfoWithCustomFlags(this.scope.connection, [\n      { pubkey: rpcData.vaultA },\n      { pubkey: rpcData.vaultB },\n    ]);\n\n    const poolInfo = clmmComputeInfoToApiInfo(computeClmmPoolInfo[poolId]);\n\n    if (!vaultData[0].accountInfo || !vaultData[1].accountInfo) throw new Error(\"pool vault data not found\");\n    poolInfo.mintAmountA = Number(AccountLayout.decode(vaultData[0].accountInfo.data).amount.toString());\n    poolInfo.mintAmountB = Number(AccountLayout.decode(vaultData[1].accountInfo?.data).amount.toString());\n\n    const poolKeys: ClmmKeys = {\n      ...computeClmmPoolInfo[poolId],\n      exBitmapAccount: computeClmmPoolInfo[poolId].exBitmapAccount.toBase58(),\n      observationId: computeClmmPoolInfo[poolId].observationId.toBase58(),\n      id: poolId,\n      programId: rpcData.programId.toBase58(),\n      openTime: rpcData.startTime.toString(),\n      vault: {\n        A: rpcData.vaultA.toBase58(),\n        B: rpcData.vaultB.toBase58(),\n      },\n      config: poolInfo.config,\n      rewardInfos: computeClmmPoolInfo[poolId].rewardInfos\n        .filter((r) => !r.tokenVault.equals(PublicKey.default))\n        .map((r) => ({\n          mint: toApiV3Token({ address: r.tokenMint.toBase58(), programId: TOKEN_PROGRAM_ID.toBase58(), decimals: 10 }),\n          vault: r.tokenVault.toBase58(),\n        })),\n    };\n    return { poolInfo, poolKeys, computePoolInfo: computeClmmPoolInfo[poolId], tickData: computePoolTickData };\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { ApiV3PoolInfoStandardItemCpmm, CpmmKeys } from \"../../api/type\";\nimport { AccountLayout, NATIVE_MINT, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { BN_ZERO } from \"@/common/bignumber\";\nimport { getATAAddress } from \"@/common/pda\";\nimport { WSOLMint } from \"@/common/pubKey\";\nimport { MakeTxData } from \"@/common/txTool/txTool\";\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\nimport { Percent } from \"../../module\";\nimport { CurveCalculator } from \"./curve/calculator\";\n\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport {\n  fetchMultipleMintInfos,\n  getMultipleAccountsInfoWithCustomFlags,\n  getTransferAmountFeeV2,\n  LOCK_CPMM_AUTH,\n  LOCK_CPMM_PROGRAM,\n} from \"@/common\";\nimport { GetTransferAmountFee, ReturnTypeFetchMultipleMintInfos } from \"../../raydium/type\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { toApiV3Token, toFeeConfig } from \"../token\";\nimport {\n  makeCreateCpmmPoolInInstruction,\n  makeDepositCpmmInInstruction,\n  makeSwapCpmmBaseInInstruction,\n  makeSwapCpmmBaseOutInstruction,\n  makeWithdrawCpmmInInstruction,\n  makeCpmmLockInstruction,\n  collectCpFeeInstruction,\n} from \"./instruction\";\nimport { CpmmConfigInfoLayout, CpmmPoolInfoLayout } from \"./layout\";\nimport { getCreatePoolKeys, getPdaObservationId, getPdaPoolAuthority } from \"./pda\";\nimport {\n  AddCpmmLiquidityParams,\n  ComputePairAmountParams,\n  CpmmComputeData,\n  CpmmLockExtInfo,\n  CpmmRpcData,\n  CpmmSwapParams,\n  CreateCpmmPoolAddress,\n  CreateCpmmPoolParam,\n  LockCpmmLpParams,\n  HarvestLockCpmmLpParams,\n  WithdrawCpmmLiquidityParams,\n} from \"./type\";\nimport { getCpLockPda } from \"./pda\";\n\nexport default class CpmmModule extends ModuleBase {\n  constructor(params: ModuleBaseProps) {\n    super(params);\n  }\n\n  public async load(): Promise<void> {\n    this.checkDisabled();\n  }\n\n  public async getCpmmPoolKeys(poolId: string): Promise<CpmmKeys> {\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as CpmmKeys[])[0];\n  }\n\n  public async getRpcPoolInfo(poolId: string, fetchConfigInfo?: boolean): Promise<CpmmRpcData> {\n    return (await this.getRpcPoolInfos([poolId], fetchConfigInfo))[poolId];\n  }\n\n  public async getRpcPoolInfos(\n    poolIds: string[],\n    fetchConfigInfo?: boolean,\n  ): Promise<{\n    [poolId: string]: CpmmRpcData;\n  }> {\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\n      this.scope.connection,\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\n    );\n    const poolInfos: { [poolId: string]: ReturnType<typeof CpmmPoolInfoLayout.decode> & { programId: PublicKey } } = {};\n\n    const needFetchConfigId = new Set<string>();\n    const needFetchVaults: PublicKey[] = [];\n\n    for (let i = 0; i < poolIds.length; i++) {\n      const item = accounts[i];\n      if (item.accountInfo === null) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\n      const rpc = CpmmPoolInfoLayout.decode(item.accountInfo.data);\n      poolInfos[String(poolIds[i])] = {\n        ...rpc,\n        programId: item.accountInfo.owner,\n      };\n      needFetchConfigId.add(String(rpc.configId));\n\n      needFetchVaults.push(rpc.vaultA, rpc.vaultB);\n    }\n\n    const configInfo: { [configId: string]: ReturnType<typeof CpmmConfigInfoLayout.decode> } = {};\n\n    if (fetchConfigInfo) {\n      const configIds = [...needFetchConfigId];\n      const configState = await getMultipleAccountsInfoWithCustomFlags(\n        this.scope.connection,\n        configIds.map((i) => ({ pubkey: new PublicKey(i) })),\n      );\n\n      for (let i = 0; i < configIds.length; i++) {\n        const configItemInfo = configState[i].accountInfo;\n        if (configItemInfo === null) throw Error(\"fetch pool config error: \" + configIds[i]);\n        configInfo[configIds[i]] = CpmmConfigInfoLayout.decode(configItemInfo.data);\n      }\n    }\n\n    const vaultInfo: { [vaultId: string]: BN } = {};\n\n    const vaultAccountInfo = await getMultipleAccountsInfoWithCustomFlags(\n      this.scope.connection,\n      needFetchVaults.map((i) => ({ pubkey: new PublicKey(i) })),\n    );\n\n    for (let i = 0; i < needFetchVaults.length; i++) {\n      const vaultItemInfo = vaultAccountInfo[i].accountInfo;\n      if (vaultItemInfo === null) throw Error(\"fetch vault info error: \" + needFetchVaults[i]);\n\n      vaultInfo[String(needFetchVaults[i])] = new BN(AccountLayout.decode(vaultItemInfo.data).amount.toString());\n    }\n\n    const returnData: { [poolId: string]: CpmmRpcData } = {};\n\n    for (const [id, info] of Object.entries(poolInfos)) {\n      const baseReserve = vaultInfo[info.vaultA.toString()].sub(info.protocolFeesMintA).sub(info.fundFeesMintA);\n      const quoteReserve = vaultInfo[info.vaultB.toString()].sub(info.protocolFeesMintB).sub(info.fundFeesMintB);\n      returnData[id] = {\n        ...info,\n        baseReserve,\n        quoteReserve,\n        vaultAAmount: vaultInfo[info.vaultA.toString()],\n        vaultBAmount: vaultInfo[info.vaultB.toString()],\n        configInfo: configInfo[info.configId.toString()],\n        poolPrice: new Decimal(quoteReserve.toString())\n          .div(new Decimal(10).pow(info.mintDecimalB))\n          .div(new Decimal(baseReserve.toString()).div(new Decimal(10).pow(info.mintDecimalA))),\n      };\n    }\n\n    return returnData;\n  }\n\n  public toComputePoolInfos({\n    pools,\n    mintInfos,\n  }: {\n    pools: Record<string, CpmmRpcData>;\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\n  }): Record<string, CpmmComputeData> {\n    return Object.keys(pools).reduce((acc, cur) => {\n      const pool = pools[cur];\n      const [mintA, mintB] = [pool.mintA.toBase58(), pool.mintB.toBase58()];\n\n      return {\n        ...acc,\n        [cur]: {\n          ...pool,\n          id: new PublicKey(cur),\n          configInfo: pool.configInfo!,\n          version: 7 as const,\n          authority: getPdaPoolAuthority(pool.programId).publicKey,\n          mintA: toApiV3Token({\n            address: mintA,\n            decimals: pool.mintDecimalA,\n            programId: pool.mintProgramA.toBase58(),\n            extensions: {\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\n            },\n          }),\n          mintB: toApiV3Token({\n            address: mintB,\n            decimals: pool.mintDecimalB,\n            programId: pool.mintProgramB.toBase58(),\n            extensions: {\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\n            },\n          }),\n        },\n      };\n    }, {} as Record<string, CpmmComputeData>);\n  }\n\n  public async getPoolInfoFromRpc(poolId: string): Promise<{\n    poolInfo: ApiV3PoolInfoStandardItemCpmm;\n    poolKeys: CpmmKeys;\n    rpcData: CpmmRpcData;\n  }> {\n    const rpcData = await this.getRpcPoolInfo(poolId, true);\n    const mintInfos = await fetchMultipleMintInfos({\n      connection: this.scope.connection,\n      mints: [rpcData.mintA, rpcData.mintB],\n    });\n\n    const mintA = toApiV3Token({\n      address: rpcData.mintA.toBase58(),\n      decimals: rpcData.mintDecimalA,\n      programId: rpcData.mintProgramA.toBase58(),\n      extensions: {\n        feeConfig: mintInfos[rpcData.mintA.toBase58()].feeConfig\n          ? toFeeConfig(mintInfos[rpcData.mintA.toBase58()].feeConfig)\n          : undefined,\n      },\n    });\n    const mintB = toApiV3Token({\n      address: rpcData.mintB.toBase58(),\n      decimals: rpcData.mintDecimalB,\n      programId: rpcData.mintProgramB.toBase58(),\n      extensions: {\n        feeConfig: mintInfos[rpcData.mintB.toBase58()].feeConfig\n          ? toFeeConfig(mintInfos[rpcData.mintB.toBase58()].feeConfig)\n          : undefined,\n      },\n    });\n\n    const lpMint = toApiV3Token({\n      address: rpcData.mintLp.toBase58(),\n      decimals: rpcData.lpDecimals,\n      programId: TOKEN_PROGRAM_ID.toBase58(),\n    });\n\n    const configInfo = {\n      id: rpcData.configId.toBase58(),\n      index: rpcData.configInfo!.index,\n      protocolFeeRate: rpcData.configInfo!.protocolFeeRate.toNumber(),\n      tradeFeeRate: rpcData.configInfo!.tradeFeeRate.toNumber(),\n      fundFeeRate: rpcData.configInfo!.fundFeeRate.toNumber(),\n      createPoolFee: rpcData.configInfo!.createPoolFee.toString(),\n    };\n\n    const mockRewardData = {\n      volume: 0,\n      volumeQuote: 0,\n      volumeFee: 0,\n      apr: 0,\n      feeApr: 0,\n      priceMin: 0,\n      priceMax: 0,\n      rewardApr: [],\n    };\n\n    return {\n      poolInfo: {\n        programId: rpcData.programId.toBase58(),\n        id: poolId,\n        type: \"Standard\",\n        lpMint,\n        lpPrice: 0,\n        lpAmount: rpcData.lpAmount.toNumber(),\n        config: configInfo,\n        mintA,\n        mintB,\n        rewardDefaultInfos: [],\n        rewardDefaultPoolInfos: \"Ecosystem\",\n        price: rpcData.poolPrice.toNumber(),\n        mintAmountA: new Decimal(rpcData.vaultAAmount.toString()).div(10 ** mintA.decimals).toNumber(),\n        mintAmountB: new Decimal(rpcData.vaultBAmount.toString()).div(10 ** mintB.decimals).toNumber(),\n        feeRate: rpcData.configInfo!.tradeFeeRate.toNumber(),\n        openTime: rpcData.openTime.toString(),\n        tvl: 0,\n        burnPercent: 0,\n\n        day: mockRewardData,\n        week: mockRewardData,\n        month: mockRewardData,\n        pooltype: [],\n\n        farmUpcomingCount: 0,\n        farmOngoingCount: 0,\n        farmFinishedCount: 0,\n      },\n      poolKeys: {\n        programId: rpcData.programId.toBase58(),\n        id: poolId,\n        mintA,\n        mintB,\n        openTime: rpcData.openTime.toString(),\n        vault: { A: rpcData.vaultA.toBase58(), B: rpcData.vaultB.toBase58() },\n        authority: getPdaPoolAuthority(rpcData.programId).publicKey.toBase58(),\n        mintLp: lpMint,\n        config: configInfo,\n        observationId: getPdaObservationId(rpcData.programId, new PublicKey(poolId)).publicKey.toBase58(),\n      },\n      rpcData,\n    };\n  }\n\n  public async createPool<T extends TxVersion>({\n    poolId,\n    programId,\n    poolFeeAccount,\n    startTime,\n    ownerInfo,\n    associatedOnly = false,\n    checkCreateATAOwner = false,\n    txVersion,\n    feeConfig,\n    computeBudgetConfig,\n    ...params\n  }: CreateCpmmPoolParam<T>): Promise<MakeTxData<T, { address: CreateCpmmPoolAddress }>> {\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\n    const isFront = new BN(new PublicKey(params.mintA.address).toBuffer()).lte(\n      new BN(new PublicKey(params.mintB.address).toBuffer()),\n    );\n\n    const [mintA, mintB] = isFront ? [params.mintA, params.mintB] : [params.mintB, params.mintA];\n    const [mintAAmount, mintBAmount] = isFront\n      ? [params.mintAAmount, params.mintBAmount]\n      : [params.mintBAmount, params.mintAAmount];\n\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && mintA.address === NATIVE_MINT.toBase58();\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && mintB.address === NATIVE_MINT.toBase58();\n    const [mintAPubkey, mintBPubkey] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\n    const txBuilder = this.createTxBuilder();\n\n    const { account: userVaultA, instructionParams: userVaultAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: mintAPubkey,\n        tokenProgram: mintA.programId,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintAUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: mintAAmount,\n            }\n          : undefined,\n        notUseTokenAccount: mintAUseSOLBalance,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(userVaultAInstruction || {});\n    const { account: userVaultB, instructionParams: userVaultBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: new PublicKey(mintB.address),\n        tokenProgram: mintB.programId,\n        owner: this.scope.ownerPubKey,\n        createInfo: mintBUseSOLBalance\n          ? {\n              payer: payer!,\n              amount: mintBAmount,\n            }\n          : undefined,\n\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    txBuilder.addInstruction(userVaultBInstruction || {});\n\n    if (userVaultA === undefined || userVaultB === undefined) throw Error(\"you don't has some token account\");\n\n    const poolKeys = getCreatePoolKeys({\n      poolId,\n      programId,\n      configId: new PublicKey(feeConfig.id),\n      mintA: mintAPubkey,\n      mintB: mintBPubkey,\n    });\n\n    txBuilder.addInstruction({\n      instructions: [\n        makeCreateCpmmPoolInInstruction(\n          programId,\n          this.scope.ownerPubKey,\n          new PublicKey(feeConfig.id),\n          poolKeys.authority,\n          poolKeys.poolId,\n          mintAPubkey,\n          mintBPubkey,\n          poolKeys.lpMint,\n          userVaultA,\n          userVaultB,\n          getATAAddress(this.scope.ownerPubKey, poolKeys.lpMint).publicKey,\n          poolKeys.vaultA,\n          poolKeys.vaultB,\n          poolFeeAccount,\n          new PublicKey(mintA.programId ?? TOKEN_PROGRAM_ID),\n          new PublicKey(mintB.programId ?? TOKEN_PROGRAM_ID),\n          poolKeys.observationId,\n          mintAAmount,\n          mintBAmount,\n          startTime,\n        ),\n      ],\n      instructionTypes: [InstructionType.CpmmCreatePool],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({\n      txVersion,\n      extInfo: {\n        address: { ...poolKeys, mintA, mintB, programId, poolFeeAccount, feeConfig },\n      },\n    }) as Promise<MakeTxData<T, { address: CreateCpmmPoolAddress }>>;\n  }\n\n  public async addLiquidity<T extends TxVersion>(params: AddCpmmLiquidityParams<T>): Promise<MakeTxData<T>> {\n    const {\n      poolInfo,\n      poolKeys: propPoolKeys,\n      inputAmount,\n      baseIn,\n      slippage,\n      computeResult,\n      computeBudgetConfig,\n      config,\n      txVersion,\n    } = params;\n\n    if (this.scope.availability.addStandardPosition === false)\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\n\n    if (inputAmount.isZero())\n      this.logAndCreateError(\"amounts must greater than zero\", \"amountInA\", {\n        amountInA: inputAmount.toString(),\n      });\n    const { account } = this.scope;\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\n      // default\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\n      // custom\n      ...config,\n    };\n    const rpcPoolData = computeResult ? undefined : await this.getRpcPoolInfo(poolInfo.id);\n\n    const {\n      liquidity,\n      inputAmountFee,\n      anotherAmount: _anotherAmount,\n    } = computeResult ||\n    this.computePairAmount({\n      poolInfo: {\n        ...poolInfo,\n        lpAmount: new Decimal(rpcPoolData!.lpAmount.toString()).div(10 ** poolInfo.lpMint.decimals).toNumber(),\n      },\n      baseReserve: rpcPoolData!.baseReserve,\n      quoteReserve: rpcPoolData!.quoteReserve,\n      slippage: new Percent(0),\n      baseIn,\n      epochInfo: await this.scope.fetchEpochInfo(),\n      amount: new Decimal(inputAmount.toString()).div(\n        10 ** (baseIn ? poolInfo.mintA.decimals : poolInfo.mintB.decimals),\n      ),\n    });\n\n    const anotherAmount = _anotherAmount.amount;\n    const mintAUseSOLBalance = poolInfo.mintA.address === NATIVE_MINT.toString();\n    const mintBUseSOLBalance = poolInfo.mintB.address === NATIVE_MINT.toString();\n\n    const txBuilder = this.createTxBuilder();\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\n\n    const { account: tokenAccountA, instructionParams: _tokenAccountAInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintAUseSOLBalance || (baseIn ? inputAmount : anotherAmount).isZero()\n            ? {\n                payer: this.scope.ownerPubKey,\n                amount: baseIn ? inputAmount : anotherAmount,\n              }\n            : undefined,\n        skipCloseAccount: !mintAUseSOLBalance,\n        notUseTokenAccount: mintAUseSOLBalance,\n        associatedOnly: false,\n        checkCreateATAOwner,\n      });\n\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\n\n    const { account: tokenAccountB, instructionParams: _tokenAccountBInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        owner: this.scope.ownerPubKey,\n\n        createInfo:\n          mintBUseSOLBalance || (baseIn ? anotherAmount : inputAmount).isZero()\n            ? {\n                payer: this.scope.ownerPubKey,\n                amount: baseIn ? anotherAmount : inputAmount,\n              }\n            : undefined,\n        skipCloseAccount: !mintBUseSOLBalance,\n        notUseTokenAccount: mintBUseSOLBalance,\n        associatedOnly: false,\n        checkCreateATAOwner,\n      });\n\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\n\n    if (!tokenAccountA && !tokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: new PublicKey(poolInfo.lpMint.address),\n    });\n    const { tokenAccount: _lpTokenAccount, ...lpInstruction } = await account.handleTokenAccount({\n      side: \"out\",\n      amount: 0,\n      mint: new PublicKey(poolInfo.lpMint.address),\n      tokenAccount: lpTokenAccount,\n      bypassAssociatedCheck,\n      checkCreateATAOwner,\n    });\n    txBuilder.addInstruction(lpInstruction);\n    const poolKeys = propPoolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\n    const _slippage = new Percent(new BN(1)).sub(slippage);\n\n    txBuilder.addInstruction({\n      instructions: [\n        makeDepositCpmmInInstruction(\n          new PublicKey(poolInfo.programId),\n          this.scope.ownerPubKey,\n          new PublicKey(poolKeys.authority),\n          new PublicKey(poolInfo.id),\n          _lpTokenAccount!,\n          tokenAccountA!,\n          tokenAccountB!,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          mintA,\n          mintB,\n          new PublicKey(poolInfo.lpMint.address),\n\n          computeResult ? computeResult?.liquidity : _slippage.mul(liquidity).quotient,\n          baseIn ? inputAmountFee.amount : anotherAmount,\n          baseIn ? anotherAmount : inputAmountFee.amount,\n        ),\n      ],\n      instructionTypes: [InstructionType.CpmmAddLiquidity],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    });\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async withdrawLiquidity<T extends TxVersion>(params: WithdrawCpmmLiquidityParams<T>): Promise<MakeTxData<T>> {\n    const { poolInfo, poolKeys: propPoolKeys, lpAmount, slippage, computeBudgetConfig, txVersion } = params;\n\n    if (this.scope.availability.addStandardPosition === false)\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\n\n    const _slippage = new Percent(new BN(1)).sub(slippage);\n\n    const rpcPoolData = await this.getRpcPoolInfo(poolInfo.id);\n    const [amountMintA, amountMintB] = [\n      _slippage.mul(lpAmount.mul(rpcPoolData.baseReserve).div(rpcPoolData.lpAmount)).quotient,\n      _slippage.mul(lpAmount.mul(rpcPoolData.quoteReserve).div(rpcPoolData.lpAmount)).quotient,\n    ];\n\n    const epochInfo = await this.scope.fetchEpochInfo();\n    const [mintAAmountFee, mintBAmountFee] = [\n      getTransferAmountFeeV2(amountMintA, poolInfo.mintA.extensions.feeConfig, epochInfo, false),\n      getTransferAmountFeeV2(amountMintB, poolInfo.mintB.extensions.feeConfig, epochInfo, false),\n    ];\n\n    const { account } = this.scope;\n    const txBuilder = this.createTxBuilder();\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\n\n    const mintAUseSOLBalance = mintA.equals(WSOLMint);\n    const mintBUseSOLBalance = mintB.equals(WSOLMint);\n\n    let tokenAccountA: PublicKey | undefined = undefined;\n    let tokenAccountB: PublicKey | undefined = undefined;\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : true,\n        checkCreateATAOwner: false,\n      });\n    tokenAccountA = _ownerTokenAccountA;\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\n\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        notUseTokenAccount: mintBUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : true,\n        checkCreateATAOwner: false,\n      });\n    tokenAccountB = _ownerTokenAccountB;\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\n\n    if (!tokenAccountA || !tokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\n\n    const lpTokenAccount = await account.getCreatedTokenAccount({\n      mint: new PublicKey(poolInfo.lpMint.address),\n    });\n\n    if (!lpTokenAccount)\n      this.logAndCreateError(\"cannot found lp token account\", \"tokenAccounts\", account.tokenAccounts);\n    const poolKeys = propPoolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\n    txBuilder.addInstruction({\n      instructions: [\n        makeWithdrawCpmmInInstruction(\n          new PublicKey(poolInfo.programId),\n          this.scope.ownerPubKey,\n          new PublicKey(poolKeys.authority),\n          new PublicKey(poolInfo.id),\n          lpTokenAccount!,\n          tokenAccountA!,\n          tokenAccountB!,\n          new PublicKey(poolKeys.vault.A),\n          new PublicKey(poolKeys.vault.B),\n          mintA,\n          mintB,\n          new PublicKey(poolInfo.lpMint.address),\n\n          lpAmount,\n          amountMintA.sub(mintAAmountFee.fee ?? new BN(0)),\n          amountMintB.sub(mintBAmountFee.fee ?? new BN(0)),\n        ),\n      ],\n      instructionTypes: [InstructionType.CpmmWithdrawLiquidity],\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\n    });\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async swap<T extends TxVersion>(params: CpmmSwapParams<T>): Promise<MakeTxData<T>> {\n    const {\n      poolInfo,\n      poolKeys: propPoolKeys,\n      baseIn,\n      fixedOut,\n      inputAmount,\n      swapResult,\n      slippage = 0,\n      config,\n      computeBudgetConfig,\n      txVersion,\n    } = params;\n\n    const { bypassAssociatedCheck, checkCreateATAOwner, associatedOnly } = {\n      // default\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false, associatedOnly: true },\n      // custom\n      ...config,\n    };\n\n    const txBuilder = this.createTxBuilder();\n\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\n\n    if (!fixedOut) {\n      swapResult.destinationAmountSwapped = swapResult.destinationAmountSwapped\n        .mul(new BN((1 - slippage) * 10000))\n        .div(new BN(10000));\n    } else {\n      swapResult.sourceAmountSwapped = swapResult.sourceAmountSwapped\n        .mul(new BN((1 + slippage) * 10000))\n        .div(new BN(10000));\n    }\n\n    const mintAUseSOLBalance = poolInfo.mintA.address === WSOLMint.toBase58();\n    const mintBUseSOLBalance = poolInfo.mintB.address === WSOLMint.toBase58();\n    const { account: mintATokenAcc, instructionParams: mintATokenAccInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: mintA,\n        tokenProgram: new PublicKey(poolInfo.mintA.programId ?? TOKEN_PROGRAM_ID),\n        owner: this.scope.ownerPubKey,\n        createInfo:\n          mintAUseSOLBalance || !baseIn\n            ? {\n                payer: this.scope.ownerPubKey,\n                amount: baseIn ? swapResult.sourceAmountSwapped : 0,\n              }\n            : undefined,\n        notUseTokenAccount: mintAUseSOLBalance,\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    mintATokenAccInstruction && txBuilder.addInstruction(mintATokenAccInstruction);\n\n    const { account: mintBTokenAcc, instructionParams: mintBTokenAccInstruction } =\n      await this.scope.account.getOrCreateTokenAccount({\n        mint: mintB,\n        tokenProgram: new PublicKey(poolInfo.mintB.programId ?? TOKEN_PROGRAM_ID),\n        owner: this.scope.ownerPubKey,\n        createInfo:\n          mintBUseSOLBalance || baseIn\n            ? {\n                payer: this.scope.ownerPubKey,\n                amount: baseIn ? 0 : swapResult.sourceAmountSwapped,\n              }\n            : undefined,\n        notUseTokenAccount: mintBUseSOLBalance,\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n    mintBTokenAccInstruction && txBuilder.addInstruction(mintBTokenAccInstruction);\n\n    if (!mintATokenAcc || !mintBTokenAcc)\n      this.logAndCreateError(\"user do not have token account\", {\n        mintA: poolInfo.mintA.symbol || poolInfo.mintA.address,\n        mintB: poolInfo.mintB.symbol || poolInfo.mintB.address,\n        mintATokenAcc,\n        mintBTokenAcc,\n        mintAUseSOLBalance,\n        mintBUseSOLBalance,\n        associatedOnly,\n      });\n\n    const poolKeys = propPoolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\n\n    txBuilder.addInstruction({\n      instructions: [\n        !fixedOut\n          ? makeSwapCpmmBaseInInstruction(\n              new PublicKey(poolInfo.programId),\n              this.scope.ownerPubKey,\n              new PublicKey(poolKeys.authority),\n              new PublicKey(poolKeys.config.id),\n              new PublicKey(poolInfo.id),\n              baseIn ? mintATokenAcc! : mintBTokenAcc!,\n              baseIn ? mintBTokenAcc! : mintATokenAcc!,\n              new PublicKey(poolKeys.vault[baseIn ? \"A\" : \"B\"]),\n              new PublicKey(poolKeys.vault[baseIn ? \"B\" : \"A\"]),\n              new PublicKey(poolInfo[baseIn ? \"mintA\" : \"mintB\"].programId ?? TOKEN_PROGRAM_ID),\n              new PublicKey(poolInfo[baseIn ? \"mintB\" : \"mintA\"].programId ?? TOKEN_PROGRAM_ID),\n              baseIn ? mintA : mintB,\n              baseIn ? mintB : mintA,\n              getPdaObservationId(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\n\n              inputAmount,\n              swapResult.destinationAmountSwapped,\n            )\n          : makeSwapCpmmBaseOutInstruction(\n              new PublicKey(poolInfo.programId),\n              this.scope.ownerPubKey,\n              new PublicKey(poolKeys.authority),\n              new PublicKey(poolKeys.config.id),\n              new PublicKey(poolInfo.id),\n\n              baseIn ? mintATokenAcc! : mintBTokenAcc!,\n              baseIn ? mintBTokenAcc! : mintATokenAcc!,\n\n              new PublicKey(poolKeys.vault[baseIn ? \"A\" : \"B\"]),\n              new PublicKey(poolKeys.vault[baseIn ? \"B\" : \"A\"]),\n              new PublicKey(poolInfo[baseIn ? \"mintA\" : \"mintB\"].programId ?? TOKEN_PROGRAM_ID),\n              new PublicKey(poolInfo[baseIn ? \"mintB\" : \"mintA\"].programId ?? TOKEN_PROGRAM_ID),\n              baseIn ? mintA : mintB,\n              baseIn ? mintB : mintA,\n\n              getPdaObservationId(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\n\n              swapResult.sourceAmountSwapped,\n              swapResult.destinationAmountSwapped,\n            ),\n      ],\n      instructionTypes: [fixedOut ? InstructionType.CpmmSwapBaseOut : InstructionType.ClmmSwapBaseIn],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async lockLp<T extends TxVersion>(params: LockCpmmLpParams<T>): Promise<MakeTxData<CpmmLockExtInfo>> {\n    const { poolInfo, lpAmount, computeBudgetConfig, txVersion } = params;\n\n    if (lpAmount.isZero())\n      this.logAndCreateError(\"lpAmount must greater than zero\", {\n        lpAmount: lpAmount.toString(),\n      });\n\n    const txBuilder = this.createTxBuilder();\n\n    const poolKeys = params.poolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\n\n    const insData = await makeCpmmLockInstruction({\n      poolInfo,\n      poolKeys,\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        feePayer: params.feePayer ?? this.scope.ownerPubKey,\n      },\n      lockProgram: params.programId ?? LOCK_CPMM_PROGRAM,\n      lockAuthProgram: params.authProgram ?? LOCK_CPMM_AUTH,\n      lpAmount,\n      withMetadata: params.withMetadata ?? true,\n      getEphemeralSigners: params.getEphemeralSigners,\n    });\n\n    txBuilder.addInstruction(insData);\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild({ txVersion, extInfo: insData.address }) as Promise<MakeTxData<CpmmLockExtInfo>>;\n  }\n\n  public async harvestLockLp<T extends TxVersion>(params: HarvestLockCpmmLpParams<T>): Promise<MakeTxData> {\n    const {\n      poolInfo,\n      lpFeeAmount,\n      nftMint,\n      programId = LOCK_CPMM_PROGRAM,\n      authProgram = LOCK_CPMM_AUTH,\n      cpmmProgram,\n      computeBudgetConfig,\n      txVersion,\n    } = params;\n\n    if (lpFeeAmount.isZero())\n      this.logAndCreateError(\"lpFeeAmount must greater than zero\", {\n        lpAmount: lpFeeAmount.toString(),\n      });\n\n    const feePayer = params.feePayer || this.scope.ownerPubKey;\n\n    const txBuilder = this.createTxBuilder();\n\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\n\n    const mintAUseSOLBalance = mintA.equals(WSOLMint);\n    const mintBUseSOLBalance = mintB.equals(WSOLMint);\n\n    let tokenAccountA: PublicKey | undefined = undefined;\n    let tokenAccountB: PublicKey | undefined = undefined;\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintA.programId,\n        mint: new PublicKey(poolInfo.mintA.address),\n        notUseTokenAccount: mintAUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintAUseSOLBalance,\n        associatedOnly: mintAUseSOLBalance ? false : true,\n        checkCreateATAOwner: false,\n      });\n    tokenAccountA = _ownerTokenAccountA;\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\n\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolInfo.mintB.programId,\n        mint: new PublicKey(poolInfo.mintB.address),\n        notUseTokenAccount: mintBUseSOLBalance,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !mintBUseSOLBalance,\n        associatedOnly: mintBUseSOLBalance ? false : true,\n        checkCreateATAOwner: false,\n      });\n    tokenAccountB = _ownerTokenAccountB;\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\n\n    if (!tokenAccountA || !tokenAccountB)\n      this.logAndCreateError(\"cannot found target token accounts\", { tokenAccountA, tokenAccountB });\n\n    const poolKeys = params.poolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\n\n    const { publicKey: nftAccount } = getATAAddress(feePayer, nftMint, TOKEN_PROGRAM_ID);\n    const { publicKey: lockPda } = getCpLockPda(programId, nftMint);\n    const { publicKey: lockLpVault } = getATAAddress(\n      authProgram,\n      new PublicKey(poolInfo.lpMint.address),\n      TOKEN_PROGRAM_ID,\n    );\n\n    txBuilder.addInstruction({\n      instructions: [\n        collectCpFeeInstruction({\n          programId: programId ?? LOCK_CPMM_PROGRAM,\n          nftOwner: this.scope.ownerPubKey,\n          auth: authProgram ?? LOCK_CPMM_AUTH,\n\n          nftMint,\n          nftAccount,\n\n          lockPda,\n          poolId: new PublicKey(poolInfo.id),\n          mintLp: new PublicKey(poolKeys.mintLp.address),\n\n          userVaultA: tokenAccountA!,\n          userVaultB: tokenAccountB!,\n          poolVaultA: new PublicKey(poolKeys.vault.A),\n          poolVaultB: new PublicKey(poolKeys.vault.B),\n\n          mintA,\n          mintB,\n          lockLpVault,\n          lpFeeAmount,\n\n          cpmmProgram: cpmmProgram?.programId,\n          cpmmAuthProgram: cpmmProgram?.authProgram,\n        }),\n      ],\n      instructionTypes: [InstructionType.CpmmCollectLockFee],\n    });\n\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData>;\n  }\n\n  public computeSwapAmount({\n    pool,\n    amountIn,\n    outputMint,\n    slippage,\n  }: {\n    pool: CpmmComputeData;\n    amountIn: BN;\n    outputMint: string | PublicKey;\n    slippage: number;\n  }): {\n    allTrade: boolean;\n    amountIn: BN;\n    amountOut: BN;\n    minAmountOut: BN;\n    fee: BN;\n    executionPrice: Decimal;\n    priceImpact: any;\n  } {\n    const isBaseIn = outputMint.toString() === pool.mintB.address;\n\n    const swapResult = CurveCalculator.swap(\n      amountIn,\n      isBaseIn ? pool.baseReserve : pool.quoteReserve,\n      isBaseIn ? pool.quoteReserve : pool.baseReserve,\n      pool.configInfo.tradeFeeRate,\n    );\n\n    const executionPrice = new Decimal(swapResult.destinationAmountSwapped.toString()).div(\n      swapResult.sourceAmountSwapped.toString(),\n    );\n\n    const minAmountOut = swapResult.destinationAmountSwapped.mul(new BN((1 - slippage) * 10000)).div(new BN(10000));\n\n    return {\n      allTrade: swapResult.sourceAmountSwapped.eq(amountIn),\n      amountIn,\n      amountOut: swapResult.destinationAmountSwapped,\n      minAmountOut,\n      executionPrice,\n      fee: swapResult.tradeFee,\n      priceImpact: pool.poolPrice.sub(executionPrice).div(pool.poolPrice),\n    };\n  }\n\n  public computePairAmount({\n    poolInfo,\n    baseReserve,\n    quoteReserve,\n    amount,\n    slippage,\n    epochInfo,\n    baseIn,\n  }: ComputePairAmountParams): {\n    inputAmountFee: GetTransferAmountFee;\n    anotherAmount: GetTransferAmountFee;\n    maxAnotherAmount: GetTransferAmountFee;\n    minAnotherAmount: GetTransferAmountFee;\n    liquidity: BN;\n  } {\n    const coefficient = 1 - Number(slippage.toSignificant()) / 100;\n    const inputAmount = new BN(\n      new Decimal(amount)\n        .mul(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals)\n        .mul(coefficient)\n        .toFixed(0),\n    );\n    const inputAmountFee = getTransferAmountFeeV2(\n      inputAmount,\n      poolInfo[baseIn ? \"mintA\" : \"mintB\"].extensions.feeConfig,\n      epochInfo,\n      false,\n    );\n    const _inputAmountWithoutFee = inputAmount.sub(inputAmountFee.fee ?? new BN(0));\n\n    const lpAmount = new BN(\n      new Decimal(poolInfo.lpAmount).mul(10 ** poolInfo.lpMint.decimals).toFixed(0, Decimal.ROUND_DOWN),\n    );\n    this.logDebug(\"baseReserve:\", baseReserve.toString(), \"quoteReserve:\", quoteReserve.toString());\n\n    this.logDebug(\n      \"tokenIn:\",\n      baseIn ? poolInfo.mintA.symbol : poolInfo.mintB.symbol,\n      \"amountIn:\",\n      inputAmount.toString(),\n      \"amountInFee:\",\n      inputAmountFee.fee?.toString() ?? 0,\n      \"anotherToken:\",\n      baseIn ? poolInfo.mintB.symbol : poolInfo.mintA.symbol,\n      \"slippage:\",\n      `${slippage.toSignificant()}%`,\n    );\n\n    // input is fixed\n    const input = baseIn ? \"base\" : \"quote\";\n    this.logDebug(\"input side:\", input);\n\n    const liquidity = _inputAmountWithoutFee.mul(lpAmount).div(input === \"base\" ? baseReserve : quoteReserve);\n    let anotherAmountFee: GetTransferAmountFee = {\n      amount: BN_ZERO,\n      fee: undefined,\n      expirationTime: undefined,\n    };\n    if (!_inputAmountWithoutFee.isZero()) {\n      const lpAmountData = lpToAmount(liquidity, baseReserve, quoteReserve, lpAmount);\n      this.logDebug(\"lpAmountData:\", {\n        amountA: lpAmountData.amountA.toString(),\n        amountB: lpAmountData.amountB.toString(),\n      });\n      anotherAmountFee = getTransferAmountFeeV2(\n        lpAmountData[baseIn ? \"amountB\" : \"amountA\"],\n        poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\n        epochInfo,\n        true,\n      );\n    }\n\n    const _slippage = new Percent(new BN(1)).add(slippage);\n    const _slippageMin = new Percent(new BN(1)).sub(slippage);\n    const slippageAdjustedAmount = getTransferAmountFeeV2(\n      _slippage.mul(anotherAmountFee.amount.sub(anotherAmountFee.fee ?? new BN(0))).quotient,\n      poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\n      epochInfo,\n      true,\n    );\n    const slippageAdjustedMinAmount = getTransferAmountFeeV2(\n      _slippageMin.mul(anotherAmountFee.amount.sub(anotherAmountFee.fee ?? new BN(0))).quotient,\n      poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\n      epochInfo,\n      true,\n    );\n\n    this.logDebug(\n      \"anotherAmount:\",\n      anotherAmountFee.amount.toString(),\n      \"anotherAmountFee:\",\n      anotherAmountFee.fee?.toString() ?? 0,\n      \"maxAnotherAmount:\",\n      slippageAdjustedAmount.amount.toString(),\n      \"maxAnotherAmountFee:\",\n      slippageAdjustedAmount.fee?.toString() ?? 0,\n    );\n\n    return {\n      inputAmountFee,\n      anotherAmount: anotherAmountFee,\n      maxAnotherAmount: slippageAdjustedAmount,\n      minAnotherAmount: slippageAdjustedMinAmount,\n      liquidity,\n    };\n  }\n}\n\nfunction lpToAmount(lp: BN, poolAmountA: BN, poolAmountB: BN, supply: BN): { amountA: BN; amountB: BN } {\n  let amountA = lp.mul(poolAmountA).div(supply);\n  if (!amountA.isZero() && !lp.mul(poolAmountA).mod(supply).isZero()) amountA = amountA.add(new BN(1));\n  let amountB = lp.mul(poolAmountB).div(supply);\n  if (!amountB.isZero() && !lp.mul(poolAmountB).mod(supply).isZero()) amountB = amountB.add(new BN(1));\n\n  return {\n    amountA,\n    amountB,\n  };\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js-light\";\nimport { ApiV3Token } from \"../../../api/type\";\nimport { BNDivCeil } from \"../../../common\";\nimport { ConstantProductCurve } from \"./constantProduct\";\nimport { CpmmFee } from \"./fee\";\n\nexport enum RoundDirection {\n  Floor,\n  Ceiling,\n}\n\nexport type SwapWithoutFeesResult = { sourceAmountSwapped: BN; destinationAmountSwapped: BN };\n\nexport type TradingTokenResult = { tokenAmount0: BN; tokenAmount1: BN };\n\nexport type SwapResult = {\n  newSwapSourceAmount: BN;\n  newSwapDestinationAmount: BN;\n  sourceAmountSwapped: BN;\n  destinationAmountSwapped: BN;\n  tradeFee: BN;\n};\n\nexport class CurveCalculator {\n  static validate_supply(tokenAmount0: BN, tokenAmount1: BN): void {\n    if (tokenAmount0.isZero()) throw Error(\"tokenAmount0 is zero\");\n    if (tokenAmount1.isZero()) throw Error(\"tokenAmount1 is zero\");\n  }\n\n  static swap(sourceAmount: BN, swapSourceAmount: BN, swapDestinationAmount: BN, tradeFeeRate: BN): SwapResult {\n    const tradeFee = CpmmFee.tradingFee(sourceAmount, tradeFeeRate);\n\n    const sourceAmountLessFees = sourceAmount.sub(tradeFee);\n\n    const { sourceAmountSwapped, destinationAmountSwapped } = ConstantProductCurve.swapWithoutFees(\n      sourceAmountLessFees,\n      swapSourceAmount,\n      swapDestinationAmount,\n    );\n\n    const _sourceAmountSwapped = sourceAmountSwapped.add(tradeFee);\n    return {\n      newSwapSourceAmount: swapSourceAmount.add(_sourceAmountSwapped),\n      newSwapDestinationAmount: swapDestinationAmount.sub(destinationAmountSwapped),\n      sourceAmountSwapped: _sourceAmountSwapped,\n      destinationAmountSwapped,\n      tradeFee,\n    };\n  }\n\n  static swapBaseOut({\n    poolMintA,\n    poolMintB,\n    tradeFeeRate,\n    baseReserve,\n    quoteReserve,\n    outputMint,\n    outputAmount,\n  }: {\n    poolMintA: ApiV3Token;\n    poolMintB: ApiV3Token;\n    tradeFeeRate: BN;\n    baseReserve: BN;\n    quoteReserve: BN;\n    outputMint: string | PublicKey;\n    outputAmount: BN;\n  }): {\n    amountRealOut: BN;\n\n    amountIn: BN;\n    amountInWithoutFee: BN;\n\n    tradeFee: BN;\n    priceImpact: number;\n  } {\n    const [reserveInAmount, reserveOutAmount, reserveInDecimals, reserveOutDecimals, inputMint] =\n      poolMintB.address === outputMint.toString()\n        ? [baseReserve, quoteReserve, poolMintA.decimals, poolMintB.decimals, poolMintA.address]\n        : [quoteReserve, baseReserve, poolMintB.decimals, poolMintA.decimals, poolMintB.address];\n    const currentPrice = new Decimal(reserveOutAmount.toString())\n      .div(10 ** reserveOutDecimals)\n      .div(new Decimal(reserveInAmount.toString()).div(10 ** reserveInDecimals));\n    const amountRealOut = outputAmount.gte(reserveOutAmount) ? reserveOutAmount.sub(new BN(1)) : outputAmount;\n\n    const denominator = reserveOutAmount.sub(amountRealOut);\n    const amountInWithoutFee = BNDivCeil(reserveInAmount.mul(amountRealOut), denominator);\n    const amountIn = BNDivCeil(amountInWithoutFee.mul(new BN(1_000_000)), new BN(1_000_000).sub(tradeFeeRate));\n    const fee = amountIn.sub(amountInWithoutFee);\n    const executionPrice = new Decimal(amountRealOut.toString())\n      .div(10 ** reserveOutDecimals)\n      .div(new Decimal(amountIn.toString()).div(10 ** reserveInDecimals));\n    const priceImpact = currentPrice.isZero() ? 0 : executionPrice.sub(currentPrice).div(currentPrice).abs().toNumber();\n\n    return {\n      amountRealOut,\n\n      amountIn,\n      amountInWithoutFee,\n\n      tradeFee: fee,\n      priceImpact,\n    };\n  }\n}\n","import BN from \"bn.js\";\nimport { RoundDirection, SwapWithoutFeesResult, TradingTokenResult } from \"./calculator\";\n\nfunction checkedRem(dividend: BN, divisor: BN): BN {\n  if (divisor.isZero()) throw Error(\"divisor is zero\");\n\n  const result = dividend.mod(divisor);\n  return result;\n}\n\nfunction checkedCeilDiv(dividend: BN, rhs: BN): BN[] {\n  if (rhs.isZero()) throw Error(\"rhs is zero\");\n\n  let quotient = dividend.div(rhs);\n\n  if (quotient.isZero()) throw Error(\"quotient is zero\");\n\n  let remainder = checkedRem(dividend, rhs);\n\n  if (remainder.gt(ZERO)) {\n    quotient = quotient.add(new BN(1));\n\n    rhs = dividend.div(quotient);\n    remainder = checkedRem(dividend, quotient);\n    if (remainder.gt(ZERO)) {\n      rhs = rhs.add(new BN(1));\n    }\n  }\n  return [quotient, rhs];\n}\n\nconst ZERO = new BN(0);\n\nexport class ConstantProductCurve {\n  static swapWithoutFees(sourceAmount: BN, swapSourceAmount: BN, swapDestinationAmount: BN): SwapWithoutFeesResult {\n    const invariant = swapSourceAmount.mul(swapDestinationAmount);\n\n    const newSwapSourceAmount = swapSourceAmount.add(sourceAmount);\n    const [newSwapDestinationAmount, _newSwapSourceAmount] = checkedCeilDiv(invariant, newSwapSourceAmount);\n\n    const sourceAmountSwapped = _newSwapSourceAmount.sub(swapSourceAmount);\n    const destinationAmountSwapped = swapDestinationAmount.sub(newSwapDestinationAmount);\n    if (destinationAmountSwapped.isZero()) throw Error(\"destinationAmountSwapped is zero\");\n\n    return {\n      sourceAmountSwapped,\n      destinationAmountSwapped,\n    };\n  }\n\n  static lpTokensToTradingTokens(\n    lpTokenAmount: BN,\n    lpTokenSupply: BN,\n    swapTokenAmount0: BN,\n    swapTokenAmount1: BN,\n    roundDirection: RoundDirection,\n  ): TradingTokenResult {\n    let tokenAmount0 = lpTokenAmount.mul(swapTokenAmount0).div(lpTokenSupply);\n    let tokenAmount1 = lpTokenAmount.mul(swapTokenAmount1).div(lpTokenSupply);\n\n    if (roundDirection === RoundDirection.Floor) {\n      return { tokenAmount0, tokenAmount1 };\n    } else if (roundDirection === RoundDirection.Ceiling) {\n      const tokenRemainder0 = checkedRem(lpTokenAmount.mul(swapTokenAmount0), lpTokenSupply);\n\n      if (tokenRemainder0.gt(ZERO) && tokenAmount0.gt(ZERO)) {\n        tokenAmount0 = tokenAmount0.add(new BN(1));\n      }\n\n      const token1Remainder = checkedRem(lpTokenAmount.mul(swapTokenAmount1), lpTokenSupply);\n\n      if (token1Remainder.gt(ZERO) && tokenAmount1.gt(ZERO)) {\n        tokenAmount1 = tokenAmount1.add(new BN(1));\n      }\n\n      return { tokenAmount0, tokenAmount1 };\n    }\n    throw Error(\"roundDirection value error\");\n  }\n}\n","import BN from \"bn.js\";\n\nexport const FEE_RATE_DENOMINATOR_VALUE = new BN(1_000_000);\n\nexport function ceilDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\n  return tokenAmount.mul(feeNumerator).add(feeDenominator).sub(new BN(1)).div(feeDenominator);\n}\n\nexport function floorDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\n  return tokenAmount.mul(feeNumerator).div(feeDenominator);\n}\n\nexport class CpmmFee {\n  static tradingFee(amount: BN, tradeFeeRate: BN): BN {\n    return ceilDiv(amount, tradeFeeRate, FEE_RATE_DENOMINATOR_VALUE);\n  }\n  static protocolFee(amount: BN, protocolFeeRate: BN): BN {\n    return floorDiv(amount, protocolFeeRate, FEE_RATE_DENOMINATOR_VALUE);\n  }\n  static fundFee(amount: BN, fundFeeRate: BN): BN {\n    return floorDiv(amount, fundFeeRate, FEE_RATE_DENOMINATOR_VALUE);\n  }\n}\n","import BN from \"bn.js\";\n\nimport { AccountMeta, PublicKey, TransactionInstruction, Signer, Keypair, SystemProgram } from \"@solana/web3.js\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  MEMO_PROGRAM_ID2,\n  RENT_PROGRAM_ID,\n  SYSTEM_PROGRAM_ID,\n  METADATA_PROGRAM_ID,\n  createLogger,\n  CREATE_CPMM_POOL_PROGRAM,\n  CREATE_CPMM_POOL_AUTH,\n  InstructionType,\n} from \"@/common\";\nimport { getCpmmPdaPoolId, getCpLockPda } from \"./pda\";\n\nimport { struct, u64, bool } from \"@/marshmallow\";\nimport { ReturnTypeMakeInstructions } from \"@/raydium/type\";\nimport { ApiV3PoolInfoStandardItemCpmm, CpmmKeys } from \"@/api\";\nimport { getATAAddress } from \"@/common\";\nimport { getPdaMetadataKey } from \"../clmm\";\nimport { CpmmLockExtInfo } from \"./type\";\n\nconst logger = createLogger(\"Raydium_cpmm\");\nconst anchorDataBuf = {\n  initialize: [175, 175, 109, 31, 13, 152, 155, 237],\n  deposit: [242, 35, 198, 137, 82, 225, 242, 182],\n  withdraw: [183, 18, 70, 156, 148, 109, 161, 34],\n  swapBaseInput: [143, 190, 90, 218, 196, 30, 51, 222],\n  swapBaseOutput: [55, 217, 98, 86, 163, 74, 180, 173],\n  lockCpLiquidity: [216, 157, 29, 78, 38, 51, 31, 26],\n  collectCpFee: [8, 30, 51, 199, 209, 184, 247, 133],\n};\n\nexport function makeCreateCpmmPoolInInstruction(\n  programId: PublicKey,\n  creator: PublicKey,\n  configId: PublicKey,\n  authority: PublicKey,\n  poolId: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n  lpMint: PublicKey,\n  userVaultA: PublicKey,\n  userVaultB: PublicKey,\n  userLpAccount: PublicKey,\n  vaultA: PublicKey,\n  vaultB: PublicKey,\n  createPoolFeeAccount: PublicKey,\n  mintProgramA: PublicKey,\n  mintProgramB: PublicKey,\n  observationId: PublicKey,\n\n  amountMaxA: BN,\n  amountMaxB: BN,\n  openTime: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"amountMaxA\"), u64(\"amountMaxB\"), u64(\"openTime\")]);\n\n  const pdaPoolId = getCpmmPdaPoolId(programId, configId, mintA, mintB).publicKey;\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: creator, isSigner: true, isWritable: false },\n    { pubkey: configId, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: !poolId.equals(pdaPoolId), isWritable: true },\n    { pubkey: mintA, isSigner: false, isWritable: false },\n    { pubkey: mintB, isSigner: false, isWritable: false },\n    { pubkey: lpMint, isSigner: false, isWritable: true },\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\n    { pubkey: vaultA, isSigner: false, isWritable: true },\n    { pubkey: vaultB, isSigner: false, isWritable: true },\n    { pubkey: createPoolFeeAccount, isSigner: false, isWritable: true },\n    { pubkey: observationId, isSigner: false, isWritable: true },\n\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: mintProgramA, isSigner: false, isWritable: false },\n    { pubkey: mintProgramB, isSigner: false, isWritable: false },\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      amountMaxA,\n      amountMaxB,\n      openTime,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.initialize, ...data]),\n  });\n}\n\nexport function makeDepositCpmmInInstruction(\n  programId: PublicKey,\n  owner: PublicKey,\n  authority: PublicKey,\n  poolId: PublicKey,\n  userLpAccount: PublicKey,\n  userVaultA: PublicKey,\n  userVaultB: PublicKey,\n  vaultA: PublicKey,\n  vaultB: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n  lpMint: PublicKey,\n\n  lpAmount: BN,\n  amountMaxA: BN,\n  amountMaxB: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMaxA\"), u64(\"amountMaxB\")]);\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: owner, isSigner: true, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\n    { pubkey: vaultA, isSigner: false, isWritable: true },\n    { pubkey: vaultB, isSigner: false, isWritable: true },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: mintA, isSigner: false, isWritable: false },\n    { pubkey: mintB, isSigner: false, isWritable: false },\n    { pubkey: lpMint, isSigner: false, isWritable: true },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  logger.debug(\"cpmm deposit data\", {\n    lpAmount: lpAmount.toString(),\n    amountMaxA: amountMaxA.toString(),\n    amountMaxB: amountMaxB.toString(),\n  });\n  dataLayout.encode(\n    {\n      lpAmount,\n      amountMaxA,\n      amountMaxB,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.deposit, ...data]),\n  });\n}\n\nexport function makeWithdrawCpmmInInstruction(\n  programId: PublicKey,\n  owner: PublicKey,\n  authority: PublicKey,\n  poolId: PublicKey,\n  userLpAccount: PublicKey,\n  userVaultA: PublicKey,\n  userVaultB: PublicKey,\n  vaultA: PublicKey,\n  vaultB: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n  lpMint: PublicKey,\n\n  lpAmount: BN,\n  amountMinA: BN,\n  amountMinB: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: owner, isSigner: true, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\n    { pubkey: vaultA, isSigner: false, isWritable: true },\n    { pubkey: vaultB, isSigner: false, isWritable: true },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: mintA, isSigner: false, isWritable: false },\n    { pubkey: mintB, isSigner: false, isWritable: false },\n    { pubkey: lpMint, isSigner: false, isWritable: true },\n    { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      lpAmount,\n      amountMinA,\n      amountMinB,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.withdraw, ...data]),\n  });\n}\n\nexport function makeSwapCpmmBaseInInstruction(\n  programId: PublicKey,\n  payer: PublicKey,\n  authority: PublicKey,\n  configId: PublicKey,\n  poolId: PublicKey,\n  userInputAccount: PublicKey,\n  userOutputAccount: PublicKey,\n  inputVault: PublicKey,\n  outputVault: PublicKey,\n  inputTokenProgram: PublicKey,\n  outputTokenProgram: PublicKey,\n  inputMint: PublicKey,\n  outputMint: PublicKey,\n  observationId: PublicKey,\n\n  amountIn: BN,\n  amounOutMin: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"amountIn\"), u64(\"amounOutMin\")]);\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: payer, isSigner: true, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: configId, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\n    { pubkey: inputVault, isSigner: false, isWritable: true },\n    { pubkey: outputVault, isSigner: false, isWritable: true },\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\n    { pubkey: inputMint, isSigner: false, isWritable: false },\n    { pubkey: outputMint, isSigner: false, isWritable: false },\n    { pubkey: observationId, isSigner: false, isWritable: true },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      amountIn,\n      amounOutMin,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.swapBaseInput, ...data]),\n  });\n}\nexport function makeSwapCpmmBaseOutInstruction(\n  programId: PublicKey,\n  payer: PublicKey,\n  authority: PublicKey,\n  configId: PublicKey,\n  poolId: PublicKey,\n  userInputAccount: PublicKey,\n  userOutputAccount: PublicKey,\n  inputVault: PublicKey,\n  outputVault: PublicKey,\n  inputTokenProgram: PublicKey,\n  outputTokenProgram: PublicKey,\n  inputMint: PublicKey,\n  outputMint: PublicKey,\n  observationId: PublicKey,\n\n  amountInMax: BN,\n  amountOut: BN,\n): TransactionInstruction {\n  const dataLayout = struct([u64(\"amountInMax\"), u64(\"amountOut\")]);\n\n  const keys: Array<AccountMeta> = [\n    { pubkey: payer, isSigner: true, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: configId, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\n    { pubkey: inputVault, isSigner: false, isWritable: true },\n    { pubkey: outputVault, isSigner: false, isWritable: true },\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\n    { pubkey: inputMint, isSigner: false, isWritable: false },\n    { pubkey: outputMint, isSigner: false, isWritable: false },\n    { pubkey: observationId, isSigner: false, isWritable: true },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      amountInMax,\n      amountOut,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: Buffer.from([...anchorDataBuf.swapBaseOutput, ...data]),\n  });\n}\n\nexport async function makeCpmmLockInstruction(props: {\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\n  poolKeys: CpmmKeys;\n  ownerInfo: {\n    feePayer: PublicKey;\n    wallet: PublicKey;\n  };\n\n  lockProgram: PublicKey;\n  lockAuthProgram: PublicKey;\n  lpAmount: BN;\n  withMetadata?: boolean;\n  getEphemeralSigners?: (k: number) => any;\n}): Promise<ReturnTypeMakeInstructions<CpmmLockExtInfo>> {\n  const { ownerInfo, poolInfo, poolKeys, getEphemeralSigners } = props;\n\n  const signers: Signer[] = [];\n  const [poolId, lpMint] = [new PublicKey(poolInfo.id), new PublicKey(poolInfo.lpMint.address)];\n\n  let nftMintAccount: PublicKey;\n  if (getEphemeralSigners) {\n    nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\n  } else {\n    const _k = Keypair.generate();\n    signers.push(_k);\n    nftMintAccount = _k.publicKey;\n  }\n\n  const { publicKey: nftAccount } = getATAAddress(ownerInfo.feePayer, nftMintAccount, TOKEN_PROGRAM_ID);\n  const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\n  const { publicKey: lockPda } = getCpLockPda(props.lockProgram, nftMintAccount);\n\n  const { publicKey: userLpVault } = getATAAddress(ownerInfo.feePayer, lpMint, TOKEN_PROGRAM_ID);\n  const { publicKey: lockLpVault } = getATAAddress(props.lockAuthProgram, lpMint, TOKEN_PROGRAM_ID);\n\n  const ins = cpmmLockPositionInstruction({\n    programId: props.lockProgram,\n    auth: props.lockAuthProgram,\n    payer: ownerInfo.feePayer,\n    nftOwner: ownerInfo.feePayer,\n    liquidityOwner: ownerInfo.feePayer,\n    nftMint: nftMintAccount,\n    nftAccount,\n    poolId,\n    lockPda,\n    mintLp: lpMint,\n    userLpVault,\n    lockLpVault,\n    poolVaultA: new PublicKey(poolKeys.vault.A),\n    poolVaultB: new PublicKey(poolKeys.vault.B),\n    metadataAccount,\n    lpAmount: props.lpAmount,\n    withMetadata: props.withMetadata ?? true,\n  });\n\n  return {\n    address: {\n      nftMint: nftMintAccount,\n      nftAccount,\n      metadataAccount,\n      lockPda,\n      userLpVault,\n      lockLpVault,\n    },\n    instructions: [ins],\n    signers,\n    instructionTypes: [InstructionType.CpmmLockLp],\n    lookupTableAddress: [],\n  };\n}\n\nexport function cpmmLockPositionInstruction({\n  programId,\n  auth,\n  payer,\n  liquidityOwner,\n  nftOwner,\n  nftMint,\n  nftAccount,\n  poolId,\n  lockPda,\n  mintLp,\n  userLpVault,\n  lockLpVault,\n  poolVaultA,\n  poolVaultB,\n  metadataAccount,\n  lpAmount,\n  withMetadata,\n}: {\n  programId: PublicKey;\n  auth: PublicKey;\n  payer: PublicKey;\n  liquidityOwner: PublicKey;\n  nftOwner: PublicKey;\n  nftMint: PublicKey;\n  nftAccount: PublicKey;\n  poolId: PublicKey;\n  lockPda: PublicKey;\n  mintLp: PublicKey;\n  userLpVault: PublicKey;\n  lockLpVault: PublicKey;\n  poolVaultA: PublicKey;\n  poolVaultB: PublicKey;\n  metadataAccount: PublicKey;\n  lpAmount: BN;\n  withMetadata: boolean;\n}): TransactionInstruction {\n  const keys = [\n    { pubkey: auth, isSigner: false, isWritable: false },\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: liquidityOwner, isSigner: true, isWritable: false },\n    { pubkey: nftOwner, isSigner: false, isWritable: false },\n    { pubkey: nftMint, isSigner: true, isWritable: true },\n    { pubkey: nftAccount, isSigner: false, isWritable: true },\n    { pubkey: poolId, isSigner: false, isWritable: false },\n    { pubkey: lockPda, isSigner: false, isWritable: true },\n    { pubkey: mintLp, isSigner: false, isWritable: false },\n    { pubkey: userLpVault, isSigner: false, isWritable: true },\n    { pubkey: lockLpVault, isSigner: false, isWritable: true },\n    { pubkey: poolVaultA, isSigner: false, isWritable: true },\n    { pubkey: poolVaultB, isSigner: false, isWritable: true },\n    { pubkey: metadataAccount, isSigner: false, isWritable: true },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n  const dataLayout = struct([u64(\"lpAmount\"), bool(\"withMetadata\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      lpAmount,\n      withMetadata,\n    },\n    data,\n  );\n  const aData = Buffer.from([...anchorDataBuf.lockCpLiquidity, ...data]);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function collectCpFeeInstruction({\n  programId,\n  nftOwner,\n  auth,\n  nftAccount,\n  lockPda,\n  poolId,\n  mintLp,\n  userVaultA,\n  userVaultB,\n  poolVaultA,\n  poolVaultB,\n  mintA,\n  mintB,\n  lockLpVault,\n  lpFeeAmount,\n  cpmmProgram,\n  cpmmAuthProgram,\n}: {\n  programId: PublicKey;\n  nftOwner: PublicKey;\n  auth: PublicKey;\n  nftMint: PublicKey;\n  nftAccount: PublicKey;\n  lockPda: PublicKey;\n  poolId: PublicKey;\n  mintLp: PublicKey;\n  userVaultA: PublicKey;\n  userVaultB: PublicKey;\n  poolVaultA: PublicKey;\n  poolVaultB: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  lockLpVault: PublicKey;\n  lpFeeAmount: BN;\n  cpmmProgram?: PublicKey;\n  cpmmAuthProgram?: PublicKey;\n}): TransactionInstruction {\n  const keys = [\n    { pubkey: auth, isSigner: false, isWritable: false },\n    { pubkey: nftOwner, isSigner: true, isWritable: false },\n    // { pubkey: nftMint, isSigner: false, isWritable: true },\n    { pubkey: nftAccount, isSigner: false, isWritable: true },\n    { pubkey: lockPda, isSigner: false, isWritable: true },\n    { pubkey: cpmmProgram ?? CREATE_CPMM_POOL_PROGRAM, isSigner: false, isWritable: false },\n    { pubkey: cpmmAuthProgram ?? CREATE_CPMM_POOL_AUTH, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: mintLp, isSigner: false, isWritable: true },\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\n    { pubkey: poolVaultA, isSigner: false, isWritable: true },\n    { pubkey: poolVaultB, isSigner: false, isWritable: true },\n    { pubkey: mintA, isSigner: false, isWritable: false },\n    { pubkey: mintB, isSigner: false, isWritable: false },\n    { pubkey: lockLpVault, isSigner: false, isWritable: true },\n    // { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\n  ];\n  const dataLayout = struct([u64(\"lpFeeAmount\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      lpFeeAmount,\n    },\n    data,\n  );\n  const aData = Buffer.from([...anchorDataBuf.collectCpFee, ...data]);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { findProgramAddress } from \"../../common/txTool/txUtils\";\n\nconst AUTH_SEED = Buffer.from(\"vault_and_lp_mint_auth_seed\", \"utf8\");\nconst AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\nconst POOL_SEED = Buffer.from(\"pool\", \"utf8\");\nconst POOL_LP_MINT_SEED = Buffer.from(\"pool_lp_mint\", \"utf8\");\nconst POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\nconst OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\n\nexport function getPdaPoolAuthority(programId: PublicKey): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([AUTH_SEED], programId);\n}\n\nexport function getCpmmPdaAmmConfigId(\n  programId: PublicKey,\n  index: number,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\n}\n\nexport function getCpmmPdaPoolId(\n  programId: PublicKey,\n  ammConfigId: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\n}\n\nexport function getPdaLpMint(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_LP_MINT_SEED, poolId.toBuffer()], programId);\n}\n\nexport function getPdaVault(\n  programId: PublicKey,\n  poolId: PublicKey,\n  mint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), mint.toBuffer()], programId);\n}\n\nexport function getPdaObservationId(\n  programId: PublicKey,\n  poolId: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\n}\n\nfunction u16ToBytes(num: number): Uint8Array {\n  const arr = new ArrayBuffer(2);\n  const view = new DataView(arr);\n  view.setUint16(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function getCreatePoolKeys({\n  poolId: propPoolId,\n  programId,\n  configId,\n  mintA,\n  mintB,\n}: {\n  poolId?: PublicKey;\n  programId: PublicKey;\n  configId: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}): {\n  poolId: PublicKey;\n  configId: PublicKey;\n  authority: PublicKey;\n  lpMint: PublicKey;\n  vaultA: PublicKey;\n  vaultB: PublicKey;\n  observationId: PublicKey;\n} {\n  // const configId = getCpmmPdaAmmConfigId(programId, 0).publicKey;\n  const authority = getPdaPoolAuthority(programId).publicKey;\n  const poolId = propPoolId || getCpmmPdaPoolId(programId, configId, mintA, mintB).publicKey;\n  const lpMint = getPdaLpMint(programId, poolId).publicKey;\n  const vaultA = getPdaVault(programId, poolId, mintA).publicKey;\n  const vaultB = getPdaVault(programId, poolId, mintB).publicKey;\n  const observationId = getPdaObservationId(programId, poolId).publicKey;\n\n  return {\n    poolId,\n    configId,\n    authority,\n    lpMint,\n    vaultA,\n    vaultB,\n    observationId,\n  };\n}\n\nexport const LOCK_LIQUIDITY_SEED = Buffer.from(\"locked_liquidity\", \"utf8\");\n\nexport function getCpLockPda(\n  programId: PublicKey,\n  mint: PublicKey,\n): {\n  publicKey: PublicKey;\n  nonce: number;\n} {\n  return findProgramAddress([LOCK_LIQUIDITY_SEED, mint.toBuffer()], programId);\n}\n","import { blob, bool, publicKey, seq, struct, u16, u64, u8, u128 } from \"../../marshmallow\";\n\nexport const CpmmConfigInfoLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  bool(\"disableCreatePool\"),\n  u16(\"index\"),\n  u64(\"tradeFeeRate\"),\n  u64(\"protocolFeeRate\"),\n  u64(\"fundFeeRate\"),\n  u64(\"createPoolFee\"),\n\n  publicKey(\"protocolOwner\"),\n  publicKey(\"fundOwner\"),\n  seq(u64(), 16),\n]);\n\nexport const CpmmPoolInfoLayout = struct([\n  blob(8),\n\n  publicKey(\"configId\"),\n  publicKey(\"poolCreator\"),\n  publicKey(\"vaultA\"),\n  publicKey(\"vaultB\"),\n\n  publicKey(\"mintLp\"),\n  publicKey(\"mintA\"),\n  publicKey(\"mintB\"),\n\n  publicKey(\"mintProgramA\"),\n  publicKey(\"mintProgramB\"),\n\n  publicKey(\"observationId\"),\n\n  u8(\"bump\"),\n  u8(\"status\"),\n\n  u8(\"lpDecimals\"),\n  u8(\"mintDecimalA\"),\n  u8(\"mintDecimalB\"),\n\n  u64(\"lpAmount\"),\n  u64(\"protocolFeesMintA\"),\n  u64(\"protocolFeesMintB\"),\n  u64(\"fundFeesMintA\"),\n  u64(\"fundFeesMintB\"),\n  u64(\"openTime\"),\n\n  seq(u64(), 32),\n]);\n","import { EpochInfo, PublicKey } from \"@solana/web3.js\";\nimport { createTransferInstruction, TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport { AmmV4Keys, ApiV3Token, ClmmKeys, PoolKeys } from \"@/api\";\nimport {\n  AMM_V4,\n  BigNumberish,\n  CLMM_PROGRAM_ID,\n  CREATE_CPMM_POOL_PROGRAM,\n  fetchMultipleMintInfos,\n  getMultipleAccountsInfoWithCustomFlags,\n  minExpirationTime,\n  parseBigNumberish,\n  solToWSol,\n  WSOLMint,\n} from \"@/common\";\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\nimport { publicKey, struct } from \"../../marshmallow\";\nimport { Price, TokenAmount } from \"../../module\";\nimport { ClmmRpcData, ComputeClmmPoolInfo, PoolUtils, ReturnTypeFetchMultiplePoolTickArrays } from \"../../raydium/clmm\";\nimport { PoolInfoLayout } from \"../../raydium/clmm/layout\";\nimport { CpmmPoolInfoLayout, getPdaPoolAuthority } from \"../../raydium/cpmm\";\nimport {\n  ComputeAmountOutParam,\n  getLiquidityAssociatedAuthority,\n  liquidityStateV4Layout,\n  toAmmComputePoolInfo,\n} from \"../../raydium/liquidity\";\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos } from \"../../raydium/type\";\nimport { closeAccountInstruction, createWSolAccountInstructions } from \"../account/instruction\";\nimport { TokenAccount } from \"../account/types\";\nimport { CpmmComputeData } from \"../cpmm\";\nimport { AmmRpcData } from \"../liquidity\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { Market, MARKET_STATE_LAYOUT_V3 } from \"../serum\";\nimport { toApiV3Token, toToken, toTokenAmount } from \"../token\";\nimport { makeSwapInstruction } from \"./instrument\";\nimport {\n  BasicPoolInfo,\n  ComputeAmountOutAmmLayout,\n  ComputeAmountOutLayout,\n  ComputePoolType,\n  ComputeRoutePathType,\n  ReturnTypeFetchMultipleInfo,\n  ReturnTypeGetAllRoute,\n  RoutePathType,\n} from \"./type\";\n\nconst ZERO = new BN(0);\nexport default class TradeV2 extends ModuleBase {\n  constructor(params: ModuleBaseProps) {\n    super(params);\n  }\n\n  private async getWSolAccounts(): Promise<TokenAccount[]> {\n    this.scope.checkOwner();\n    await this.scope.account.fetchWalletTokenAccounts();\n    const tokenAccounts = this.scope.account.tokenAccounts.filter((acc) => acc.mint.equals(WSOLMint));\n    tokenAccounts.sort((a, b) => {\n      if (a.isAssociated) return 1;\n      if (b.isAssociated) return -1;\n      return a.amount.lt(b.amount) ? -1 : 1;\n    });\n    return tokenAccounts;\n  }\n\n  public async unWrapWSol<T extends TxVersion>(props: {\n    amount: BigNumberish;\n    computeBudgetConfig?: ComputeBudgetConfig;\n    tokenProgram?: PublicKey;\n    txVersion?: T;\n  }): Promise<MakeTxData<T>> {\n    const { amount, tokenProgram, txVersion = TxVersion.LEGACY } = props;\n    const tokenAccounts = await this.getWSolAccounts();\n    const txBuilder = this.createTxBuilder();\n    txBuilder.addCustomComputeBudget(props.computeBudgetConfig);\n    const ins = await createWSolAccountInstructions({\n      connection: this.scope.connection,\n      owner: this.scope.ownerPubKey,\n      payer: this.scope.ownerPubKey,\n      amount: 0,\n    });\n    txBuilder.addInstruction(ins);\n\n    const amountBN = parseBigNumberish(amount);\n    for (let i = 0; i < tokenAccounts.length; i++) {\n      if (amountBN.gte(tokenAccounts[i].amount)) {\n        txBuilder.addInstruction({\n          instructions: [\n            closeAccountInstruction({\n              tokenAccount: tokenAccounts[i].publicKey!,\n              payer: this.scope.ownerPubKey,\n              owner: this.scope.ownerPubKey,\n              programId: tokenProgram,\n            }),\n          ],\n        });\n        amountBN.sub(tokenAccounts[i].amount);\n      } else {\n        txBuilder.addInstruction({\n          instructions: [\n            closeAccountInstruction({\n              tokenAccount: tokenAccounts[i].publicKey!,\n              payer: this.scope.ownerPubKey,\n              owner: this.scope.ownerPubKey,\n              programId: tokenProgram,\n            }),\n          ],\n        });\n      }\n    }\n\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\n  }\n\n  public async wrapWSol<T extends TxVersion>(\n    amount: BigNumberish,\n    tokenProgram?: PublicKey,\n    txVersion?: T,\n  ): Promise<MakeTxData<T>> {\n    // const tokenAccounts = await this.getWSolAccounts();\n\n    const txBuilder = this.createTxBuilder();\n\n    const ins = await createWSolAccountInstructions({\n      connection: this.scope.connection,\n      owner: this.scope.ownerPubKey,\n      payer: this.scope.ownerPubKey,\n      amount,\n      skipCloseAccount: true,\n    });\n    txBuilder.addInstruction(ins);\n\n    // if (tokenAccounts.length) {\n    //   // already have wsol account\n    //   txBuilder.addInstruction({\n    //     instructions: [\n    //       makeTransferInstruction({\n    //         destination: tokenAccounts[0].publicKey!,\n    //         source: ins.addresses.newAccount,\n    //         amount,\n    //         owner: this.scope.ownerPubKey,\n    //         tokenProgram,\n    //       }),\n    //     ],\n    //     endInstructions: [\n    //       closeAccountInstruction({\n    //         tokenAccount: ins.addresses.newAccount,\n    //         payer: this.scope.ownerPubKey,\n    //         owner: this.scope.ownerPubKey,\n    //         programId: tokenProgram,\n    //       }),\n    //     ],\n    //   });\n    // }\n    return txBuilder.versionBuild({ txVersion: txVersion ?? TxVersion.LEGACY }) as Promise<MakeTxData<T>>;\n  }\n\n  public async swap<T extends TxVersion>({\n    swapInfo,\n    swapPoolKeys,\n    ownerInfo,\n    computeBudgetConfig,\n    routeProgram,\n    txVersion,\n  }: {\n    txVersion: T;\n    swapInfo: ComputeAmountOutLayout;\n    swapPoolKeys?: PoolKeys[];\n    ownerInfo: {\n      associatedOnly: boolean;\n      checkCreateATAOwner: boolean;\n    };\n    routeProgram: PublicKey;\n    computeBudgetConfig?: ComputeBudgetConfig;\n  }): Promise<MakeMultiTxData<T>> {\n    const txBuilder = this.createTxBuilder();\n\n    const amountIn = swapInfo.amountIn;\n    const amountOut = swapInfo.amountOut;\n    const useSolBalance = amountIn.amount.token.mint.equals(WSOLMint);\n    const isOutputSol = amountOut.amount.token.mint.equals(WSOLMint);\n    const inputMint = amountIn.amount.token.mint;\n    const outputMint = amountOut.amount.token.mint;\n\n    const { account: sourceAcc, instructionParams: sourceAccInsParams } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: amountIn.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\n        mint: inputMint,\n        notUseTokenAccount: useSolBalance,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: !useSolBalance,\n        createInfo: useSolBalance\n          ? {\n              payer: this.scope.ownerPubKey,\n              amount: amountIn.amount.raw,\n            }\n          : undefined,\n        associatedOnly: useSolBalance ? false : ownerInfo.associatedOnly,\n        checkCreateATAOwner: ownerInfo.checkCreateATAOwner,\n      });\n\n    sourceAccInsParams && txBuilder.addInstruction(sourceAccInsParams);\n\n    if (sourceAcc === undefined) {\n      throw Error(\"input account check error\");\n    }\n\n    let destinationAcc: PublicKey;\n    if (swapInfo.routeType === \"route\" && !isOutputSol) {\n      destinationAcc = this.scope.account.getAssociatedTokenAccount(\n        outputMint,\n        amountOut.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\n      );\n    } else {\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: amountOut.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\n        mint: outputMint,\n        notUseTokenAccount: isOutputSol,\n        owner: this.scope.ownerPubKey,\n        skipCloseAccount: true,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        associatedOnly: isOutputSol ? false : ownerInfo.associatedOnly,\n        checkCreateATAOwner: ownerInfo.checkCreateATAOwner,\n      });\n      destinationAcc = account!;\n      instructionParams && txBuilder.addInstruction(instructionParams);\n    }\n\n    if (isOutputSol) {\n      txBuilder.addInstruction({\n        endInstructions: [\n          closeAccountInstruction({\n            owner: this.scope.ownerPubKey,\n            payer: this.scope.ownerPubKey,\n            tokenAccount: destinationAcc,\n            programId: TOKEN_PROGRAM_ID,\n          }),\n        ],\n        endInstructionTypes: [InstructionType.CloseAccount],\n      });\n    }\n\n    let routeTokenAcc: PublicKey | undefined = undefined;\n    if (swapInfo.routeType === \"route\") {\n      const middleMint = swapInfo.middleToken;\n      routeTokenAcc = this.scope.account.getAssociatedTokenAccount(\n        middleMint.mint,\n        middleMint.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\n      );\n    }\n\n    const poolKeys = swapPoolKeys ? swapPoolKeys : await this.computePoolToPoolKeys({ pools: swapInfo.poolInfoList });\n    const swapIns = makeSwapInstruction({\n      routeProgram,\n      inputMint,\n      swapInfo: {\n        ...swapInfo,\n        poolInfo: [...swapInfo.poolInfoList],\n        poolKey: poolKeys,\n        outputMint,\n      },\n      ownerInfo: {\n        wallet: this.scope.ownerPubKey,\n        sourceToken: sourceAcc,\n        routeToken: routeTokenAcc,\n        destinationToken: destinationAcc!,\n      },\n    });\n\n    if (swapInfo.feeConfig !== undefined) {\n      const checkTxBuilder = this.createTxBuilder();\n      checkTxBuilder.addInstruction({\n        instructions: [\n          createTransferInstruction(\n            sourceAcc,\n            swapInfo.feeConfig.feeAccount,\n            this.scope.ownerPubKey,\n            swapInfo.feeConfig.feeAmount.toNumber(),\n          ),\n        ],\n        instructionTypes: [InstructionType.TransferAmount],\n      });\n      checkTxBuilder.addInstruction(swapIns);\n\n      const { transactions } =\n        txVersion === TxVersion.V0 ? await checkTxBuilder.sizeCheckBuildV0() : await checkTxBuilder.sizeCheckBuild();\n      if (transactions.length < 2) {\n        txBuilder.addInstruction({\n          instructions: [\n            createTransferInstruction(\n              sourceAcc,\n              swapInfo.feeConfig.feeAccount,\n              this.scope.ownerPubKey,\n              swapInfo.feeConfig.feeAmount.toNumber(),\n            ),\n          ],\n          instructionTypes: [InstructionType.TransferAmount],\n        });\n      }\n    }\n    txBuilder.addInstruction(swapIns);\n\n    if (txVersion === TxVersion.V0)\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig, address: swapIns.address }) as Promise<\n        MakeMultiTxData<T>\n      >;\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig, address: swapIns.address }) as Promise<MakeMultiTxData<T>>;\n  }\n\n  // get all amm/clmm/cpmm pools data only with id and mint\n  public async fetchRoutePoolBasicInfo(programIds?: { amm: PublicKey; clmm: PublicKey; cpmm: PublicKey }): Promise<{\n    ammPools: BasicPoolInfo[];\n    clmmPools: BasicPoolInfo[];\n    cpmmPools: BasicPoolInfo[];\n  }> {\n    const { amm = AMM_V4, clmm = CLMM_PROGRAM_ID, cpmm = CREATE_CPMM_POOL_PROGRAM } = programIds || {};\n    const ammPoolsData = await this.scope.connection.getProgramAccounts(amm, {\n      dataSlice: { offset: liquidityStateV4Layout.offsetOf(\"baseMint\"), length: 64 },\n    });\n\n    const layoutAmm = struct([publicKey(\"baseMint\"), publicKey(\"quoteMint\")]);\n    const ammData = ammPoolsData.map((data) => ({\n      id: data.pubkey,\n      version: 4,\n      mintA: layoutAmm.decode(data.account.data).baseMint,\n      mintB: layoutAmm.decode(data.account.data).quoteMint,\n    }));\n\n    const layout = struct([publicKey(\"mintA\"), publicKey(\"mintB\")]);\n    const clmmPoolsData = await this.scope.connection.getProgramAccounts(clmm, {\n      filters: [{ dataSize: PoolInfoLayout.span }],\n      dataSlice: { offset: PoolInfoLayout.offsetOf(\"mintA\"), length: 64 },\n    });\n\n    const clmmData = clmmPoolsData.map((data) => {\n      const clmm = layout.decode(data.account.data);\n      return {\n        id: data.pubkey,\n        version: 6,\n        mintA: clmm.mintA,\n        mintB: clmm.mintB,\n      };\n    });\n\n    const cpmmPools = await this.scope.connection.getProgramAccounts(cpmm, {\n      dataSlice: { offset: CpmmPoolInfoLayout.offsetOf(\"mintA\"), length: 64 },\n    });\n\n    const cpmmData = cpmmPools.map((data) => {\n      const clmm = layout.decode(data.account.data);\n      return {\n        id: data.pubkey,\n        version: 7,\n        mintA: clmm.mintA,\n        mintB: clmm.mintB,\n      };\n    });\n\n    return {\n      clmmPools: clmmData,\n      ammPools: ammData,\n      cpmmPools: cpmmData,\n    };\n  }\n\n  // get pools with in routes\n  public getAllRoute({\n    inputMint,\n    outputMint,\n    clmmPools,\n    ammPools,\n    cpmmPools,\n  }: {\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    clmmPools: BasicPoolInfo[];\n    ammPools: BasicPoolInfo[];\n    cpmmPools: BasicPoolInfo[];\n  }): ReturnTypeGetAllRoute {\n    inputMint = inputMint.toString() === PublicKey.default.toString() ? WSOLMint : inputMint;\n    outputMint = outputMint.toString() === PublicKey.default.toString() ? WSOLMint : outputMint;\n\n    const needSimulate: { [poolKey: string]: BasicPoolInfo } = {};\n    const needTickArray: { [poolKey: string]: BasicPoolInfo } = {};\n    const cpmmPoolList: { [poolKey: string]: BasicPoolInfo } = {};\n\n    const directPath: BasicPoolInfo[] = [];\n\n    const routePathDict: RoutePathType = {}; // {[route mint: string]: {in: [] , out: []}}\n\n    for (const itemClmmPool of clmmPools ?? []) {\n      if (\n        (itemClmmPool.mintA.equals(inputMint) && itemClmmPool.mintB.equals(outputMint)) ||\n        (itemClmmPool.mintA.equals(outputMint) && itemClmmPool.mintB.equals(inputMint))\n      ) {\n        directPath.push(itemClmmPool);\n        needTickArray[itemClmmPool.id.toString()] = itemClmmPool;\n      }\n\n      if (itemClmmPool.mintA.equals(inputMint)) {\n        const t = itemClmmPool.mintB.toString();\n        if (routePathDict[t] === undefined)\n          routePathDict[t] = {\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[t].in.push(itemClmmPool);\n      }\n      if (itemClmmPool.mintB.equals(inputMint)) {\n        const t = itemClmmPool.mintA.toString();\n        if (routePathDict[t] === undefined)\n          routePathDict[t] = {\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[t].in.push(itemClmmPool);\n      }\n      if (itemClmmPool.mintA.equals(outputMint)) {\n        const t = itemClmmPool.mintB.toString();\n        if (routePathDict[t] === undefined)\n          routePathDict[t] = {\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[t].out.push(itemClmmPool);\n      }\n      if (itemClmmPool.mintB.equals(outputMint)) {\n        const t = itemClmmPool.mintA.toString();\n        if (routePathDict[t] === undefined)\n          routePathDict[t] = {\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[t].out.push(itemClmmPool);\n      }\n    }\n\n    const addLiquidityPools: BasicPoolInfo[] = [];\n\n    for (const itemAmmPool of ammPools) {\n      if (\n        (itemAmmPool.mintA.equals(inputMint) && itemAmmPool.mintB.equals(outputMint)) ||\n        (itemAmmPool.mintA.equals(outputMint) && itemAmmPool.mintB.equals(inputMint))\n      ) {\n        directPath.push(itemAmmPool);\n        needSimulate[itemAmmPool.id.toBase58()] = itemAmmPool;\n        addLiquidityPools.push(itemAmmPool);\n      }\n      if (itemAmmPool.mintA.equals(inputMint)) {\n        if (routePathDict[itemAmmPool.mintB.toBase58()] === undefined)\n          routePathDict[itemAmmPool.mintB.toBase58()] = {\n            mintProgram: TOKEN_PROGRAM_ID,\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[itemAmmPool.mintB.toBase58()].in.push(itemAmmPool);\n      }\n      if (itemAmmPool.mintB.equals(inputMint)) {\n        if (routePathDict[itemAmmPool.mintA.toBase58()] === undefined)\n          routePathDict[itemAmmPool.mintA.toBase58()] = {\n            mintProgram: TOKEN_PROGRAM_ID,\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[itemAmmPool.mintA.toBase58()].in.push(itemAmmPool);\n      }\n      if (itemAmmPool.mintA.equals(outputMint)) {\n        if (routePathDict[itemAmmPool.mintB.toBase58()] === undefined)\n          routePathDict[itemAmmPool.mintB.toBase58()] = {\n            mintProgram: TOKEN_PROGRAM_ID,\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[itemAmmPool.mintB.toBase58()].out.push(itemAmmPool);\n      }\n      if (itemAmmPool.mintB.equals(outputMint)) {\n        if (routePathDict[itemAmmPool.mintA.toBase58()] === undefined)\n          routePathDict[itemAmmPool.mintA.toBase58()] = {\n            mintProgram: TOKEN_PROGRAM_ID,\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[itemAmmPool.mintA.toBase58()].out.push(itemAmmPool);\n      }\n    }\n\n    for (const itemCpmmPool of cpmmPools) {\n      if (\n        (itemCpmmPool.mintA.equals(inputMint) && itemCpmmPool.mintB.equals(outputMint)) ||\n        (itemCpmmPool.mintA.equals(outputMint) && itemCpmmPool.mintB.equals(inputMint))\n      ) {\n        directPath.push(itemCpmmPool);\n        cpmmPoolList[itemCpmmPool.id.toBase58()] = itemCpmmPool;\n      }\n      if (itemCpmmPool.mintA.equals(inputMint)) {\n        if (routePathDict[itemCpmmPool.mintB.toBase58()] === undefined)\n          routePathDict[itemCpmmPool.mintB.toBase58()] = {\n            mintProgram: TOKEN_PROGRAM_ID,\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[itemCpmmPool.mintB.toBase58()].in.push(itemCpmmPool);\n      }\n      if (itemCpmmPool.mintB.equals(inputMint)) {\n        if (routePathDict[itemCpmmPool.mintA.toBase58()] === undefined)\n          routePathDict[itemCpmmPool.mintA.toBase58()] = {\n            mintProgram: TOKEN_PROGRAM_ID,\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[itemCpmmPool.mintA.toBase58()].in.push(itemCpmmPool);\n      }\n      if (itemCpmmPool.mintA.equals(outputMint)) {\n        if (routePathDict[itemCpmmPool.mintB.toBase58()] === undefined)\n          routePathDict[itemCpmmPool.mintB.toBase58()] = {\n            mintProgram: TOKEN_PROGRAM_ID,\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[itemCpmmPool.mintB.toBase58()].out.push(itemCpmmPool);\n      }\n      if (itemCpmmPool.mintB.equals(outputMint)) {\n        if (routePathDict[itemCpmmPool.mintA.toBase58()] === undefined)\n          routePathDict[itemCpmmPool.mintA.toBase58()] = {\n            mintProgram: TOKEN_PROGRAM_ID,\n            in: [],\n            out: [],\n            mDecimals: 0, // to fetch later\n          };\n        routePathDict[itemCpmmPool.mintA.toBase58()].out.push(itemCpmmPool);\n      }\n    }\n\n    for (const t of Object.keys(routePathDict)) {\n      if (\n        routePathDict[t].in.length === 1 &&\n        routePathDict[t].out.length === 1 &&\n        routePathDict[t].in[0].id.equals(routePathDict[t].out[0].id)\n      ) {\n        delete routePathDict[t];\n        continue;\n      }\n      if (routePathDict[t].in.length === 0 || routePathDict[t].out.length === 0) {\n        delete routePathDict[t];\n        continue;\n      }\n\n      const info = routePathDict[t];\n\n      for (const infoIn of info.in) {\n        for (const infoOut of info.out) {\n          if (infoIn.version === 6 && needTickArray[infoIn.id.toString()] === undefined) {\n            needTickArray[infoIn.id.toString()] = infoIn;\n          } else if (infoIn.version === 7 && cpmmPoolList[infoIn.id.toString()] === undefined) {\n            cpmmPoolList[infoIn.id.toString()] = infoIn;\n          } else if (\n            (infoIn.version === 4 || infoIn.version === 5) &&\n            needSimulate[infoIn.id.toString()] === undefined\n          ) {\n            needSimulate[infoIn.id.toString()] = infoIn;\n          }\n          if (infoOut.version === 6 && needTickArray[infoOut.id.toString()] === undefined) {\n            needTickArray[infoOut.id.toString()] = infoOut;\n          } else if (infoOut.version === 7 && cpmmPoolList[infoOut.id.toString()] === undefined) {\n            cpmmPoolList[infoOut.id.toString()] = infoOut;\n          } else if (\n            (infoOut.version === 4 || infoOut.version === 5) &&\n            needSimulate[infoOut.id.toString()] === undefined\n          ) {\n            needSimulate[infoOut.id.toString()] = infoOut;\n          }\n        }\n      }\n    }\n\n    return {\n      directPath,\n      addLiquidityPools,\n      routePathDict,\n      needSimulate: Object.values(needSimulate),\n      needTickArray: Object.values(needTickArray),\n      cpmmPoolList: Object.values(cpmmPoolList),\n    };\n  }\n\n  // fetch pools detail info in route\n  public async fetchSwapRoutesData({\n    routes,\n    inputMint,\n    outputMint,\n  }: {\n    inputMint: string | PublicKey;\n    outputMint: string | PublicKey;\n    routes: ReturnTypeGetAllRoute;\n  }): Promise<{\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\n    ammPoolsRpcInfo: Record<string, AmmRpcData>;\n    ammSimulateCache: Record<string, ComputeAmountOutParam[\"poolInfo\"]>;\n    clmmPoolsRpcInfo: Record<string, ClmmRpcData>;\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\n    computeCpmmData: Record<string, CpmmComputeData>;\n    routePathDict: ComputeRoutePathType;\n  }> {\n    const mintSet = new Set([\n      ...routes.needTickArray.map((p) => [p.mintA.toBase58(), p.mintB.toBase58()]).flat(),\n      inputMint.toString(),\n      outputMint.toString(),\n    ]);\n\n    console.log(\"fetching amm pools info, total: \", routes.needSimulate.length);\n    const ammPoolsRpcInfo = await this.scope.liquidity.getRpcPoolInfos(routes.needSimulate.map((p) => p.id));\n    const ammSimulateCache = toAmmComputePoolInfo(ammPoolsRpcInfo);\n\n    let mintInfos: ReturnTypeFetchMultipleMintInfos = {};\n    // amm doesn't support token2022 yet, so don't need to fetch mint info\n    Object.values(ammSimulateCache).forEach((p) => {\n      mintSet.delete(p.mintA.address);\n      mintInfos[p.mintA.address] = {\n        address: new PublicKey(p.mintA.address),\n        programId: TOKEN_PROGRAM_ID,\n        mintAuthority: null,\n        supply: BigInt(0),\n        decimals: p.mintA.decimals,\n        isInitialized: true,\n        freezeAuthority: null,\n        tlvData: Buffer.from(\"0\", \"hex\"),\n        feeConfig: undefined,\n      };\n\n      mintSet.delete(p.mintB.address);\n      mintInfos[p.mintB.address] = {\n        address: new PublicKey(p.mintB.address),\n        programId: TOKEN_PROGRAM_ID,\n        mintAuthority: null,\n        supply: BigInt(0),\n        decimals: p.mintB.decimals,\n        isInitialized: true,\n        freezeAuthority: null,\n        tlvData: Buffer.from(\"0\", \"hex\"),\n        feeConfig: undefined,\n      };\n    });\n\n    console.log(\"fetching cpmm pools info, total: \", routes.cpmmPoolList.length);\n    const cpmmPoolsRpcInfo = await this.scope.cpmm.getRpcPoolInfos(\n      routes.cpmmPoolList.map((p) => p.id.toBase58()),\n      true,\n    );\n\n    Object.values(cpmmPoolsRpcInfo).forEach((p) => {\n      const [mintA, mintB] = [p.mintA.toBase58(), p.mintB.toBase58()];\n      if (p.mintProgramA.equals(TOKEN_PROGRAM_ID)) {\n        mintSet.delete(mintA);\n        mintInfos[mintA] = {\n          address: p.mintA,\n          programId: p.mintProgramA,\n          mintAuthority: null,\n          supply: BigInt(0),\n          decimals: p.mintDecimalA,\n          isInitialized: true,\n          freezeAuthority: null,\n          tlvData: Buffer.from(\"0\", \"hex\"),\n          feeConfig: undefined,\n        };\n      } else mintSet.add(mintA); // 2022, need to fetch fee config\n      if (p.mintProgramB.equals(TOKEN_PROGRAM_ID)) {\n        mintSet.delete(mintB);\n        mintInfos[mintB] = {\n          address: p.mintB,\n          programId: p.mintProgramB,\n          mintAuthority: null,\n          supply: BigInt(0),\n          decimals: p.mintDecimalB,\n          isInitialized: true,\n          freezeAuthority: null,\n          tlvData: Buffer.from(\"0\", \"hex\"),\n          feeConfig: undefined,\n        };\n      } else mintSet.add(mintB); // 2022, need to fetch fee config\n    });\n\n    console.log(\"fetching mints info, total: \", mintSet.size);\n    const fetchMintInfoRes = await fetchMultipleMintInfos({\n      connection: this.scope.connection,\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\n    });\n\n    mintInfos = {\n      ...mintInfos,\n      ...fetchMintInfoRes,\n    };\n\n    const computeCpmmData = this.scope.cpmm.toComputePoolInfos({\n      pools: cpmmPoolsRpcInfo,\n      mintInfos,\n    });\n\n    console.log(\"fetching clmm pools info, total:\", routes.needTickArray.length);\n    const clmmPoolsRpcInfo = await this.scope.clmm.getRpcClmmPoolInfos({\n      poolIds: routes.needTickArray.map((p) => p.id),\n    });\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\n      clmmPoolsRpcInfo,\n      mintInfos,\n    });\n\n    // update route pool mint info\n    const routePathDict = Object.keys(routes.routePathDict).reduce((acc, cur) => {\n      return {\n        ...acc,\n        [cur]: {\n          ...routes.routePathDict[cur],\n          mintProgram: mintInfos[cur].programId,\n          mDecimals: mintInfos[cur].decimals,\n          in: routes.routePathDict[cur].in.map(\n            (p) =>\n              ammSimulateCache[p.id.toBase58()] ||\n              computeClmmPoolInfo[p.id.toBase58()] ||\n              computeCpmmData[p.id.toBase58()],\n          ),\n          out: routes.routePathDict[cur].out.map(\n            (p) =>\n              ammSimulateCache[p.id.toBase58()] ||\n              computeClmmPoolInfo[p.id.toBase58()] ||\n              computeCpmmData[p.id.toBase58()],\n          ),\n        },\n      };\n    }, {} as ComputeRoutePathType);\n\n    return {\n      mintInfos,\n\n      ammPoolsRpcInfo,\n      ammSimulateCache,\n\n      clmmPoolsRpcInfo,\n      computeClmmPoolInfo,\n      computePoolTickData,\n\n      computeCpmmData,\n\n      routePathDict,\n    };\n  }\n\n  // compute amount from routes\n  public getAllRouteComputeAmountOut({\n    inputTokenAmount,\n    outputToken: propOutputToken,\n    directPath,\n    routePathDict,\n    simulateCache,\n    tickCache,\n    slippage,\n    chainTime,\n    epochInfo,\n    feeConfig,\n  }: {\n    directPath: ComputePoolType[];\n    routePathDict: ComputeRoutePathType;\n    simulateCache: ReturnTypeFetchMultipleInfo;\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays;\n\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\n\n    inputTokenAmount: TokenAmount;\n    outputToken: ApiV3Token;\n    slippage: number;\n    chainTime: number;\n    epochInfo: EpochInfo;\n\n    feeConfig?: {\n      feeBps: BN;\n      feeAccount: PublicKey;\n    };\n  }): ComputeAmountOutLayout[] {\n    const _amountInFee =\n      feeConfig === undefined\n        ? new BN(0)\n        : inputTokenAmount.raw.mul(new BN(feeConfig.feeBps.toNumber())).div(new BN(10000));\n    const _amoutIn = inputTokenAmount.raw.sub(_amountInFee);\n    const amountIn = new TokenAmount(inputTokenAmount.token, _amoutIn);\n    const _inFeeConfig =\n      feeConfig === undefined\n        ? undefined\n        : {\n            feeAmount: _amountInFee,\n            feeAccount: feeConfig.feeAccount,\n          };\n    const outputToken = {\n      ...propOutputToken,\n      address: solToWSol(propOutputToken.address).toString(),\n    };\n    const outRoute: ComputeAmountOutLayout[] = [];\n    for (const itemPool of directPath) {\n      try {\n        outRoute.push({\n          ...this.computeAmountOut({\n            itemPool,\n            tickCache,\n            simulateCache,\n            chainTime,\n            epochInfo,\n            slippage,\n            outputToken,\n            amountIn,\n          }),\n          feeConfig: _inFeeConfig,\n        });\n      } catch (e: any) {\n        this.logDebug(\"direct error\", itemPool.version, itemPool.id.toString(), e.message);\n        /* empty */\n      }\n    }\n    this.logDebug(\"direct done\");\n    for (const [routeMint, info] of Object.entries(routePathDict)) {\n      // const routeToken = new Token(info.mintProgram, routeMint, info.mDecimals);\n      const routeToken = {\n        chainId: 101,\n        address: routeMint,\n        programId: info.mintProgram.toBase58(),\n        logoURI: \"\",\n        symbol: \"\",\n        name: \"\",\n        decimals: info.mDecimals,\n        tags: [],\n        extensions: {},\n      };\n      const maxFirstIn = info.in\n        .map((i) => {\n          try {\n            return {\n              pool: i,\n              data: this.computeAmountOut({\n                itemPool: i,\n                tickCache,\n                simulateCache,\n                chainTime,\n                epochInfo,\n                slippage,\n                outputToken: routeToken,\n                amountIn,\n              }),\n            };\n          } catch (e: any) {\n            this.logDebug(\"route in error\", i.version, i.id.toString(), e.message);\n            return undefined;\n          }\n        })\n        .sort((_a, _b) => {\n          const a = _a === undefined ? ZERO : _a.data.amountOut.amount.raw.sub(_a.data.amountOut.fee?.raw ?? ZERO);\n          const b = _b === undefined ? ZERO : _b.data.amountOut.amount.raw.sub(_b.data.amountOut.fee?.raw ?? ZERO);\n          return a.lt(b) ? 1 : -1;\n        })[0];\n      if (maxFirstIn === undefined) continue;\n      const routeAmountIn = new TokenAmount(\n        toToken(routeToken),\n        maxFirstIn.data.amountOut.amount.raw.sub(maxFirstIn.data.amountOut.fee?.raw ?? ZERO),\n      );\n      for (const iOutPool of info.out) {\n        try {\n          const outC = this.computeAmountOut({\n            itemPool: iOutPool,\n            tickCache,\n            simulateCache,\n            chainTime,\n            epochInfo,\n            slippage,\n            outputToken,\n            amountIn: routeAmountIn,\n          });\n          outRoute.push({\n            ...outC,\n            allTrade: maxFirstIn.data.allTrade && outC.allTrade ? true : false,\n            amountIn: maxFirstIn.data.amountIn,\n            amountOut: outC.amountOut,\n            minAmountOut: outC.minAmountOut,\n            currentPrice: undefined,\n            executionPrice: new Decimal(\n              new Price({\n                baseToken: maxFirstIn.data.amountIn.amount.token,\n                denominator: maxFirstIn.data.amountIn.amount.raw,\n                quoteToken: outC.amountOut.amount.token,\n                numerator: outC.amountOut.amount.raw.sub(outC.amountOut.fee?.raw ?? ZERO),\n              }).toFixed(),\n            ),\n            priceImpact: new Decimal(maxFirstIn.data.priceImpact.add(outC.priceImpact).toFixed()),\n            fee: [maxFirstIn.data.fee[0], outC.fee[0]],\n            routeType: \"route\",\n            poolInfoList: [maxFirstIn.pool, iOutPool],\n            remainingAccounts: [maxFirstIn.data.remainingAccounts[0], outC.remainingAccounts[0]],\n            minMiddleAmountFee: outC.amountOut.fee?.raw\n              ? new TokenAmount(\n                  (maxFirstIn.data.amountOut.amount as TokenAmount).token,\n                  (maxFirstIn.data.amountOut.fee?.raw ?? ZERO).add(outC.amountOut.fee?.raw ?? ZERO),\n                )\n              : undefined,\n            middleToken: (maxFirstIn.data.amountOut.amount as TokenAmount).token,\n            poolReady: maxFirstIn.data.poolReady && outC.poolReady,\n            poolType: [maxFirstIn.data.poolType, outC.poolType],\n            feeConfig: _inFeeConfig,\n            expirationTime: minExpirationTime(maxFirstIn.data.expirationTime, outC.expirationTime),\n          });\n        } catch (e: any) {\n          this.logDebug(\"route out error\", iOutPool.version, iOutPool.id.toString(), e.message);\n          /* empty */\n        }\n      }\n    }\n\n    return outRoute\n      .filter((i) => {\n        if (!i.allTrade)\n          this.logDebug(`pool ${i.poolInfoList.map((p) => p.id.toString()).join(\",\")} filter out since not all trade`);\n        return i.allTrade;\n      })\n      .sort((a, b) => (a.amountOut.amount.raw.sub(b.amountOut.amount.raw).gt(ZERO) ? -1 : 1));\n  }\n\n  /** trade related utils */\n\n  private computeAmountOut({\n    itemPool,\n    tickCache,\n    simulateCache,\n    chainTime,\n    epochInfo,\n    slippage,\n    outputToken,\n    amountIn,\n  }: {\n    itemPool: ComputePoolType;\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays;\n    simulateCache: ReturnTypeFetchMultipleInfo;\n    chainTime: number;\n    epochInfo: EpochInfo;\n    amountIn: TokenAmount;\n    outputToken: ApiV3Token;\n    slippage: number;\n  }): ComputeAmountOutAmmLayout {\n    if (itemPool.version === 6) {\n      const {\n        allTrade,\n        realAmountIn,\n        amountOut,\n        minAmountOut,\n        expirationTime,\n        currentPrice,\n        executionPrice,\n        priceImpact,\n        fee,\n        remainingAccounts,\n        executionPriceX64,\n      } = PoolUtils.computeAmountOutFormat({\n        poolInfo: itemPool,\n        tickArrayCache: tickCache[itemPool.id.toString()],\n        amountIn: amountIn.raw,\n        tokenOut: outputToken,\n        slippage,\n        epochInfo,\n        catchLiquidityInsufficient: true,\n      });\n      return {\n        allTrade,\n        amountIn: realAmountIn,\n        amountOut,\n        minAmountOut,\n        currentPrice: new Decimal(currentPrice.toFixed()),\n        executionPrice: new Decimal(executionPrice.toFixed()),\n        priceImpact: new Decimal(priceImpact.toFixed()),\n        fee: [fee],\n        remainingAccounts: [remainingAccounts],\n        routeType: \"amm\",\n        poolInfoList: [itemPool],\n        poolReady: itemPool.startTime < chainTime,\n        poolType: \"CLMM\",\n        slippage,\n        clmmExPriceX64: [executionPriceX64],\n        expirationTime: minExpirationTime(realAmountIn.expirationTime, expirationTime),\n      };\n    } else if (itemPool.version === 7) {\n      const { allTrade, executionPrice, amountOut, minAmountOut, priceImpact, fee } = this.scope.cpmm.computeSwapAmount(\n        {\n          pool: itemPool,\n          outputMint: outputToken.address,\n          amountIn: amountIn.raw,\n          slippage,\n        },\n      );\n\n      return {\n        allTrade,\n        amountIn: { amount: amountIn, fee: undefined, expirationTime: undefined },\n        amountOut: {\n          amount: toTokenAmount({\n            ...outputToken,\n            amount: amountOut,\n          }),\n          fee: undefined,\n          expirationTime: undefined,\n        },\n        minAmountOut: {\n          amount: toTokenAmount({\n            ...outputToken,\n            amount: minAmountOut,\n          }),\n          fee: undefined,\n          expirationTime: undefined,\n        },\n        currentPrice: itemPool.poolPrice,\n        executionPrice,\n        priceImpact,\n        fee: [new TokenAmount(amountIn.token, fee)],\n        remainingAccounts: [],\n        routeType: \"amm\",\n        poolInfoList: [itemPool],\n        poolReady: itemPool.openTime.toNumber() < chainTime,\n        poolType: \"CPMM\",\n        slippage,\n        clmmExPriceX64: [undefined],\n        expirationTime: undefined,\n      };\n    } else {\n      if (![1, 6, 7].includes(simulateCache[itemPool.id.toString()].status)) throw Error(\"swap error\");\n      const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee } =\n        this.scope.liquidity.computeAmountOut({\n          poolInfo: simulateCache[itemPool.id.toString()],\n          amountIn: amountIn.raw,\n          mintIn: amountIn.token.mint,\n          mintOut: outputToken.address,\n          slippage,\n        });\n      return {\n        amountIn: { amount: amountIn, fee: undefined, expirationTime: undefined },\n        amountOut: {\n          amount: toTokenAmount({\n            ...outputToken,\n            amount: amountOut,\n          }),\n          fee: undefined,\n          expirationTime: undefined,\n        },\n        minAmountOut: {\n          amount: toTokenAmount({\n            ...outputToken,\n            amount: minAmountOut,\n          }),\n          fee: undefined,\n          expirationTime: undefined,\n        },\n        currentPrice,\n        executionPrice,\n        priceImpact,\n        fee: [new TokenAmount(amountIn.token, fee)],\n        routeType: \"amm\",\n        poolInfoList: [itemPool],\n        remainingAccounts: [],\n        poolReady: Number(simulateCache[itemPool.id as string].openTime) < chainTime,\n        poolType: itemPool.version === 5 ? \"STABLE\" : undefined,\n        expirationTime: undefined,\n        allTrade: true,\n        slippage,\n        clmmExPriceX64: [undefined],\n      };\n    }\n  }\n\n  public async computePoolToPoolKeys({\n    pools,\n    clmmRpcData = {},\n    ammRpcData = {},\n  }: {\n    pools: ComputePoolType[];\n    clmmRpcData?: Record<string, ClmmRpcData>;\n    ammRpcData?: Record<string, AmmRpcData>;\n  }): Promise<PoolKeys[]> {\n    const clmmFetchKeys = new Set(\n      pools.filter((p) => p.version === 6 && !clmmRpcData[p.id.toString()]).map((p) => p.id.toString()),\n    );\n    if (clmmFetchKeys.size > 0) {\n      const clmmData = await this.scope.clmm.getRpcClmmPoolInfos({ poolIds: Array.from(clmmFetchKeys) });\n      Object.keys(clmmData).forEach((poolId) => {\n        clmmRpcData[poolId] = clmmData[poolId];\n      });\n    }\n\n    const ammFetchKeys = new Set(\n      pools.filter((p) => p.version === 4 && !ammRpcData[p.id.toString()]).map((p) => p.id.toString()),\n    );\n    if (ammFetchKeys.size > 0) {\n      const ammData = await this.scope.liquidity.getRpcPoolInfos(Array.from(clmmFetchKeys));\n      Object.keys(ammData).forEach((poolId) => {\n        ammRpcData[poolId] = ammData[poolId];\n      });\n    }\n\n    const ammMarketFetchKeys = new Set(\n      pools.filter((p) => p.version === 4).map((p) => (p as ComputeAmountOutParam[\"poolInfo\"]).marketId),\n    );\n    const marketData: Record<\n      string,\n      {\n        marketProgramId: string;\n        marketId: string;\n        marketAuthority: string;\n        marketBaseVault: string;\n        marketQuoteVault: string;\n        marketBids: string;\n        marketAsks: string;\n        marketEventQueue: string;\n      }\n    > = {};\n    if (ammMarketFetchKeys.size > 0) {\n      const marketAccount = await getMultipleAccountsInfoWithCustomFlags(\n        this.scope.connection,\n        Array.from(ammMarketFetchKeys).map((p) => ({ pubkey: new PublicKey(p) })),\n      );\n      marketAccount.forEach((m) => {\n        if (!m.accountInfo) return;\n        const itemMarketInfo = MARKET_STATE_LAYOUT_V3.decode(m.accountInfo.data);\n        marketData[m.pubkey.toBase58()] = {\n          marketId: m.pubkey.toString(),\n          marketProgramId: m.accountInfo.owner.toString(),\n          marketAuthority: Market.getAssociatedAuthority({\n            programId: m.accountInfo.owner,\n            marketId: m.pubkey,\n          }).publicKey.toString(),\n          marketBaseVault: itemMarketInfo.baseVault.toString(),\n          marketQuoteVault: itemMarketInfo.quoteVault.toString(),\n          marketBids: itemMarketInfo.bids.toString(),\n          marketAsks: itemMarketInfo.asks.toString(),\n          marketEventQueue: itemMarketInfo.eventQueue.toString(),\n        };\n      });\n    }\n\n    const poolKeys: PoolKeys[] = [];\n    pools.forEach((pool) => {\n      if (pool.version === 6) {\n        const rpcInfo = clmmRpcData[pool.id.toString()];\n        const clmmKeys: ClmmKeys = {\n          programId: pool.programId.toBase58(),\n          id: pool.id.toBase58(),\n          mintA: pool.mintA,\n          mintB: pool.mintB,\n          openTime: String(pool.startTime),\n          vault: {\n            A: rpcInfo.vaultA.toBase58(),\n            B: rpcInfo.vaultB.toBase58(),\n          },\n          config: {\n            ...pool.ammConfig,\n            id: pool.ammConfig.id.toString(),\n            defaultRange: 0,\n            defaultRangePoint: [],\n          },\n          rewardInfos: [],\n          observationId: pool.observationId.toBase58(),\n          exBitmapAccount: pool.exBitmapAccount.toBase58(),\n        };\n        poolKeys.push(clmmKeys);\n      } else if (pool.version === 4) {\n        const rpcInfo = ammRpcData[pool.id.toString()];\n        const ammKeys: AmmV4Keys = {\n          programId: pool.programId,\n          id: pool.id,\n          mintA: pool.mintA,\n          mintB: pool.mintB,\n          openTime: String(pool.openTime),\n          vault: {\n            A: rpcInfo.baseVault.toBase58(),\n            B: rpcInfo.quoteVault.toBase58(),\n          },\n          authority: getLiquidityAssociatedAuthority({ programId: new PublicKey(pool.programId) }).publicKey.toString(),\n          openOrders: rpcInfo.openOrders.toBase58(),\n          targetOrders: rpcInfo.targetOrders.toBase58(),\n          mintLp: pool.lpMint,\n          ...marketData[pool.marketId],\n        };\n        poolKeys.push(ammKeys);\n      } else if (pool.version === 7) {\n        poolKeys.push({\n          observationId: pool.observationId.toBase58(),\n          programId: pool.programId.toBase58(),\n          id: pool.id.toBase58(),\n          mintA: pool.mintA,\n          mintB: pool.mintB,\n          openTime: String(pool.openTime),\n          authority: getPdaPoolAuthority(pool.programId).publicKey.toBase58(),\n          vault: {\n            A: pool.vaultA.toBase58(),\n            B: pool.vaultB.toBase58(),\n          },\n          mintLp: toApiV3Token({\n            address: pool.mintLp.toBase58(),\n            programId: TOKEN_PROGRAM_ID.toBase58(),\n            decimals: pool.lpDecimals,\n          }),\n          config: {\n            id: pool.configId.toBase58(),\n            ...pool.configInfo,\n            protocolFeeRate: pool.configInfo.protocolFeeRate.toNumber(),\n            tradeFeeRate: pool.configInfo.tradeFeeRate.toNumber(),\n            fundFeeRate: pool.configInfo.fundFeeRate.toNumber(),\n            createPoolFee: pool.configInfo.createPoolFee.toString(),\n          },\n        });\n      }\n    });\n    return poolKeys;\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { SERUM_PROGRAM_ID_V3 } from \"../../common/programId\";\nimport { SerumVersion } from \"./type\";\n\n// serum program id string => serum version\nexport const SERUM_PROGRAMID_TO_VERSION: {\n  [key: string]: SerumVersion;\n} = {\n  [SERUM_PROGRAM_ID_V3.toBase58()]: 3,\n};\n\n// serum version => serum program id\nexport const SERUM_VERSION_TO_PROGRAMID: { [key in SerumVersion]?: PublicKey } & {\n  [K: number]: PublicKey;\n} = {\n  3: SERUM_PROGRAM_ID_V3,\n};\n","import { blob, GetStructureSchema, publicKey, struct, u64 } from \"../../marshmallow\";\n\n/* ================= state layouts ================= */\nexport const MARKET_STATE_LAYOUT_V3 = struct([\n  blob(5),\n\n  blob(8), // accountFlagsLayout('accountFlags'),\n\n  publicKey(\"ownAddress\"),\n\n  u64(\"vaultSignerNonce\"),\n\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n\n  publicKey(\"baseVault\"),\n  u64(\"baseDepositsTotal\"),\n  u64(\"baseFeesAccrued\"),\n\n  publicKey(\"quoteVault\"),\n  u64(\"quoteDepositsTotal\"),\n  u64(\"quoteFeesAccrued\"),\n\n  u64(\"quoteDustThreshold\"),\n\n  publicKey(\"requestQueue\"),\n  publicKey(\"eventQueue\"),\n\n  publicKey(\"bids\"),\n  publicKey(\"asks\"),\n\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n\n  u64(\"feeRateBps\"),\n\n  u64(\"referrerRebatesAccrued\"),\n\n  blob(7),\n]);\n\nexport type MarketStateLayoutV3 = typeof MARKET_STATE_LAYOUT_V3;\nexport type MarketStateLayout = MarketStateLayoutV3;\n\nexport type MarketStateV3 = GetStructureSchema<MarketStateLayoutV3>;\nexport type MarketState = MarketStateV3;\n\n/* ================= index ================= */\n// version => market state layout\nexport const MARKET_VERSION_TO_STATE_LAYOUT: {\n  [version: number]: MarketStateLayout;\n} = {\n  3: MARKET_STATE_LAYOUT_V3,\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { createLogger } from \"../../common/logger\";\n\nimport { SERUM_PROGRAMID_TO_VERSION, SERUM_VERSION_TO_PROGRAMID } from \"./id\";\nimport { MARKET_VERSION_TO_STATE_LAYOUT, MarketStateLayout } from \"./layout\";\n\nconst logger = createLogger(\"Serum\");\n\nexport class Market {\n  /* ================= get version and program id ================= */\n  static getProgramId(version: number): PublicKey {\n    const programId = SERUM_VERSION_TO_PROGRAMID[version];\n    if (!programId) logger.logWithError(\"invalid version\", \"version\", version);\n\n    return programId;\n  }\n\n  static getVersion(programId: PublicKey): number {\n    const programIdString = programId.toBase58();\n\n    const version = SERUM_PROGRAMID_TO_VERSION[programIdString];\n    if (!version) logger.logWithError(\"invalid program id\", \"programId\", programIdString);\n\n    return version;\n  }\n\n  /* ================= get layout ================= */\n  static getStateLayout(version: number): MarketStateLayout {\n    const STATE_LAYOUT = MARKET_VERSION_TO_STATE_LAYOUT[version];\n    if (!STATE_LAYOUT) logger.logWithError(!!STATE_LAYOUT, \"invalid version\", \"version\", version);\n\n    return STATE_LAYOUT;\n  }\n\n  static getLayouts(version: number): { state: MarketStateLayout } {\n    return { state: this.getStateLayout(version) };\n  }\n\n  /* ================= get key ================= */\n  static getAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\n    publicKey: PublicKey;\n    nonce: number;\n  } {\n    const seeds = [marketId.toBuffer()];\n\n    let nonce = 0;\n    let publicKey: PublicKey;\n\n    while (nonce < 100) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\n        publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce++;\n        continue;\n      }\n      return { publicKey, nonce };\n    }\n\n    logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\n      programId,\n      marketId,\n    });\n\n    return { publicKey: PublicKey.default, nonce };\n  }\n}\n","import { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nimport {\n  InstructionType,\n  LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL,\n  MEMO_PROGRAM_ID2,\n  accountMeta,\n  jsonInfo2PoolKeys,\n  getATAAddress,\n  ALL_PROGRAM_ID,\n} from \"@/common\";\nimport { seq, struct, u128, u64, u8 } from \"../../marshmallow\";\nimport {\n  ClmmInstrument,\n  MAX_SQRT_PRICE_X64,\n  MAX_SQRT_PRICE_X64_SUB_ONE,\n  MIN_SQRT_PRICE_X64,\n  MIN_SQRT_PRICE_X64_ADD_ONE,\n  ONE,\n  getPdaExBitmapAccount,\n  getPdaObservationAccount,\n  getPdaPoolId,\n} from \"../clmm\";\nimport { makeAMMSwapInstruction } from \"../liquidity/instruction\";\n\nimport { AmmV4Keys, AmmV5Keys, ApiV3PoolInfoItem, ClmmKeys, CpmmKeys, PoolKeys } from \"../../api/type\";\nimport { getPdaObservationId, makeSwapCpmmBaseInInstruction } from \"../../raydium/cpmm\";\nimport { ComputePoolType, MakeSwapInstructionParam, ReturnTypeMakeSwapInstruction } from \"./type\";\nexport function route1Instruction(\n  programId: PublicKey,\n  poolInfoA: ApiV3PoolInfoItem,\n  poolKeyA: PoolKeys,\n  poolKeyB: PoolKeys,\n\n  userSourceToken: PublicKey,\n  userRouteToken: PublicKey,\n  // userDestinationToken: PublicKey,\n  userPdaAccount: PublicKey,\n  ownerWallet: PublicKey,\n\n  inputMint: PublicKey,\n\n  amountIn: BN,\n  amountOut: BN,\n\n  tickArrayA?: PublicKey[],\n  // tickArrayB?: PublicKey[],\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"amountOut\")]);\n\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(poolKeyA.programId), isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(poolKeyA.id), isSigner: false, isWritable: true },\n    { pubkey: new PublicKey(poolKeyB.id), isSigner: false, isWritable: true },\n\n    { pubkey: userSourceToken, isSigner: false, isWritable: true },\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\n  ];\n\n  if (poolInfoA.type === \"Concentrated\") {\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as ClmmKeys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        {\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.A : poolKey.vault.B,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.B : poolKey.vault.A,\n          isSigner: false,\n          isWritable: true,\n        },\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        ...tickArrayA!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n      ],\n    );\n  } else if (poolInfoA.pooltype.includes(\"StablePool\")) {\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV5Keys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      ],\n    );\n  } else {\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV4Keys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\n          ? [\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\n            ]\n          : [\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\n            ]),\n      ],\n    );\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 4,\n      amountIn,\n      amountOut,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nexport function route2Instruction(\n  programId: PublicKey,\n  poolInfoB: ApiV3PoolInfoItem,\n  poolKeyA: PoolKeys,\n  poolKeyB: PoolKeys,\n\n  // userSourceToken: PublicKey,\n  userRouteToken: PublicKey,\n  userDestinationToken: PublicKey,\n  userPdaAccount: PublicKey,\n  ownerWallet: PublicKey,\n\n  routeMint: PublicKey,\n\n  // tickArrayA?: PublicKey[],\n  tickArrayB?: PublicKey[],\n): TransactionInstruction {\n  const dataLayout = struct([u8(\"instruction\")]);\n\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(String(poolKeyB.programId)), isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(String(poolKeyB.id)), isSigner: false, isWritable: true },\n    { pubkey: new PublicKey(String(poolKeyA.id)), isSigner: false, isWritable: true },\n\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\n    { pubkey: userDestinationToken, isSigner: false, isWritable: true },\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\n  ];\n\n  if (poolInfoB.type === \"Concentrated\") {\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as ClmmKeys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        {\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.A : poolKey.vault.B,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.B : poolKey.vault.A,\n          isSigner: false,\n          isWritable: true,\n        },\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        ...tickArrayB!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n      ],\n    );\n  } else if (poolInfoB.pooltype.includes(\"StablePool\")) {\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV5Keys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      ],\n    );\n  } else {\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV4Keys);\n    keys.push(\n      ...[\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\n          ? [\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\n            ]\n          : [\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\n            ]),\n      ],\n    );\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 5,\n    },\n    data,\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\n/*\nfunction makeInnerInsKey(\n  itemPool: ComputePoolType,\n  itemPoolKey: PoolKeys,\n  inMint: string,\n  userInAccount: PublicKey,\n  userOutAccount: PublicKey,\n  remainingAccount: PublicKey[] | undefined,\n): accountMeta[] {\n  if (itemPool.version === 4) {\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV4Keys);\n\n    return [\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\n\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: true },\n\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n      ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\n        ? [\n            { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\n            { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\n          ]\n        : [\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\n          ]),\n    ];\n  } else if (itemPool.version === 5) {\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV4Keys);\n\n    return [\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\n\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n    ];\n  } else if (itemPool.version === 6) {\n    const pool = itemPool;\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as ClmmKeys);\n    const baseIn = pool.mintA.address === inMint;\n    return [\n      { pubkey: new PublicKey(String(itemPool.programId)), isSigner: false, isWritable: false },\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\n      { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: baseIn ? poolKey.vault.A : poolKey.vault.B, isSigner: false, isWritable: true },\n      { pubkey: baseIn ? poolKey.vault.B : poolKey.vault.A, isSigner: false, isWritable: true },\n      { pubkey: itemPool.observationId, isSigner: false, isWritable: true },\n      ...(poolKey.mintA.programId.equals(TOKEN_2022_PROGRAM_ID) || poolKey.mintB.programId.equals(TOKEN_2022_PROGRAM_ID)\n        ? [\n            { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: baseIn ? poolKey.mintA.address : poolKey.mintB.address, isSigner: false, isWritable: false },\n            { pubkey: baseIn ? poolKey.mintB.address : poolKey.mintA.address, isSigner: false, isWritable: false },\n          ]\n        : []),\n      ...(remainingAccount ?? []).map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n      {\n        pubkey: getPdaExBitmapAccount(new PublicKey(String(itemPool.programId)), new PublicKey(itemPool.id)).publicKey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n  } else if (itemPool.version === 7) {\n    const pool = itemPool;\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as CpmmKeys);\n    const baseIn = pool.mintA.address === inMint;\n    return [\n      { pubkey: new PublicKey(String(itemPool.programId)), isSigner: false, isWritable: false },\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\n      { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: baseIn ? poolKey.vault.A : poolKey.vault.B, isSigner: false, isWritable: true },\n      { pubkey: baseIn ? poolKey.vault.B : poolKey.vault.A, isSigner: false, isWritable: true },\n      { pubkey: itemPool.observationId, isSigner: false, isWritable: true },\n      ...(poolKey.mintA.programId.equals(TOKEN_2022_PROGRAM_ID) || poolKey.mintB.programId.equals(TOKEN_2022_PROGRAM_ID)\n        ? [\n            { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: baseIn ? poolKey.mintA.address : poolKey.mintB.address, isSigner: false, isWritable: false },\n            { pubkey: baseIn ? poolKey.mintB.address : poolKey.mintA.address, isSigner: false, isWritable: false },\n          ]\n        : []),\n      ...(remainingAccount ?? []).map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n      {\n        pubkey: getPdaExBitmapAccount(new PublicKey(String(itemPool.programId)), new PublicKey(itemPool.id)).publicKey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n  } else {\n    throw Error(\"make swap ins error\");\n  }\n}\n*/\n\nexport function routeInstruction(\n  programId: PublicKey,\n  wallet: PublicKey,\n\n  userSourceToken: PublicKey,\n  userRouteToken: PublicKey,\n  userDestinationToken: PublicKey,\n\n  inputMint: string,\n  routeMint: string,\n  outputMint: string,\n\n  poolInfoA: ComputePoolType,\n  poolInfoB: ComputePoolType,\n\n  poolKeyA: PoolKeys,\n  poolKeyB: PoolKeys,\n\n  amountIn: BN,\n  amountOut: BN,\n\n  remainingAccounts: (PublicKey[] | undefined)[],\n): TransactionInstruction {\n  const clmmPriceLimit: BN[] = [];\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: wallet, isSigner: true }),\n  ];\n\n  keys.push(accountMeta({ pubkey: userSourceToken }));\n  keys.push(accountMeta({ pubkey: userDestinationToken }));\n\n  const poolInfos = [poolInfoA, poolInfoB];\n  const poolKeys = [poolKeyA, poolKeyB];\n  const routeMints = [inputMint, routeMint, outputMint];\n\n  for (let index = 0; index < poolInfos.length; index++) {\n    const _poolInfo = poolInfos[index];\n    const inputIsA = routeMints[index] === _poolInfo.mintA.address;\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.programId), isWritable: false }));\n    if (index === poolInfos.length - 1) {\n      keys.push(accountMeta({ pubkey: userDestinationToken }));\n    } else {\n      keys.push(accountMeta({ pubkey: userRouteToken }));\n    }\n    keys.push(accountMeta({ pubkey: new PublicKey(routeMints[index]) }));\n    keys.push(accountMeta({ pubkey: new PublicKey(routeMints[index + 1]) }));\n    if (_poolInfo.version === 6) {\n      const _poolKey = poolKeys[index] as ClmmKeys;\n\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.config.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.A : _poolKey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.B : _poolKey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.observationId) })); //todo\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2 }));\n      keys.push(\n        accountMeta({\n          pubkey: getPdaExBitmapAccount(new PublicKey(_poolInfo.programId), new PublicKey(_poolInfo.id)).publicKey,\n        }),\n      );\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_poolInfo.sqrtPriceX64.toString(), inputIsA));\n      for (const item of remainingAccounts[index] ?? []) {\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\n      }\n    } else if (_poolInfo.version === 5) {\n      const _poolKey = poolKeys[index] as AmmV5Keys;\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority), isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority) }));\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrders) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketBids) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAsks) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketEventQueue) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketBaseVault) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketQuoteVault) }));\n    } else if (_poolInfo.version === 4) {\n      const _poolKey = poolKeys[index] as AmmV4Keys;\n      const isSupportIdOnly = _poolInfo.status !== 1;\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority), isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketProgramId) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketAuthority) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.openOrders) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketId) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketBids) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketAsks) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketEventQueue) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketBaseVault) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketQuoteVault) }));\n    } else if (_poolInfo.version === 7) {\n      const _poolKey = poolKeys[index] as CpmmKeys;\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.config.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.A : _poolKey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.B : _poolKey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.observationId) }));\n    } else throw Error(\"pool type error\");\n  }\n\n  const dataLayout = struct([\n    u8(\"insId\"),\n    u64(\"amountIn\"),\n    u64(\"amountOut\"),\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\n  ]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      insId: 0,\n      amountIn,\n      amountOut,\n      clmmPriceLimit,\n    },\n    data,\n  );\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nfunction clmmPriceLimitX64InsData(x64Price: string | undefined, inputIsA: boolean): BN {\n  if (x64Price) {\n    if (inputIsA) {\n      const _m = new BN(x64Price).div(new BN(25));\n      return _m.gt(MIN_SQRT_PRICE_X64_ADD_ONE) ? _m : MIN_SQRT_PRICE_X64_ADD_ONE;\n    } else {\n      const _m = new BN(x64Price).mul(new BN(25));\n      return _m.lt(MAX_SQRT_PRICE_X64_SUB_ONE) ? _m : MAX_SQRT_PRICE_X64_SUB_ONE;\n    }\n  } else {\n    return inputIsA ? MIN_SQRT_PRICE_X64_ADD_ONE : MAX_SQRT_PRICE_X64_SUB_ONE;\n  }\n}\n\nexport function makeSwapInstruction({\n  routeProgram,\n  ownerInfo,\n  inputMint,\n  swapInfo,\n}: MakeSwapInstructionParam): ReturnTypeMakeSwapInstruction {\n  if (swapInfo.routeType === \"amm\") {\n    if (swapInfo.poolInfo[0].version === 6) {\n      const poolKeys = swapInfo.poolKey[0] as ClmmKeys;\n      const _poolKey = jsonInfo2PoolKeys(poolKeys);\n      const sqrtPriceLimitX64 = inputMint.equals(_poolKey.mintA.address)\n        ? MIN_SQRT_PRICE_X64.add(ONE)\n        : MAX_SQRT_PRICE_X64.sub(ONE);\n\n      return ClmmInstrument.makeSwapBaseInInstructions({\n        poolInfo: poolKeys,\n        poolKeys,\n        observationId: swapInfo.poolInfo[0].observationId,\n        ownerInfo: {\n          wallet: ownerInfo.wallet,\n          tokenAccountA: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.sourceToken : ownerInfo.destinationToken,\n          tokenAccountB: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.destinationToken : ownerInfo.sourceToken,\n        },\n        inputMint,\n        amountIn: swapInfo.amountIn.amount.raw,\n        amountOutMin: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\n        sqrtPriceLimitX64,\n        remainingAccounts: swapInfo.remainingAccounts[0] ?? [],\n      });\n    } else if (swapInfo.poolInfo[0].version === 7) {\n      const poolInfo = swapInfo.poolInfo[0];\n      const baseIn = inputMint.toString() === swapInfo.poolInfo[0].mintA.address;\n\n      return {\n        signers: [],\n        instructions: [\n          makeSwapCpmmBaseInInstruction(\n            poolInfo.programId,\n            ownerInfo.wallet,\n            poolInfo.authority,\n            poolInfo.configId,\n            poolInfo.id,\n            ownerInfo.sourceToken!,\n            ownerInfo.destinationToken!,\n            baseIn ? poolInfo.vaultA : poolInfo.vaultB,\n            baseIn ? poolInfo.vaultB : poolInfo.vaultA,\n            baseIn ? poolInfo.mintProgramA : poolInfo.mintProgramB,\n            baseIn ? poolInfo.mintProgramB : poolInfo.mintProgramA,\n            new PublicKey(poolInfo[baseIn ? \"mintA\" : \"mintB\"].address),\n            new PublicKey(poolInfo[baseIn ? \"mintB\" : \"mintA\"].address),\n            poolInfo.observationId,\n\n            swapInfo.amountIn.amount.raw,\n            swapInfo.minAmountOut.amount.raw,\n          ),\n        ],\n        lookupTableAddress: [],\n        instructionTypes: [baseIn ? InstructionType.CpmmSwapBaseIn : InstructionType.CpmmSwapBaseOut],\n        address: {},\n      };\n    } else {\n      const _poolKey = swapInfo.poolKey[0] as AmmV4Keys | AmmV5Keys;\n\n      return {\n        signers: [],\n        instructions: [\n          makeAMMSwapInstruction({\n            poolKeys: _poolKey,\n            version: swapInfo.poolInfo[0].pooltype.includes(\"StablePool\") ? 5 : 4,\n            userKeys: {\n              tokenAccountIn: ownerInfo.sourceToken,\n              tokenAccountOut: ownerInfo.destinationToken,\n              owner: ownerInfo.wallet,\n            },\n            amountIn: swapInfo.amountIn.amount.raw,\n            amountOut: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\n            fixedSide: \"in\",\n          }),\n        ],\n        lookupTableAddress: _poolKey.lookupTableAccount ? [_poolKey.lookupTableAccount] : [],\n        instructionTypes: [\n          swapInfo.poolInfo[0].pooltype.includes(\"StablePool\")\n            ? InstructionType.AmmV5SwapBaseIn\n            : InstructionType.AmmV4SwapBaseIn,\n        ],\n        address: {},\n      };\n    }\n  } else if (swapInfo.routeType === \"route\") {\n    const poolInfo1 = swapInfo.poolInfo[0];\n    const poolInfo2 = swapInfo.poolInfo[1];\n    const poolKey1 = swapInfo.poolKey[0];\n    const poolKey2 = swapInfo.poolKey[1];\n\n    if (ownerInfo.routeToken === undefined) throw Error(\"owner route token account check error\");\n\n    return {\n      signers: [],\n      instructions: [\n        routeInstruction(\n          routeProgram,\n          ownerInfo.wallet,\n          ownerInfo.sourceToken,\n          ownerInfo.routeToken,\n          ownerInfo.destinationToken,\n\n          inputMint.toString(),\n          swapInfo.middleToken.mint.toString(),\n          swapInfo.outputMint.toString(),\n\n          poolInfo1,\n          poolInfo2,\n          poolKey1,\n          poolKey2,\n\n          swapInfo.amountIn.amount.raw,\n          swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\n\n          swapInfo.remainingAccounts,\n        ),\n      ],\n      instructionTypes: [InstructionType.RouteSwap],\n      lookupTableAddress: [poolKey1.lookupTableAccount, poolKey2.lookupTableAccount].filter(\n        (a) => a !== undefined,\n      ) as string[],\n      address: {},\n    };\n  } else {\n    throw Error(\"route type error\");\n  }\n}\n\nexport interface ApiSwapV1Out {\n  id: string;\n  success: boolean;\n  version: \"V0\" | \"V1\";\n  openTime?: undefined;\n  msg: undefined;\n  data: {\n    swapType: \"BaseIn\" | \"BaseOut\";\n    inputMint: string;\n    inputAmount: string;\n    outputMint: string;\n    outputAmount: string;\n    otherAmountThreshold: string;\n    slippageBps: number;\n    priceImpactPct: number;\n    routePlan: {\n      poolId: string;\n      inputMint: string;\n      outputMint: string;\n      feeMint: string;\n      feeRate: number;\n      feeAmount: string;\n      remainingAccounts?: string[];\n      lastPoolPriceX64?: string;\n    }[];\n  };\n}\n\nexport function swapBaseInAutoAccount({\n  programId,\n  wallet,\n  amount,\n  inputAccount,\n  outputAccount,\n  routeInfo,\n  poolKeys,\n}: {\n  programId: PublicKey;\n  wallet: PublicKey;\n  amount: BN;\n  inputAccount: PublicKey;\n  outputAccount: PublicKey;\n  routeInfo: ApiSwapV1Out;\n  poolKeys: PoolKeys[];\n}): TransactionInstruction {\n  if (routeInfo.success === false) throw Error(\"route info error\");\n  const clmmPriceLimit: BN[] = [];\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: wallet, isSigner: true }),\n  ];\n  const cacheAccount: { [mint: string]: PublicKey } = {\n    [routeInfo.data.inputMint]: inputAccount,\n    [routeInfo.data.outputMint]: outputAccount,\n  };\n  keys.push(accountMeta({ pubkey: cacheAccount[routeInfo.data.inputMint] }));\n  keys.push(accountMeta({ pubkey: cacheAccount[routeInfo.data.outputMint] }));\n  for (let index = 0; index < poolKeys.length; index++) {\n    const _routeInfo = routeInfo.data.routePlan[index];\n    const _poolKey = poolKeys[index];\n    const inputIsA = _routeInfo.inputMint === _poolKey.mintA.address;\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.programId), isWritable: false }));\n    if (index === poolKeys.length - 1) {\n      keys.push(accountMeta({ pubkey: cacheAccount[_routeInfo.outputMint] }));\n    } else {\n      const mint = _routeInfo.outputMint;\n      if (cacheAccount[mint] === undefined) {\n        const ata = getATAAddress(\n          wallet,\n          new PublicKey(mint),\n          _poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58() ||\n            _poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()\n            ? new PublicKey(inputIsA ? _poolKey.mintB.programId : _poolKey.mintA.programId)\n            : TOKEN_PROGRAM_ID,\n        ).publicKey;\n        cacheAccount[mint] = ata;\n      }\n      keys.push(accountMeta({ pubkey: cacheAccount[mint] }));\n    }\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.inputMint) }));\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.outputMint) }));\n    if (_poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58()) {\n      const poolKey = _poolKey as ClmmKeys;\n\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.config.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.A : poolKey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.B : poolKey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.observationId) }));\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2, isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.exBitmapAccount) }));\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_routeInfo.lastPoolPriceX64, inputIsA));\n      for (const item of _routeInfo.remainingAccounts ?? []) {\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\n      }\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_STABLE.toBase58()) {\n      const poolKey = _poolKey as AmmV5Keys;\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.authority), isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketProgramId), isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketAuthority), isWritable: false }));\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.openOrders) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketId) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketBids) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketAsks) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketEventQueue) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketBaseVault) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketQuoteVault) }));\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_V4.toBase58()) {\n      const poolKey = _poolKey as AmmV4Keys;\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.authority), isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId), isWritable: false }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority), isWritable: false }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrder) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.bids) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.asks) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.eventQueue) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultA) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultB) }))\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()) {\n      const poolKey = _poolKey as CpmmKeys;\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.authority) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.config.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.A : poolKey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.B : poolKey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.observationId) }));\n    } else throw Error(\"pool type error\");\n  }\n  const dataLayout = struct([\n    u8(\"insId\"),\n    u64(\"amountIn\"),\n    u64(\"amountOut\"),\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\n  ]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      insId: 0,\n      amountIn: amount,\n      amountOut: new BN(routeInfo.data.otherAmountThreshold),\n      clmmPriceLimit,\n    },\n    data,\n  );\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nexport function swapBaseOutAutoAccount({\n  programId,\n  wallet,\n  inputAccount,\n  outputAccount,\n  routeInfo,\n  poolKeys,\n}: {\n  programId: PublicKey;\n  wallet: PublicKey;\n  inputAccount: PublicKey;\n  outputAccount: PublicKey;\n  routeInfo: ApiSwapV1Out;\n  poolKeys: PoolKeys[];\n}): TransactionInstruction {\n  if (routeInfo.success === false) throw Error(\"route info error\");\n  const clmmPriceLimit: BN[] = [];\n  const keys = [\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\n    accountMeta({ pubkey: wallet, isSigner: true }),\n  ];\n  const cacheAccount: { [mint: string]: PublicKey } = {\n    [routeInfo.data.inputMint]: inputAccount,\n    [routeInfo.data.outputMint]: outputAccount,\n  };\n  for (let index = poolKeys.length - 1; index >= 0; index--) {\n    const _routeInfo = routeInfo.data.routePlan[index];\n    const _poolKey = poolKeys[index];\n    const inputIsA = _routeInfo.inputMint === _poolKey.mintA.address;\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.programId) }));\n    if (index === 0) {\n      keys.push(accountMeta({ pubkey: cacheAccount[_routeInfo.inputMint] }));\n    } else {\n      const mint = _routeInfo.inputMint;\n      if (cacheAccount[mint] === undefined) {\n        const ata = getATAAddress(\n          wallet,\n          new PublicKey(mint),\n          _poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58() ||\n            _poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()\n            ? new PublicKey(inputIsA ? _poolKey.mintA.programId : _poolKey.mintB.programId)\n            : TOKEN_PROGRAM_ID,\n        ).publicKey;\n        cacheAccount[mint] = ata;\n      }\n      keys.push(accountMeta({ pubkey: cacheAccount[mint] }));\n    }\n    if (index === poolKeys.length - 1) {\n      keys.push(accountMeta({ pubkey: cacheAccount[_routeInfo.outputMint] }));\n    } else {\n      const mint = _routeInfo.outputMint;\n      if (cacheAccount[mint] === undefined) {\n        const ata = getATAAddress(\n          wallet,\n          new PublicKey(mint),\n          _poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58() ||\n            _poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()\n            ? new PublicKey(inputIsA ? _poolKey.mintB.programId : _poolKey.mintA.programId)\n            : TOKEN_PROGRAM_ID,\n        ).publicKey;\n        cacheAccount[mint] = ata;\n      }\n      keys.push(accountMeta({ pubkey: cacheAccount[mint] }));\n    }\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.inputMint) }));\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.outputMint) }));\n    if (_poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58()) {\n      const poolKey = _poolKey as ClmmKeys;\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.config.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.A : poolKey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.B : poolKey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.observationId) }));\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2, isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.exBitmapAccount) }));\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_routeInfo.lastPoolPriceX64, inputIsA));\n      for (const item of _routeInfo.remainingAccounts ?? []) {\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\n      }\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_STABLE.toBase58()) {\n      const poolkey = _poolKey as AmmV5Keys;\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.authority), isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketProgramId), isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketAuthority), isWritable: false }));\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.openOrders) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketId) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketBids) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketAsks) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketEventQueue) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketBaseVault) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketQuoteVault) }));\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_V4.toBase58()) {\n      const poolkey = _poolKey as AmmV4Keys;\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.authority), isWritable: false }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId), isWritable: false }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority), isWritable: false }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrder) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.bids) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.asks) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.eventQueue) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultA) }))\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultB) }))\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()) {\n      const poolkey = _poolKey as CpmmKeys;\n\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.authority) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.config.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolkey.vault.A : poolkey.vault.B) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolkey.vault.B : poolkey.vault.A) }));\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.observationId) }));\n    } else throw Error(\"pool type error\");\n  }\n  const dataLayout = struct([\n    u8(\"insId\"),\n    u64(\"amountIn\"),\n    u64(\"amountOut\"),\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\n  ]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      insId: 1,\n      amountIn: new BN(routeInfo.data.otherAmountThreshold),\n      amountOut: new BN(routeInfo.data.outputAmount),\n      clmmPriceLimit,\n    },\n    data,\n  );\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n","import { Connection, PublicKey, Signer, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport BN from \"bn.js\";\nimport { findProgramAddress, forecastTransactionSize, getMultipleAccountsInfo } from \"@/common\";\nimport { blob, publicKey, seq, struct, u64, u8 } from \"@/marshmallow\";\nimport { Token } from \"@/module\";\nimport ModuleBase from \"../moduleBase\";\n\nexport interface SHOW_INFO {\n  programId: PublicKey;\n  poolId: PublicKey;\n  ammId: PublicKey;\n  ownerAccountId: PublicKey;\n  snapshotLpAmount: BN;\n\n  openTime: number;\n  endTime: number;\n\n  project: typeof Utils1216.VERSION_PROJECT[number];\n\n  canClaim: boolean;\n  canClaimErrorType: canClaimErrorType;\n\n  tokenInfo: {\n    mintAddress: PublicKey;\n    mintVault: PublicKey;\n    mintDecimals: number;\n    perLpLoss: BN;\n    debtAmount: BN;\n  }[];\n}\n\nexport type canClaimErrorType = \"outOfOperationalTime\" | \"alreadyClaimIt\" | undefined;\n\nexport default class Utils1216 extends ModuleBase {\n  static CLAIMED_NUM = 3;\n  static POOL_LAYOUT = struct([\n    blob(8),\n    u8(\"bump\"),\n    u8(\"status\"),\n    u64(\"openTime\"),\n    u64(\"endTime\"),\n    publicKey(\"ammId\"),\n\n    seq(\n      struct([\n        u8(\"mintDecimals\"),\n        publicKey(\"mintAddress\"),\n        publicKey(\"mintVault\"),\n        u64(\"perLpLoss\"),\n        u64(\"totalClaimedAmount\"),\n      ]),\n      Utils1216.CLAIMED_NUM,\n      \"tokenInfo\",\n    ),\n    seq(u64(), 10, \"padding\"),\n  ]);\n\n  static OWNER_LAYOUT = struct([\n    blob(8),\n    u8(\"bump\"),\n    u8(\"version\"),\n    publicKey(\"poolId\"),\n    publicKey(\"owner\"),\n    u64(\"lpAmount\"),\n\n    seq(\n      struct([publicKey(\"mintAddress\"), u64(\"debtAmount\"), u64(\"claimedAmount\")]),\n      Utils1216.CLAIMED_NUM,\n      \"tokenInfo\",\n    ),\n    seq(u64(), 4, \"padding\"),\n  ]);\n\n  static DEFAULT_POOL_ID = [\n    \"58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2\",\n    \"6UmmUiYoBjSrhakAobJw8BvkmJtDVxaeBtbt7rxWo1mg\",\n    \"AVs9TA4nWDzfPJE9gGVNJMVhcQy3V9PGazuz33BfG2RA\",\n    \"DVa7Qmb5ct9RCpaU7UTpSaf3GVMYz17vNVU67XpdCRut\",\n    \"7XawhbbxtsRcQA8KTkHT9f9nc6d69UwqCDh6U5EEbEmX\",\n    \"6a1CsrpeZubDjEJE9s1CMVheB6HWM5d7m1cj2jkhyXhj\",\n    \"EoNrn8iUhwgJySD1pHu8Qxm5gSQqLK3za4m8xzD2RuEb\",\n    \"AceAyRTWt4PyB2pHqf2qhDgNZDtKVNaxgL8Ru3V4aN1P\",\n    \"6tmFJbMk5yVHFcFy7X2K8RwHjKLr6KVFLYXpgpBNeAxB\",\n  ].map((i) => new PublicKey(i));\n\n  static SEED_CONFIG = {\n    pool: {\n      id: Buffer.from(\"pool_seed\", \"utf8\"),\n    },\n    owner: {\n      id: Buffer.from(\"user_claim_seed\", \"utf8\"),\n    },\n  };\n\n  static VERSION_PROJECT = [undefined, \"Francium\", \"Tulip\", \"Larix\"] as const;\n\n  // pda\n  static getPdaPoolId(\n    programId: PublicKey,\n    ammId: PublicKey,\n  ): {\n    publicKey: PublicKey;\n    nonce: number;\n  } {\n    return findProgramAddress([Utils1216.SEED_CONFIG.pool.id, ammId.toBuffer()], programId);\n  }\n\n  static getPdaOwnerId(\n    programId: PublicKey,\n    poolId: PublicKey,\n    owner: PublicKey,\n    version: number,\n  ): {\n    publicKey: PublicKey;\n    nonce: number;\n  } {\n    return findProgramAddress(\n      [\n        Utils1216.SEED_CONFIG.owner.id,\n        poolId.toBuffer(),\n        owner.toBuffer(),\n        // new BN(version).toBuffer()\n        Buffer.from(new BN(version).toArray()),\n      ],\n      programId,\n    );\n  }\n\n  static async getAllInfo({\n    connection,\n    programId,\n    poolIds,\n    wallet,\n    chainTime,\n  }: {\n    connection: Connection;\n    programId: PublicKey;\n    poolIds: PublicKey[];\n    wallet: PublicKey;\n    chainTime: number;\n  }): Promise<SHOW_INFO[]> {\n    if (poolIds.length === 0) return [];\n\n    const allPoolPda = poolIds.map((id) => Utils1216.getPdaPoolId(programId, id).publicKey);\n\n    const allOwnerPda: PublicKey[] = [];\n    for (let itemVersion = 0; itemVersion < Utils1216.VERSION_PROJECT.length; itemVersion++) {\n      allOwnerPda.push(\n        ...allPoolPda.map((id) => Utils1216.getPdaOwnerId(programId, id, wallet, itemVersion).publicKey),\n      );\n    }\n\n    const pdaInfo = await getMultipleAccountsInfo(connection, [...allPoolPda, ...allOwnerPda]);\n\n    const info: SHOW_INFO[] = [];\n    for (let index = 0; index < pdaInfo.length; index++) {\n      const version = Math.floor(index / poolIds.length);\n      const i = index % poolIds.length;\n\n      const itemPoolId = allPoolPda[i];\n      const itemOwnerId = allOwnerPda[index];\n      const itemPoolInfoS = pdaInfo[i];\n      const itemOwnerInfoS = pdaInfo[poolIds.length + index];\n      if (!(itemPoolInfoS && itemOwnerInfoS)) continue;\n      if (\n        itemPoolInfoS.data.length !== Utils1216.POOL_LAYOUT.span ||\n        itemOwnerInfoS.data.length !== Utils1216.OWNER_LAYOUT.span\n      )\n        continue;\n\n      const itemPoolInfo = Utils1216.POOL_LAYOUT.decode(itemPoolInfoS.data);\n      const itemOwnerInfo = Utils1216.OWNER_LAYOUT.decode(itemOwnerInfoS.data);\n\n      const openTime = itemPoolInfo.openTime.toNumber();\n      const endTime = itemPoolInfo.endTime.toNumber();\n\n      const hasCanClaimToken =\n        itemOwnerInfo.tokenInfo.map((i) => i.debtAmount.gt(new BN(0))).filter((i) => !i).length !== 3;\n      const inCanClaimTime = chainTime > openTime && chainTime < endTime && itemPoolInfo.status === 1;\n\n      const canClaim = hasCanClaimToken && inCanClaimTime;\n\n      info.push({\n        programId,\n        poolId: itemPoolId,\n        ammId: itemPoolInfo.ammId,\n        ownerAccountId: itemOwnerId,\n        snapshotLpAmount: itemOwnerInfo.lpAmount,\n\n        project: Utils1216.VERSION_PROJECT[version],\n\n        openTime,\n        endTime,\n\n        canClaim,\n        canClaimErrorType: !hasCanClaimToken ? \"alreadyClaimIt\" : !inCanClaimTime ? \"outOfOperationalTime\" : undefined,\n\n        tokenInfo: itemPoolInfo.tokenInfo.map((itemPoolToken, i) => ({\n          mintAddress: itemPoolToken.mintAddress,\n          mintVault: itemPoolToken.mintVault,\n          mintDecimals: itemPoolToken.mintDecimals,\n          perLpLoss: itemPoolToken.perLpLoss,\n          debtAmount: itemOwnerInfo.tokenInfo[i].debtAmount.add(itemOwnerInfo.tokenInfo[i].claimedAmount),\n        })),\n      });\n    }\n\n    return info;\n  }\n\n  public async makeClaimTransaction({\n    poolInfo,\n    ownerInfo,\n  }: {\n    connection: Connection;\n    poolInfo: SHOW_INFO;\n    ownerInfo: {\n      wallet?: PublicKey;\n      associatedOnly: boolean;\n    };\n  }): Promise<\n    {\n      transaction: Transaction;\n      signer: Signer[];\n    }[]\n  > {\n    if (!ownerInfo.wallet) this.scope.checkOwner();\n    const txBuilder = this.createTxBuilder();\n    const wallet = ownerInfo.wallet || this.scope.ownerPubKey;\n\n    const ownerVaultList: PublicKey[] = [];\n    for (const itemToken of poolInfo.tokenInfo) {\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n        mint: itemToken.mintAddress,\n        owner: this.scope.ownerPubKey,\n        notUseTokenAccount: itemToken.mintAddress.equals(Token.WSOL.mint),\n        createInfo: {\n          payer: wallet,\n          amount: 0,\n        },\n        skipCloseAccount: !itemToken.mintAddress.equals(Token.WSOL.mint),\n\n        associatedOnly: itemToken.mintAddress.equals(Token.WSOL.mint) ? false : ownerInfo.associatedOnly,\n      });\n      instructionParams && txBuilder.addInstruction(instructionParams);\n      ownerVaultList.push(account!);\n    }\n\n    txBuilder.addInstruction({\n      instructions: [\n        Utils1216.makeClaimInstruction({\n          programId: poolInfo.programId,\n          poolInfo,\n          ownerInfo: {\n            wallet,\n            ownerPda: poolInfo.ownerAccountId,\n            claimAddress: ownerVaultList,\n          },\n        }),\n      ],\n    });\n    const { transaction, signers } = txBuilder.build();\n\n    return [\n      {\n        transaction,\n        signer: signers,\n      },\n    ];\n  }\n\n  public async makeClaimAllTransaction({\n    poolInfos,\n    ownerInfo,\n  }: {\n    poolInfos: SHOW_INFO[];\n    ownerInfo: {\n      wallet?: PublicKey;\n      associatedOnly: boolean;\n    };\n  }): Promise<\n    {\n      transaction: Transaction;\n      signer: Signer[];\n    }[]\n  > {\n    const txBuilder = this.createTxBuilder();\n    const wallet = ownerInfo.wallet || this.scope.ownerPubKey;\n\n    const tempNewVault: { [mint: string]: PublicKey } = {};\n\n    for (const poolInfo of poolInfos) {\n      const ownerVaultList: PublicKey[] = [];\n      for (const itemToken of poolInfo.tokenInfo) {\n        const { account: tempVault, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n          mint: itemToken.mintAddress,\n          owner: this.scope.ownerPubKey,\n          notUseTokenAccount: itemToken.mintAddress.equals(Token.WSOL.mint),\n          createInfo: {\n            payer: wallet,\n            amount: 0,\n          },\n          skipCloseAccount: !itemToken.mintAddress.equals(Token.WSOL.mint),\n\n          associatedOnly: itemToken.mintAddress.equals(Token.WSOL.mint) ? false : ownerInfo.associatedOnly,\n        });\n        instructionParams && txBuilder.addInstruction(instructionParams);\n\n        if (tempVault) {\n          tempNewVault[itemToken.mintAddress.toString()] = tempVault;\n          ownerVaultList.push(tempVault);\n        }\n      }\n\n      txBuilder.addInstruction({\n        instructions: [\n          Utils1216.makeClaimInstruction({\n            programId: poolInfo.programId,\n            poolInfo,\n            ownerInfo: {\n              wallet,\n              ownerPda: poolInfo.ownerAccountId,\n              claimAddress: ownerVaultList,\n            },\n          }),\n        ],\n      });\n    }\n\n    const { transaction, signers } = txBuilder.build();\n    const instructions = txBuilder.allInstructions;\n\n    if (forecastTransactionSize(instructions, [wallet, ...signers.map((s) => s.publicKey)])) {\n      return [\n        {\n          transaction,\n          signer: signers,\n        },\n      ];\n    } else {\n      return [\n        {\n          transaction: new Transaction().add(...instructions.slice(0, txBuilder.AllTxData.instructions.length - 1)),\n          signer: signers,\n        },\n        {\n          transaction: new Transaction().add(...instructions.slice(txBuilder.AllTxData.instructions.length - 1)),\n          signer: [],\n        },\n        { transaction: new Transaction().add(...txBuilder.AllTxData.endInstructions), signer: [] },\n      ];\n    }\n  }\n\n  static makeClaimInstruction({\n    programId,\n    poolInfo,\n    ownerInfo,\n  }: {\n    programId: PublicKey;\n\n    poolInfo: SHOW_INFO;\n    ownerInfo: {\n      wallet: PublicKey;\n      ownerPda: PublicKey;\n      claimAddress: PublicKey[];\n    };\n  }): TransactionInstruction {\n    const dataLayout = struct([]);\n\n    const keys = [\n      { pubkey: ownerInfo.wallet, isSigner: true, isWritable: true },\n      { pubkey: poolInfo.poolId, isSigner: false, isWritable: true },\n      { pubkey: ownerInfo.ownerPda, isSigner: false, isWritable: true },\n\n      ...ownerInfo.claimAddress.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n      ...poolInfo.tokenInfo.map(({ mintVault }) => ({ pubkey: mintVault, isSigner: false, isWritable: true })),\n\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({}, data);\n    const aData = Buffer.from([...[10, 66, 208, 184, 161, 6, 191, 98], ...data]);\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data: aData,\n    });\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { IdoKeysData, OwnerIdoInfo } from \"../../api/type\";\nimport { IDO_ALL_PROGRAM } from \"../../common/programId\";\nimport { WSOLMint } from \"../../common/pubKey\";\nimport { MakeTxData } from \"../../common/txTool/txTool\";\nimport { TxVersion } from \"../../common/txTool/txType\";\nimport { jsonInfo2PoolKeys } from \"../../common/utility\";\nimport ModuleBase from \"../moduleBase\";\nimport { makeClaimInstruction, makeClaimInstructionV4 } from \"./instruction\";\n\nconst PROGRAM_TO_VERSION = {\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V1.toString()]: 1,\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V2.toString()]: 2,\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V3.toString()]: 3,\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V4.toString()]: 4,\n};\n\nexport default class MarketV2 extends ModuleBase {\n  public async claim<T extends TxVersion>({\n    ownerInfo,\n    idoKeys,\n    associatedOnly = true,\n    checkCreateATAOwner = false,\n    txVersion,\n  }: {\n    ownerInfo: OwnerIdoInfo[keyof OwnerIdoInfo] & { userIdoInfo: string };\n    idoKeys: IdoKeysData;\n    associatedOnly?: boolean;\n    checkCreateATAOwner?: boolean;\n    txVersion?: T;\n  }): Promise<MakeTxData> {\n    const txBuilder = this.createTxBuilder();\n    const version = PROGRAM_TO_VERSION[idoKeys.programId];\n\n    if (!version) this.logAndCreateError(\"invalid version\", version);\n    const poolConfigKey = jsonInfo2PoolKeys(idoKeys);\n\n    const [hasUnClaimedProject, hasUnClaimedBuy] = [!new BN(ownerInfo.coin).isZero(), !new BN(ownerInfo.pc).isZero()];\n\n    const userProjectUseSolBalance = poolConfigKey.projectInfo.mint.address.equals(WSOLMint);\n    const { account: userProjectTokenAccount, instructionParams: userProjectInstructionParams } =\n      await this.scope.account.getOrCreateTokenAccount({\n        tokenProgram: poolConfigKey.projectInfo.mint.programId,\n        mint: poolConfigKey.projectInfo.mint.address,\n        owner: this.scope.ownerPubKey,\n        createInfo: {\n          payer: this.scope.ownerPubKey,\n          amount: 0,\n        },\n        skipCloseAccount: !userProjectUseSolBalance,\n        notUseTokenAccount: userProjectUseSolBalance,\n        associatedOnly: userProjectUseSolBalance ? false : associatedOnly,\n        checkCreateATAOwner,\n      });\n\n    if (!userProjectTokenAccount && hasUnClaimedProject)\n      this.logAndCreateError(\"target token accounts not found\", \"mint\", idoKeys.projectInfo.mint.address);\n    hasUnClaimedProject && userProjectInstructionParams && txBuilder.addInstruction(userProjectInstructionParams);\n\n    const buyMintUseSolBalance = poolConfigKey.buyInfo.mint.address.equals(WSOLMint);\n    const { account: userBuyTokenAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\n      tokenProgram: poolConfigKey.buyInfo.mint.programId,\n      mint: poolConfigKey.buyInfo.mint.address,\n      owner: this.scope.ownerPubKey,\n      createInfo: {\n        payer: this.scope.ownerPubKey,\n        amount: 0,\n      },\n      skipCloseAccount: !buyMintUseSolBalance,\n      notUseTokenAccount: buyMintUseSolBalance,\n      associatedOnly: buyMintUseSolBalance ? false : associatedOnly,\n      checkCreateATAOwner,\n    });\n    if (!userProjectTokenAccount && hasUnClaimedBuy)\n      this.logAndCreateError(\"target token accounts not found\", \"mint\", idoKeys.projectInfo.mint.address);\n    hasUnClaimedBuy && instructionParams && txBuilder.addInstruction(instructionParams);\n\n    if (!userProjectTokenAccount || !userBuyTokenAccount)\n      this.logAndCreateError(\n        \"target token accounts not found\",\n        \"mint\",\n        idoKeys.projectInfo.mint.address,\n        idoKeys.buyInfo.mint.address,\n      );\n\n    if (version === 3) {\n      return txBuilder\n        .addInstruction({\n          instructions: [\n            ...(hasUnClaimedProject\n              ? [\n                makeClaimInstruction<\"3\">(\n                  { programId: poolConfigKey.programId },\n                  {\n                    idoId: poolConfigKey.id,\n                    authority: poolConfigKey.authority,\n                    poolTokenAccount: poolConfigKey.projectInfo.vault,\n                    userTokenAccount: userProjectTokenAccount!,\n                    userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\n                    userOwner: this.scope.ownerPubKey,\n                  },\n                ),\n              ]\n              : []),\n            ...(hasUnClaimedBuy\n              ? [\n                makeClaimInstruction<\"3\">(\n                  { programId: new PublicKey(idoKeys.programId) },\n                  {\n                    idoId: poolConfigKey.id,\n                    authority: poolConfigKey.authority,\n                    poolTokenAccount: poolConfigKey.buyInfo.vault,\n                    userTokenAccount: userBuyTokenAccount!,\n                    userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\n                    userOwner: this.scope.ownerPubKey,\n                  },\n                ),\n              ]\n              : []),\n          ],\n        })\n        .versionBuild({ txVersion }) as Promise<MakeTxData>;\n    }\n    if (version < 3) {\n      if (!hasUnClaimedProject && !hasUnClaimedBuy) this.logAndCreateError(\"no claimable rewards\");\n      return txBuilder\n        .addInstruction({\n          instructions: [\n            makeClaimInstruction<\"\">(\n              { programId: poolConfigKey.programId },\n              {\n                idoId: poolConfigKey.id,\n                authority: poolConfigKey.authority,\n                poolQuoteTokenAccount: poolConfigKey.buyInfo.vault,\n                poolBaseTokenAccount: poolConfigKey.projectInfo.vault,\n                userQuoteTokenAccount: userBuyTokenAccount!,\n                userBaseTokenAccount: userProjectTokenAccount!,\n                userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\n                userOwner: this.scope.ownerPubKey,\n              },\n            ),\n          ],\n        })\n        .versionBuild({ txVersion }) as Promise<MakeTxData>;\n    }\n\n    const keys = {\n      poolConfig: {\n        id: poolConfigKey.id,\n        programId: poolConfigKey.programId,\n        authority: poolConfigKey.authority,\n        baseVault: poolConfigKey.projectInfo.vault,\n        quoteVault: poolConfigKey.buyInfo.vault,\n        baseToken: idoKeys.projectInfo.mint,\n        quoteToken: idoKeys.buyInfo.mint,\n      },\n      userKeys: {\n        baseTokenAccount: userProjectTokenAccount!,\n        quoteTokenAccount: userBuyTokenAccount!,\n        ledgerAccount: new PublicKey(ownerInfo.userIdoInfo),\n        owner: this.scope.ownerPubKey,\n      },\n    };\n\n    return txBuilder\n      .addInstruction({\n        instructions: [\n          ...(hasUnClaimedProject ? [makeClaimInstructionV4({ ...keys, side: \"base\" })] : []),\n          ...(hasUnClaimedBuy ? [makeClaimInstructionV4({ ...keys, side: \"quote\" })] : []),\n        ],\n      })\n      .versionBuild({ txVersion }) as Promise<MakeTxData>;\n  }\n}\n","import { PublicKey, SYSVAR_CLOCK_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { CLOCK_PROGRAM_ID, RENT_PROGRAM_ID, SYSTEM_PROGRAM_ID } from \"@/common/pubKey\";\nimport { claimLayout, purchaseLayout } from \"./layout\";\nimport {\n  ClaimInstructionKeys,\n  ClaimInstructionKeysV3,\n  IdoClaimInstructionParams,\n  PurchaseInstructionKeys,\n} from \"./type\";\n\nexport function makePurchaseInstruction({\n  programId,\n  amount,\n  instructionKeys,\n}: {\n  programId: PublicKey;\n  amount: string | number;\n  instructionKeys: PurchaseInstructionKeys;\n}): TransactionInstruction {\n  const keys = [\n    // system\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable: false },\n    // pubkeys\n    ...Object.entries(instructionKeys).map(([name, pubkey]) => ({\n      pubkey,\n      isSigner: name === \"userOwner\",\n      isWritable: ![\"authority\", \"userOwner\", \"userIdoCheck\", \"userStakeInfo\"].includes(name),\n    })),\n  ];\n\n  const data = Buffer.alloc(purchaseLayout.span);\n  purchaseLayout.encode({ instruction: 1, amount: Number(amount) }, data);\n\n  return new TransactionInstruction({ keys, programId, data });\n}\n\nexport function makeClaimInstruction<Version extends \"\" | \"3\" = \"\">(\n  { programId }: { programId: PublicKey },\n  instructionKeys: Version extends \"3\" ? ClaimInstructionKeysV3 : ClaimInstructionKeys,\n): TransactionInstruction {\n  const keys = [\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable: false },\n    ...Object.entries(instructionKeys).map(([name, pubkey]) => ({\n      pubkey,\n      isSigner: name === \"userOwner\",\n      isWritable: ![\"authority\", \"userOwner\"].includes(name),\n    })),\n  ];\n\n  const data = Buffer.alloc(claimLayout.span);\n  claimLayout.encode({ instruction: 2 }, data);\n\n  return new TransactionInstruction({ keys, programId, data });\n}\n\nexport function makeClaimInstructionV4(params: IdoClaimInstructionParams): TransactionInstruction {\n  const { poolConfig, userKeys, side } = params;\n\n  const tokenAccount = side === \"base\" ? userKeys.baseTokenAccount : userKeys.quoteTokenAccount;\n  const vault = side === \"base\" ? poolConfig.baseVault : poolConfig.quoteVault;\n  const data = Buffer.alloc(claimLayout.span);\n  claimLayout.encode(\n    {\n      instruction: 2,\n    },\n    data,\n  );\n\n  const keys = [\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isWritable: false,\n      isSigner: false,\n    },\n    // ido\n    {\n      pubkey: poolConfig.id,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: poolConfig.authority,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: vault,\n      isWritable: true,\n      isSigner: false,\n    },\n    // user\n    {\n      pubkey: tokenAccount,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: userKeys.ledgerAccount,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: userKeys.owner,\n      isWritable: false,\n      isSigner: true,\n    },\n  ];\n\n  return new TransactionInstruction({\n    programId: poolConfig.programId,\n    keys,\n    data,\n  });\n}\n","import { nu64, struct, u8 } from \"../../marshmallow\";\n\nexport const purchaseLayout = struct([u8(\"instruction\"), nu64(\"amount\")]);\nexport const claimLayout = struct([u8(\"instruction\")]);\n","import { PublicKey } from \"@solana/web3.js\";\nimport { MintLayout, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nimport { ApiV3Token, JupTokenType } from \"@/api/type\";\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\nimport { LoadParams } from \"../type\";\n\nimport { SOL_INFO } from \"./constant\";\nimport { TokenInfo } from \"./type\";\n\nexport default class TokenModule extends ModuleBase {\n  private _tokenList: TokenInfo[] = [];\n  private _tokenMap: Map<string, TokenInfo> = new Map();\n  private _blackTokenMap: Map<string, TokenInfo> = new Map();\n  private _mintGroup: { official: Set<string>; jup: Set<string>; extra: Set<string> } = {\n    official: new Set(),\n    jup: new Set(),\n    extra: new Set(),\n  };\n  private _whiteMap: Set<string> = new Set();\n  private _extraTokenList: TokenInfo[] = [];\n\n  constructor(params: ModuleBaseProps) {\n    super(params);\n  }\n\n  public async load(params?: LoadParams & { type?: JupTokenType }): Promise<void> {\n    this.checkDisabled();\n    const { forceUpdate = false, type = JupTokenType.Strict } = params || {};\n    const { mintList, blacklist, whiteList } = await this.scope.fetchV3TokenList(forceUpdate);\n    const jup = await this.scope.fetchJupTokenList(forceUpdate);\n    // reset all data\n    this._tokenList = [];\n    this._tokenMap = new Map();\n    this._blackTokenMap = new Map();\n    this._mintGroup = { official: new Set(), jup: new Set(), extra: new Set() };\n    this._whiteMap = new Set(whiteList);\n\n    this._tokenMap.set(SOL_INFO.address, SOL_INFO);\n    this._mintGroup.official.add(SOL_INFO.address);\n    blacklist.forEach((token) => {\n      this._blackTokenMap.set(token.address, { ...token, priority: -1 });\n    });\n\n    mintList.forEach((token) => {\n      if (this._blackTokenMap.has(token.address)) return;\n      this._tokenMap.set(token.address, {\n        ...token,\n        type: \"raydium\",\n        priority: 2,\n        programId:\n          token.programId ??\n          (token.tags.includes(\"token-2022\") ? TOKEN_2022_PROGRAM_ID.toBase58() : TOKEN_PROGRAM_ID.toBase58()),\n      });\n      this._mintGroup.official.add(token.address);\n    });\n\n    jup.forEach((token) => {\n      if (this._blackTokenMap.has(token.address) || this._tokenMap.has(token.address)) return;\n      this._tokenMap.set(token.address, {\n        ...token,\n        type: \"jupiter\",\n        priority: 1,\n        programId:\n          token.programId ??\n          (token.tags.includes(\"token-2022\") ? TOKEN_2022_PROGRAM_ID.toBase58() : TOKEN_PROGRAM_ID.toBase58()),\n        tags: token.freezeAuthority ? [...(token.tags || []), \"hasFreeze\"] : token.tags,\n      });\n      this._mintGroup.jup.add(token.address);\n    });\n\n    this._extraTokenList.forEach((token) => {\n      if (this._blackTokenMap.has(token.address) || this._tokenMap.has(token.address)) return;\n      this._tokenMap.set(token.address, {\n        ...token,\n        type: \"extra\",\n        priority: 1,\n        programId:\n          token.programId || token.tags.includes(\"token-2022\")\n            ? TOKEN_2022_PROGRAM_ID.toBase58()\n            : TOKEN_PROGRAM_ID.toBase58(),\n      });\n      this._mintGroup.extra.add(token.address);\n    });\n\n    this._tokenList = Array.from(this._tokenMap).map((data) => data[1]);\n  }\n\n  get tokenList(): TokenInfo[] {\n    return this._tokenList;\n  }\n  get tokenMap(): Map<string, TokenInfo> {\n    return this._tokenMap;\n  }\n  get blackTokenMap(): Map<string, TokenInfo> {\n    return this._blackTokenMap;\n  }\n  get mintGroup(): { official: Set<string>; jup: Set<string> } {\n    return this._mintGroup;\n  }\n  get whiteListMap(): Set<string> {\n    return this._whiteMap;\n  }\n\n  /** === util functions === */\n\n  public async getTokenInfo(mint: string | PublicKey): Promise<ApiV3Token> {\n    if (!mint) throw new Error(\"please input mint\");\n    const mintStr = mint.toString();\n    const info = this._tokenMap.get(mintStr);\n    if (info) return info;\n    if (mintStr.toLocaleUpperCase() === \"SOL\") return SOL_INFO;\n\n    const apiTokenInfo = (await this.scope.api.getTokenInfo([mintStr]))[0];\n    if (apiTokenInfo) {\n      this._mintGroup.extra.add(mintStr);\n      this._tokenMap.set(mintStr, { ...apiTokenInfo, priority: 2 });\n      return apiTokenInfo;\n    }\n\n    const onlineInfo = await this.scope.connection.getAccountInfo(new PublicKey(mintStr));\n    if (!onlineInfo) throw new Error(`mint address not found: ${mintStr}`);\n    const data = MintLayout.decode(onlineInfo.data);\n    const mintSymbol = mintStr.toString().substring(0, 6);\n    const fullInfo = {\n      chainId: 101,\n      address: mintStr,\n      programId: onlineInfo.owner.toBase58(),\n      logoURI: \"\",\n      symbol: mintSymbol,\n      name: mintSymbol,\n      decimals: data.decimals,\n      tags: [],\n      extensions: {},\n      priority: 0,\n      type: \"unknown\",\n    };\n    this._mintGroup.extra.add(mintStr);\n    this._tokenMap.set(mintStr, fullInfo);\n    return fullInfo;\n  }\n}\n","import { PublicKey, Signer, Transaction, TransactionInstruction, VersionedTransaction, Keypair } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { getTransferFeeConfig, Mint } from \"@solana/spl-token\";\nimport { MultiTxExecuteParam, TxBuilder } from \"../common/txTool/txTool\";\nimport { TokenAmount } from \"../module/amount\";\n\nexport interface ReturnTypeMakeInstructions<T = Record<string, PublicKey>> {\n  signers: (Signer | Keypair)[];\n  instructions: TransactionInstruction[];\n  instructionTypes: string[];\n  address: T;\n  lookupTableAddress: string[];\n}\n\nexport type SignAllTransactions =\n  | (<T extends Transaction | VersionedTransaction>(transaction: T[]) => Promise<T[]>)\n  | undefined;\n\nexport interface MakeTransaction<T = Record<string, any>> {\n  builder: TxBuilder;\n  signers: Signer[];\n  transaction: Transaction;\n  instructionTypes: string[];\n  execute: () => Promise<{ txId: string; signedTx: Transaction }>;\n  extInfo: T;\n}\n\nexport interface MakeV0Transaction<T = Record<string, any>> {\n  builder: TxBuilder;\n  signers: Signer[];\n  transaction: VersionedTransaction;\n  instructionTypes: string[];\n  execute: () => Promise<string>;\n  extInfo: T;\n}\n\nexport interface MakeMultiTransaction {\n  builder: TxBuilder;\n  signers: Signer[][];\n  transactions: Transaction[];\n  instructionTypes: string[];\n  execute: (params?: MultiTxExecuteParam) => Promise<{\n    txIds: string[];\n    signedTxs: Transaction[];\n  }>;\n  extInfo: Record<string, any>;\n}\n\nexport interface InstructionReturn {\n  instruction: TransactionInstruction;\n  instructionType: string;\n}\n\nexport interface ComputeBudgetConfig {\n  units?: number;\n  microLamports?: number;\n}\n\nexport interface LoadParams {\n  forceUpdate?: boolean;\n}\n\nexport interface TransferAmountFee {\n  amount: TokenAmount;\n  fee: TokenAmount | undefined;\n  expirationTime: number | undefined;\n}\nexport interface GetTransferAmountFee {\n  amount: BN;\n  fee: BN | undefined;\n  expirationTime: number | undefined;\n}\n\n// export type ReturnTypeFetchMultipleMintInfo = Mint & { feeConfig: TransferFeeConfig | undefined };\nexport type ReturnTypeFetchMultipleMintInfo = Mint & { feeConfig: ReturnType<typeof getTransferFeeConfig> | undefined };\nexport interface ReturnTypeFetchMultipleMintInfos {\n  [mint: string]: ReturnTypeFetchMultipleMintInfo & { programId: PublicKey };\n}\n\ntype Primitive = boolean | number | string | null | undefined | PublicKey;\n\n/**\n *\n * @example\n * ```typescript\n * interface A {\n *   keyA: string;\n *   keyB: string;\n *   map: {\n *     hello: string;\n *     i: number;\n *   };\n *   list: (string | number)[];\n *   keyC: number;\n * }\n *\n * type WrappedA = ReplaceType<A, string, boolean> // {\n *   keyA: boolean;\n *   keyB: boolean;\n *   map: {\n *     hello: boolean;\n *     i: number;\n *   };\n *   list: (number | boolean)[];\n *   keyC: number;\n * }\n * ```\n */\nexport type ReplaceType<Old, From, To> = {\n  [T in keyof Old]: Old[T] extends From // to avoid case: Old[T] is an Object,\n    ? Exclude<Old[T], From> | To // when match,  directly replace\n    : Old[T] extends Primitive // judge whether need recursively replace\n    ? From extends Old[T] // it's an Object\n      ? Exclude<Old[T], From> | To // directly replace\n      : Old[T] // stay same\n    : ReplaceType<Old[T], From, To>; // recursively replace\n};\n\nexport type MayArray<T> = T | Array<T>;\n\nexport type MayDeepArray<T> = T | Array<MayDeepArray<T>>;\n\nexport type MayFunction<T, PS extends any[] = []> = T | ((...Params: PS) => T);\n\nexport type ArrayItem<T extends ReadonlyArray<any>> = T extends Array<infer P> ? P : never;\n\nexport type ExactPartial<T, U> = {\n  [P in Extract<keyof T, U>]?: T[P];\n} & {\n  [P in Exclude<keyof T, U>]: T[P];\n};\n\nexport type ExactRequired<T, U> = {\n  [P in Extract<keyof T, U>]-?: T[P];\n} & {\n  [P in Exclude<keyof T, U>]: T[P];\n};\n\n/**\n * extract only string and number\n */\nexport type SKeyof<O> = Extract<keyof O, string>;\n\nexport type GetValue<T, K> = K extends keyof T ? T[K] : undefined;\n/**\n * @example\n * type A = { a: number; b: string; c?: string }\n * type B = { a: string; c: string; d?: boolean }\n *\n * type D = SOR<A, B> // { a: number | string; b: string | undefined; c: string | undefined; d: boolean | undefined } // ! if use SOR, you lost union type guard feature, try NOT to use this trick\n */\nexport type SOR<T, U> = { [K in keyof T | keyof U]: GetValue<T, K> | GetValue<U, K> };\n\nexport type Fallback<T, FallbackT> = T extends undefined ? FallbackT : T;\n\n/**\n * @example\n * type A = { a: number; b: string; c?: string }\n * type B = { a: string; c: string; d?: boolean }\n *\n * type D = Cover<A, B> // { a: string; b: string; c: string; d?: boolean}\n */\nexport type Cover<O, T> = { [K in SKeyof<O> | SKeyof<T>]: Fallback<GetValue<T, K>, GetValue<O, K>> };\n\nexport type UnionCover<O, T> = T extends T ? Cover<O, T> : never;\n\ntype MergeArr<Arr> = (Arr extends (infer T)[] ? T : never)[];\n\n/**\n * typescript type helper function\n * @example\n * type A = { hello: string; version: 3 }[]\n * type B = { hello: string; version: 5 }[]\n * type OK = MergeArr<A | B> // ({ hello: string; version: 3 } | { hello: string; version: 5 })[]\n * type Wrong = A | B // { hello: string; version: 3 }[] | { hello: string; version: 5 }[] // <= this type can't have auto type intelligense of array.map\n */\nexport const unionArr = <T>(arr: T): MergeArr<T> => arr as unknown as MergeArr<T>;\n"],"names":[],"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90]}},
    {"offset": {"line": 18588, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}